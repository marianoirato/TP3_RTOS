
uCOSII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b4  0800b3b4  0000d2a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3b4  0800b3b4  0000c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3bc  0800b3bc  0000d2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3bc  0800b3bc  0000c3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3c0  0800b3c0  0000c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0800b3c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e90  200002a8  0800b66c  0000d2a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004138  0800b66c  0000e138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145db  00000000  00000000  0000d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a6  00000000  00000000  000218ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00026158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d09  00000000  00000000  00027330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c439  00000000  00000000  00028039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175dc  00000000  00000000  00044472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2cb  00000000  00000000  0005ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000e9d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  000ee580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a8 	.word	0x200002a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b0a8 	.word	0x0800b0a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ac 	.word	0x200002ac
 8000148:	0800b0a8 	.word	0x0800b0a8

0800014c <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 800014c:	b672      	cpsid	i
        BX      LR
 800014e:	4770      	bx	lr

08000150 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000150:	b662      	cpsie	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000154:	b672      	cpsid	i
        PUSH   {R1}
 8000156:	b402      	push	{r1}
        MRS     R1, BASEPRI
 8000158:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 800015c:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000160:	f3bf 8f4f 	dsb	sy
        ISB
 8000164:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 8000168:	4608      	mov	r0, r1
        POP    {R1}
 800016a:	bc02      	pop	{r1}
        CPSIE   I
 800016c:	b662      	cpsie	i
        BX      LR
 800016e:	4770      	bx	lr

08000170 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000170:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000172:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000176:	f3bf 8f4f 	dsb	sy
        ISB
 800017a:	f3bf 8f6f 	isb	sy
        CPSIE   I
 800017e:	b662      	cpsie	i
        BX      LR
 8000180:	4770      	bx	lr

08000182 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000182:	bf30      	wfi
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000186:	bf20      	wfe
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018a:	fab0 f080 	clz	r0, r0
        BX      LR
 800018e:	4770      	bx	lr

08000190 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000190:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000194:	fab0 f080 	clz	r0, r0
        BX      LR
 8000198:	4770      	bx	lr

0800019a <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019a:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800019e:	4770      	bx	lr

080001a0 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a0:	b672      	cpsid	i
    PUSH   {R1}
 80001a2:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a4:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001a8:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001ac:	f3bf 8f4f 	dsb	sy
    ISB
 80001b0:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b4:	4608      	mov	r0, r1
    POP    {R1}
 80001b6:	bc02      	pop	{r1}
    CPSIE   I
 80001b8:	b662      	cpsie	i
    BX      LR
 80001ba:	4770      	bx	lr

080001bc <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001bc:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001be:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c2:	f3bf 8f4f 	dsb	sy
    ISB
 80001c6:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ca:	b662      	cpsie	i
    BX      LR
 80001cc:	4770      	bx	lr

080001ce <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001ce:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d0:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d4:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001d8:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001dc:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e0:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e2:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e4:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001e8:	f641 2070 	movw	r0, #6768	@ 0x1a70
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 80001f0:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f2:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001f6:	f006 fb4f 	bl	8006898 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fa:	4832      	ldr	r0, [pc, #200]	@ (80002c4 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 80001fc:	2101      	movs	r1, #1
    STRB    R1, [R0]
 80001fe:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000200:	f641 50da 	movw	r0, #7642	@ 0x1dda
    MOVT    R0, #:upper16:OSPrioCur
 8000204:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000208:	f641 51db 	movw	r1, #7643	@ 0x1ddb
    MOVT    R1, #:upper16:OSPrioHighRdy
 800020c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000210:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000212:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000214:	f641 70f0 	movw	r0, #8176	@ 0x1ff0
    MOVT    R0, #:upper16:OSTCBCur
 8000218:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800021c:	f641 71f8 	movw	r1, #8184	@ 0x1ff8
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000220:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000224:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000226:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000228:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022a:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800022e:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000232:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000236:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023a:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800023e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000242:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000244:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000248:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024a:	b662      	cpsie	i
    BX       R1
 800024c:	4708      	bx	r1

0800024e <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800024e:	481e      	ldr	r0, [pc, #120]	@ (80002c8 <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000250:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 8000254:	6001      	str	r1, [r0, #0]
    BX      LR
 8000256:	4770      	bx	lr

08000258 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 8000258:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025a:	f641 2278 	movw	r2, #6776	@ 0x1a78
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 800025e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 8000262:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000264:	f381 8811 	msr	BASEPRI, r1
    DSB
 8000268:	f3bf 8f4f 	dsb	sy
    ISB
 800026c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000270:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000272:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 8000276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027a:	f641 75f0 	movw	r5, #8176	@ 0x1ff0
    MOVT    R5, #:upper16:OSTCBCur
 800027e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 8000282:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000284:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 8000286:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000288:	f006 fb06 	bl	8006898 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800028c:	f641 50da 	movw	r0, #7642	@ 0x1dda
    MOVT    R0, #:upper16:OSPrioCur
 8000290:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000294:	f641 51db 	movw	r1, #7643	@ 0x1ddb
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000298:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800029c:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800029e:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a0:	f641 71f8 	movw	r1, #8184	@ 0x1ff8
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002a8:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002aa:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002ac:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b0:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002b6:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002ba:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002be:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c2:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c4:	20001de8 	.word	0x20001de8
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002c8:	e000ed04 	.word	0xe000ed04

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr

080002dc <DIGet>:
*               > 0   if edges have been detected
*********************************************************************************************************
*/
//PINES DE ENTRADA
uint16_t  DIGet (uint16_t n)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
    uint16_t  val;

    if (n < DIO_MAX_DI) {
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d80b      	bhi.n	8000304 <DIGet+0x28>
        OS_ENTER_CRITICAL();
 80002ec:	f7ff ff2e 	bl	800014c <CPU_IntDis>
        val = DITbl[n].DIVal;                              /* Get state of DI channel                  */
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <DIGet+0x34>)
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	4413      	add	r3, r2
 80002f8:	885b      	ldrh	r3, [r3, #2]
 80002fa:	81fb      	strh	r3, [r7, #14]
        OS_EXIT_CRITICAL();
 80002fc:	f7ff ff28 	bl	8000150 <CPU_IntEn>
        return (val);
 8000300:	89fb      	ldrh	r3, [r7, #14]
 8000302:	e000      	b.n	8000306 <DIGet+0x2a>
    } else {
        return (0);                                        /* Return negated for invalid channel       */
 8000304:	2300      	movs	r3, #0
    }
}
 8000306:	4618      	mov	r0, r3
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200002c4 	.word	0x200002c4

08000314 <DIUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIUpdate (void)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
    uint16_t    i;
    DIO_DI  *pdi;

    pdi = &DITbl[0];
 800031a:	4b3f      	ldr	r3, [pc, #252]	@ (8000418 <DIUpdate+0x104>)
 800031c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 800031e:	2300      	movs	r3, #0
 8000320:	80fb      	strh	r3, [r7, #6]
 8000322:	e070      	b.n	8000406 <DIUpdate+0xf2>
        if (pdi->DIBypassEn == FALSE) {          /* See if discrete input channel is bypassed          */
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d063      	beq.n	80003fa <DIUpdate+0xe6>
            switch (pdi->DIModeSel) {            /* No, process channel                                */
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	88db      	ldrh	r3, [r3, #6]
 8000336:	2b08      	cmp	r3, #8
 8000338:	d85f      	bhi.n	80003fa <DIUpdate+0xe6>
 800033a:	a201      	add	r2, pc, #4	@ (adr r2, 8000340 <DIUpdate+0x2c>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000365 	.word	0x08000365
 8000344:	0800036d 	.word	0x0800036d
 8000348:	08000375 	.word	0x08000375
 800034c:	08000381 	.word	0x08000381
 8000350:	080003fb 	.word	0x080003fb
 8000354:	080003fb 	.word	0x080003fb
 8000358:	080003fb 	.word	0x080003fb
 800035c:	08000393 	.word	0x08000393
 8000360:	080003c7 	.word	0x080003c7
                case DI_MODE_LOW:                /* Input is forced low                                */
                     pdi->DIVal = 0;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2200      	movs	r2, #0
 8000368:	805a      	strh	r2, [r3, #2]
                     break;
 800036a:	e046      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_HIGH:               /* Input is forced high                               */
                     pdi->DIVal = 1;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	2201      	movs	r2, #1
 8000370:	805a      	strh	r2, [r3, #2]
                     break;
 8000372:	e042      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_DIRECT:                  /* Input is based on state of physical input     */
                     pdi->DIVal = (uint16_t)pdi->DIIn;   /* Obtain the state of the sensor                */
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	805a      	strh	r2, [r3, #2]
                     break;
 800037e:	e03c      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_INV:                /* Input is based on the complement state of input    */
                     pdi->DIVal = (uint16_t)(pdi->DIIn ? 0 : 1);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	f083 0301 	eor.w	r3, r3, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	805a      	strh	r2, [r3, #2]
                     break;
 8000390:	e033      	b.n	80003fa <DIUpdate+0xe6>
                     DIIsTrig(pdi);              /* Handle edge triggered mode                         */
                     break;
#endif
/*$PAGE*/
                case DI_MODE_TOGGLE_LOW_GOING:
                     if (pdi->DIPrev == 1 && pdi->DIIn == 0) {
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d010      	beq.n	80003bc <DIUpdate+0xa8>
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f083 0301 	eor.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d009      	beq.n	80003bc <DIUpdate+0xa8>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	885b      	ldrh	r3, [r3, #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	711a      	strb	r2, [r3, #4]
                     break;
 80003c4:	e019      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_TOGGLE_HIGH_GOING:
                     if (pdi->DIPrev == 0 && pdi->DIIn == 1) {
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	f083 0301 	eor.w	r3, r3, #1
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00d      	beq.n	80003f0 <DIUpdate+0xdc>
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <DIUpdate+0xdc>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	885b      	ldrh	r3, [r3, #2]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	bf0c      	ite	eq
 80003e4:	2301      	moveq	r3, #1
 80003e6:	2300      	movne	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	711a      	strb	r2, [r3, #4]
                     break;
 80003f8:	bf00      	nop
            }
        }
        pdi++;                                   /* Point to next DIO_DO element                       */
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	3308      	adds	r3, #8
 80003fe:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	3301      	adds	r3, #1
 8000404:	80fb      	strh	r3, [r7, #6]
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d98b      	bls.n	8000324 <DIUpdate+0x10>
    }
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	200002c4 	.word	0x200002c4

0800041c <DIOInit>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIOInit (void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
	uint16_t   err;
	uint16_t   i;
    DIO_DI  *pdi;
    DIO_DO  *pdo;

    pdi = &DITbl[0];
 8000422:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <DIOInit+0xa0>)
 8000424:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	81fb      	strh	r3, [r7, #14]
 800042a:	e00e      	b.n	800044a <DIOInit+0x2e>
        pdi->DIVal         = 0;
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2200      	movs	r2, #0
 8000430:	805a      	strh	r2, [r3, #2]
        pdi->DIBypassEn    = FALSE;
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	2200      	movs	r2, #0
 8000436:	715a      	strb	r2, [r3, #5]
        pdi->DIModeSel     = DI_MODE_DIRECT;     /* Set the default mode to direct input               */
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2202      	movs	r2, #2
 800043c:	80da      	strh	r2, [r3, #6]
#if DI_EDGE_EN
        pdi->DITrigFnct    = (void *)0;          /* No function to execute when transition detected    */
        pdi->DITrigFnctArg = (void *)0;
#endif
        pdi++;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3308      	adds	r3, #8
 8000442:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000444:	89fb      	ldrh	r3, [r7, #14]
 8000446:	3301      	adds	r3, #1
 8000448:	81fb      	strh	r3, [r7, #14]
 800044a:	89fb      	ldrh	r3, [r7, #14]
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d9ed      	bls.n	800042c <DIOInit+0x10>
    }
    pdo = &DOTbl[0];
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <DIOInit+0xa4>)
 8000452:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000454:	2300      	movs	r3, #0
 8000456:	81fb      	strh	r3, [r7, #14]
 8000458:	e01d      	b.n	8000496 <DIOInit+0x7a>
        pdo->DOOut        = 0;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
        pdo->DOBypassEn   = FALSE;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	70da      	strb	r2, [r3, #3]
        pdo->DOModeSel    = DO_MODE_DIRECT;      /* Set the default mode to direct output              */
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2202      	movs	r2, #2
 800046a:	809a      	strh	r2, [r3, #4]
        pdo->DOInv        = FALSE;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	721a      	strb	r2, [r3, #8]
#if DO_BLINK_MODE_EN
        pdo->DOBlinkEnSel = DO_BLINK_EN_NORMAL;  /* Blinking is enabled by direct user request         */
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = 1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2202      	movs	r2, #2
 8000482:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 2;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2202      	movs	r2, #2
 8000488:	81da      	strh	r2, [r3, #14]
#endif
        pdo++;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3310      	adds	r3, #16
 800048e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	3301      	adds	r3, #1
 8000494:	81fb      	strh	r3, [r7, #14]
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	2b0f      	cmp	r3, #15
 800049a:	d9de      	bls.n	800045a <DIOInit+0x3e>
    }
#if DO_BLINK_MODE_EN
    DOSyncCtrMax = 100;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <DIOInit+0xa8>)
 800049e:	2264      	movs	r2, #100	@ 0x64
 80004a0:	701a      	strb	r2, [r3, #0]
#endif
    DIOInitIO();
 80004a2:	f000 f945 	bl	8000730 <DIOInitIO>
    OSTaskCreate(DIOTask, (void *)0, &DIOTaskStk[DIO_TASK_STK_SIZE], DIO_TASK_PRIO);
 80004a6:	2328      	movs	r3, #40	@ 0x28
 80004a8:	4a07      	ldr	r2, [pc, #28]	@ (80004c8 <DIOInit+0xac>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4807      	ldr	r0, [pc, #28]	@ (80004cc <DIOInit+0xb0>)
 80004ae:	f007 fb33 	bl	8007b18 <OSTaskCreate>
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200002c4 	.word	0x200002c4
 80004c0:	20000344 	.word	0x20000344
 80004c4:	20000445 	.word	0x20000445
 80004c8:	20000c48 	.word	0x20000c48
 80004cc:	080004d1 	.word	0x080004d1

080004d0 <DIOTask>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIOTask (void *data)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    data = data;                                      /* Avoid compiler warning (uC/OS requirement)    */
    for (;;) {
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 80004d8:	2001      	movs	r0, #1
 80004da:	f007 feab 	bl	8008234 <OSTimeDly>

        DIRd();                                       /* Read physical inputs and map to DI channels   */
 80004de:	f000 f92d 	bl	800073c <DIRd>
        DIUpdate();                                   /* Update all DI channels                        */
 80004e2:	f7ff ff17 	bl	8000314 <DIUpdate>
        DOUpdate();                                   /* Update all DO channels                        */
 80004e6:	f000 f895 	bl	8000614 <DOUpdate>
        DOWr();                                       /* Map DO channels to physical outputs           */
 80004ea:	f000 f98b 	bl	8000804 <DOWr>
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 80004ee:	bf00      	nop
 80004f0:	e7f2      	b.n	80004d8 <DIOTask+0x8>
	...

080004f4 <DOCfgBlink>:
*********************************************************************************************************
*/

#if  DO_BLINK_MODE_EN
void  DOCfgBlink (uint16_t n, uint16_t mode, uint16_t a, uint16_t b)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4604      	mov	r4, r0
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4623      	mov	r3, r4
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	4603      	mov	r3, r0
 8000508:	80bb      	strh	r3, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	807b      	strh	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	803b      	strh	r3, [r7, #0]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d814      	bhi.n	8000542 <DOCfgBlink+0x4e>
        pdo               = &DOTbl[n];
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <DOCfgBlink+0x58>)
 800051e:	4413      	add	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000522:	f7ff fe13 	bl	800014c <CPU_IntDis>
        pdo->DOBlinkEnSel = mode;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	88ba      	ldrh	r2, [r7, #4]
 800052a:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = a;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = b;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	883a      	ldrh	r2, [r7, #0]
 8000536:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 0;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2200      	movs	r2, #0
 800053c:	81da      	strh	r2, [r3, #14]
        OS_EXIT_CRITICAL();
 800053e:	f7ff fe07 	bl	8000150 <CPU_IntEn>
    }
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	bf00      	nop
 800054c:	20000344 	.word	0x20000344

08000550 <DOCfgMode>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOCfgMode (uint16_t n, uint16_t mode, bool inv)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
 800055a:	460b      	mov	r3, r1
 800055c:	80bb      	strh	r3, [r7, #4]
 800055e:	4613      	mov	r3, r2
 8000560:	70fb      	strb	r3, [r7, #3]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80e      	bhi.n	8000586 <DOCfgMode+0x36>
        pdo            = &DOTbl[n];
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <DOCfgMode+0x40>)
 800056e:	4413      	add	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000572:	f7ff fdeb 	bl	800014c <CPU_IntDis>
        pdo->DOModeSel = mode;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	88ba      	ldrh	r2, [r7, #4]
 800057a:	809a      	strh	r2, [r3, #4]
        pdo->DOInv     = inv;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	78fa      	ldrb	r2, [r7, #3]
 8000580:	721a      	strb	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8000582:	f7ff fde5 	bl	8000150 <CPU_IntEn>
    }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000344 	.word	0x20000344

08000594 <DOIsBlinkEn>:
*********************************************************************************************************
*/

#if DO_BLINK_MODE_EN
static  bool  DOIsBlinkEn (DIO_DO *pdo)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    bool  en;

    en = FALSE;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
    switch (pdo->DOBlinkEnSel) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	88db      	ldrh	r3, [r3, #6]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d00d      	beq.n	80005c4 <DOIsBlinkEn+0x30>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	dc11      	bgt.n	80005d0 <DOIsBlinkEn+0x3c>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <DOIsBlinkEn+0x22>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d003      	beq.n	80005bc <DOIsBlinkEn+0x28>
 80005b4:	e00c      	b.n	80005d0 <DOIsBlinkEn+0x3c>
        case DO_BLINK_EN:                   /* Blink is always enabled                                 */
             en = TRUE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
             break;
 80005ba:	e009      	b.n	80005d0 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_NORMAL:            /* Blink depends on user request's state                   */
             en = pdo->DOBypass;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	73fb      	strb	r3, [r7, #15]
             break;
 80005c2:	e005      	b.n	80005d0 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_INV:               /* Blink depends on the complemented user request's state  */
             en = pdo->DOBypass ? FALSE : TRUE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
             break;
 80005ce:	bf00      	nop
    }
    return (en);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <DOSet>:
*********************************************************************************************************
*/

//void  DOSet (char a,uint16_t n, bool state)
void  DOSet (uint16_t n, bool state)
{//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	80fb      	strh	r3, [r7, #6]
 80005e8:	4613      	mov	r3, r2
 80005ea:	717b      	strb	r3, [r7, #5]
if (n < DIO_MAX_DO) {
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d80a      	bhi.n	8000608 <DOSet+0x2c>
	  OS_ENTER_CRITICAL();
 80005f2:	f7ff fdab 	bl	800014c <CPU_IntDis>
	  DOTbl[n].DOCtrl = state;// Actualiza la tabla de control
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <DOSet+0x34>)
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4413      	add	r3, r2
 80005fe:	3301      	adds	r3, #1
 8000600:	797a      	ldrb	r2, [r7, #5]
 8000602:	701a      	strb	r2, [r3, #0]
	  OS_EXIT_CRITICAL();
 8000604:	f7ff fda4 	bl	8000150 <CPU_IntEn>
	}
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000344 	.word	0x20000344

08000614 <DOUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DOUpdate (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    uint16_t     i;
    bool  out;
    DIO_DO   *pdo;

    pdo = &DOTbl[0];
 800061a:	4b42      	ldr	r3, [pc, #264]	@ (8000724 <DOUpdate+0x110>)
 800061c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 800061e:	2300      	movs	r3, #0
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	e067      	b.n	80006f4 <DOUpdate+0xe0>
        if (pdo->DOBypassEn == FALSE) {          /* See if DO channel is enabled                       */
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <DOUpdate+0x26>
            pdo->DOBypass = pdo->DOCtrl;         /* Obtain control state from application              */
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	785a      	ldrb	r2, [r3, #1]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	709a      	strb	r2, [r3, #2]
        }
        out = FALSE;                             /* Assume that the output will be low unless changed  */
 800063a:	2300      	movs	r3, #0
 800063c:	717b      	strb	r3, [r7, #5]
        switch (pdo->DOModeSel) {
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d842      	bhi.n	80006cc <DOUpdate+0xb8>
 8000646:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <DOUpdate+0x38>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	080006cd 	.word	0x080006cd
 8000650:	08000661 	.word	0x08000661
 8000654:	08000667 	.word	0x08000667
 8000658:	0800066f 	.word	0x0800066f
 800065c:	0800068d 	.word	0x0800068d
            case DO_MODE_LOW:                    /* Output will in fact be low                         */
                 break;

            case DO_MODE_HIGH:                   /* Output will be high                                */
                 out = TRUE;
 8000660:	2301      	movs	r3, #1
 8000662:	717b      	strb	r3, [r7, #5]
                 break;
 8000664:	e032      	b.n	80006cc <DOUpdate+0xb8>

            case DO_MODE_DIRECT:                 /* Output is based on state of user supplied state    */
                 out = pdo->DOBypass;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	717b      	strb	r3, [r7, #5]
                 break;
 800066c:	e02e      	b.n	80006cc <DOUpdate+0xb8>
/*$PAGE*/
#if DO_BLINK_MODE_EN
            case DO_MODE_BLINK_SYNC:                       /* Sync. Blink mode                         */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	f7ff ff90 	bl	8000594 <DOIsBlinkEn>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d027      	beq.n	80006ca <DOUpdate+0xb6>
                     if (pdo->DOA >= DOSyncCtr) {          /* ... yes, High when below threshold       */
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	895b      	ldrh	r3, [r3, #10]
 800067e:	4a2a      	ldr	r2, [pc, #168]	@ (8000728 <DOUpdate+0x114>)
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	4293      	cmp	r3, r2
 8000684:	d321      	bcc.n	80006ca <DOUpdate+0xb6>
                         out = TRUE;
 8000686:	2301      	movs	r3, #1
 8000688:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 break;
 800068a:	e01e      	b.n	80006ca <DOUpdate+0xb6>

            case DO_MODE_BLINK_ASYNC:                      /* Async. Blink mode                        */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff ff81 	bl	8000594 <DOIsBlinkEn>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <DOUpdate+0x94>
                     if (pdo->DOA >= pdo->DOBCtr) {        /* ... yes, High when below threshold       */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	895a      	ldrh	r2, [r3, #10]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	89db      	ldrh	r3, [r3, #14]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d301      	bcc.n	80006a8 <DOUpdate+0x94>
                         out = TRUE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 if (pdo->DOBCtr < pdo->DOB) {             /* Update the threshold counter             */
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	89da      	ldrh	r2, [r3, #14]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	899b      	ldrh	r3, [r3, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d206      	bcs.n	80006c2 <DOUpdate+0xae>
                     pdo->DOBCtr++;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	89db      	ldrh	r3, [r3, #14]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	81da      	strh	r2, [r3, #14]
                 } else {
                     pdo->DOBCtr = 0;
                 }
                 break;
 80006c0:	e004      	b.n	80006cc <DOUpdate+0xb8>
                     pdo->DOBCtr = 0;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	81da      	strh	r2, [r3, #14]
                 break;
 80006c8:	e000      	b.n	80006cc <DOUpdate+0xb8>
                 break;
 80006ca:	bf00      	nop
#endif
        }
        if (pdo->DOInv == TRUE) {                          /* See if output needs to be inverted ...   */
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <DOUpdate+0xce>
            pdo->DOOut = out ? FALSE : TRUE;               /* ... yes, complement output               */
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	f083 0301 	eor.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e002      	b.n	80006e8 <DOUpdate+0xd4>
        } else {
            pdo->DOOut = out;                              /* ... no,  no inversion!                   */
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	797a      	ldrb	r2, [r7, #5]
 80006e6:	701a      	strb	r2, [r3, #0]
        }
        pdo++;                                             /* Point to next DIO_DO element             */
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3310      	adds	r3, #16
 80006ec:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	3301      	adds	r3, #1
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d994      	bls.n	8000624 <DOUpdate+0x10>
    }
#if DO_BLINK_MODE_EN
    if (DOSyncCtr < DOSyncCtrMax) {                        /* Update the synchronous free running ctr  */
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <DOUpdate+0x114>)
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <DOUpdate+0x118>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d206      	bcs.n	8000714 <DOUpdate+0x100>
        DOSyncCtr++;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <DOUpdate+0x114>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <DOUpdate+0x114>)
 8000710:	701a      	strb	r2, [r3, #0]
    } else {
        DOSyncCtr = 0;
    }
#endif
}
 8000712:	e002      	b.n	800071a <DOUpdate+0x106>
        DOSyncCtr = 0;
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <DOUpdate+0x114>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000344 	.word	0x20000344
 8000728:	20000444 	.word	0x20000444
 800072c:	20000445 	.word	0x20000445

08000730 <DIOInitIO>:
*                   Port C = OUT  (not used)
*********************************************************************************************************
*/

void  DIOInitIO (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0


}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <DIRd>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIRd (void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
    uint16_t    i;
    uint16_t    in;
    uint16_t    msk;


    pdi = &DITbl[0];                                    /* Point at beginning of discrete inputs    */
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <DIRd+0x54>)
 8000744:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                                       /* Set mask to extract bit 0                */
 8000746:	2301      	movs	r3, #1
 8000748:	813b      	strh	r3, [r7, #8]
    in  = inp();                                     	/* Read the physical port (8 bits)          */
 800074a:	f000 f823 	bl	8000794 <inp>
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 8000752:	2300      	movs	r3, #0
 8000754:	817b      	strh	r3, [r7, #10]
 8000756:	e013      	b.n	8000780 <DIRd+0x44>
        pdi->DIIn   = (bool)(in & msk) ? 1 : 0;
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	893b      	ldrh	r3, [r7, #8]
 800075c:	4013      	ands	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2da      	uxtb	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	701a      	strb	r2, [r3, #0]
        msk       	<<= 1;
 800076e:	893b      	ldrh	r3, [r7, #8]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	813b      	strh	r3, [r7, #8]
        pdi++;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3308      	adds	r3, #8
 8000778:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 800077a:	897b      	ldrh	r3, [r7, #10]
 800077c:	3301      	adds	r3, #1
 800077e:	817b      	strh	r3, [r7, #10]
 8000780:	897b      	ldrh	r3, [r7, #10]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d9e8      	bls.n	8000758 <DIRd+0x1c>
    }
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200002c4 	.word	0x200002c4

08000794 <inp>:
static uint16_t inp(){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
	uint16_t estado = 0; // Lee el estado de los 8 pines
 800079a:	2300      	movs	r3, #0
 800079c:	80fb      	strh	r3, [r7, #6]

	estado = (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)<<4)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)<<3)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)<<2)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)<<1)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0));
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	4817      	ldr	r0, [pc, #92]	@ (8000800 <inp+0x6c>)
 80007a2:	f000 ff85 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b21c      	sxth	r4, r3
 80007ac:	2140      	movs	r1, #64	@ 0x40
 80007ae:	4814      	ldr	r0, [pc, #80]	@ (8000800 <inp+0x6c>)
 80007b0:	f000 ff7e 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4323      	orrs	r3, r4
 80007bc:	b21c      	sxth	r4, r3
 80007be:	2110      	movs	r1, #16
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <inp+0x6c>)
 80007c2:	f000 ff75 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4323      	orrs	r3, r4
 80007ce:	b21c      	sxth	r4, r3
 80007d0:	2102      	movs	r1, #2
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <inp+0x6c>)
 80007d4:	f000 ff6c 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4323      	orrs	r3, r4
 80007e0:	b21c      	sxth	r4, r3
 80007e2:	2101      	movs	r1, #1
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <inp+0x6c>)
 80007e6:	f000 ff63 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4323      	orrs	r3, r4
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	80fb      	strh	r3, [r7, #6]

	return estado;
 80007f4:	88fb      	ldrh	r3, [r7, #6]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010c00 	.word	0x40010c00

08000804 <DOWr>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOWr (void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
    DIO_DO  *pdo;
    uint16_t    i;
    uint16_t    out;
    uint16_t    msk;

    pdo = &DOTbl[0];						/* Point at first discrete output channel                  */
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <DOWr+0x54>)
 800080c:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                           /* First DO will be mapped to bit 0                        */
 800080e:	2301      	movs	r3, #1
 8000810:	80fb      	strh	r3, [r7, #6]
    out = 0x0000;                           /* Local 8 bit port image                                  */
 8000812:	2300      	movs	r3, #0
 8000814:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8000816:	2300      	movs	r3, #0
 8000818:	817b      	strh	r3, [r7, #10]
 800081a:	e010      	b.n	800083e <DOWr+0x3a>
        if (pdo->DOOut == TRUE) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <DOWr+0x28>
            out |= msk;
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4313      	orrs	r3, r2
 800082a:	813b      	strh	r3, [r7, #8]
        }
        msk <<= 1;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	80fb      	strh	r3, [r7, #6]
        pdo++;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3310      	adds	r3, #16
 8000836:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	3301      	adds	r3, #1
 800083c:	817b      	strh	r3, [r7, #10]
 800083e:	897b      	ldrh	r3, [r7, #10]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d9eb      	bls.n	800081c <DOWr+0x18>
    }
    outp(GPIOA, out);                      /* Output port image to physical port                      */
 8000844:	893b      	ldrh	r3, [r7, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <DOWr+0x58>)
 800084a:	f000 f809 	bl	8000860 <outp>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000344 	.word	0x20000344
 800085c:	40010800 	.word	0x40010800

08000860 <outp>:
#endif

static void outp(GPIO_TypeDef *GPIOx, uint16_t estado){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = estado;
 800086c:	887a      	ldrh	r2, [r7, #2]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fc9b 	bl	80011bc <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 8000886:	f7ff fc61 	bl	800014c <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 800088a:	2310      	movs	r3, #16
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	e009      	b.n	80008a4 <main+0x28>
  {
	  /* Set all external intr. to KA interrupt priority boundary */
	  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f005 fcdf 	bl	800625c <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	3301      	adds	r3, #1
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d9f2      	bls.n	8000890 <main+0x14>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f8a3 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f8fb 	bl	8000aa8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008b2:	f009 faad 	bl	8009e10 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  OSInit();
 80008b6:	f006 f8a3 	bl	8006a00 <OSInit>

	OSTaskCreateExt( StartupTask,
 80008ba:	2303      	movs	r3, #3
 80008bc:	9304      	str	r3, [sp, #16]
 80008be:	2300      	movs	r3, #0
 80008c0:	9303      	str	r3, [sp, #12]
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	4b37      	ldr	r3, [pc, #220]	@ (80009a4 <main+0x128>)
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	4a35      	ldr	r2, [pc, #212]	@ (80009a8 <main+0x12c>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4835      	ldr	r0, [pc, #212]	@ (80009ac <main+0x130>)
 80008d6:	f007 f97b 	bl	8007bd0 <OSTaskCreateExt>
					 &StartupTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80008da:	1d7b      	adds	r3, r7, #5
 80008dc:	461a      	mov	r2, r3
 80008de:	4934      	ldr	r1, [pc, #208]	@ (80009b0 <main+0x134>)
 80008e0:	2003      	movs	r0, #3
 80008e2:	f007 fac9 	bl	8007e78 <OSTaskNameSet>
		(INT8U *)"Startup task",
		&os_err);
	#endif

	OSTaskCreateExt( SenoTsk,
 80008e6:	2303      	movs	r3, #3
 80008e8:	9304      	str	r3, [sp, #16]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9303      	str	r3, [sp, #12]
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <main+0x138>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	4a2e      	ldr	r2, [pc, #184]	@ (80009b8 <main+0x13c>)
 80008fe:	2100      	movs	r1, #0
 8000900:	482e      	ldr	r0, [pc, #184]	@ (80009bc <main+0x140>)
 8000902:	f007 f965 	bl	8007bd0 <OSTaskCreateExt>
					 &SenoTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8000906:	1d7b      	adds	r3, r7, #5
 8000908:	461a      	mov	r2, r3
 800090a:	492d      	ldr	r1, [pc, #180]	@ (80009c0 <main+0x144>)
 800090c:	2003      	movs	r0, #3
 800090e:	f007 fab3 	bl	8007e78 <OSTaskNameSet>
		(INT8U *)"Seno Task",
		&os_err);
	#endif


	OSTaskCreateExt( PrimerSecuencia,
 8000912:	2303      	movs	r3, #3
 8000914:	9304      	str	r3, [sp, #16]
 8000916:	2300      	movs	r3, #0
 8000918:	9303      	str	r3, [sp, #12]
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <main+0x148>)
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2303      	movs	r3, #3
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2303      	movs	r3, #3
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <main+0x14c>)
 800092a:	2100      	movs	r1, #0
 800092c:	4827      	ldr	r0, [pc, #156]	@ (80009cc <main+0x150>)
 800092e:	f007 f94f 	bl	8007bd0 <OSTaskCreateExt>
					 &PrimerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8000932:	1d7b      	adds	r3, r7, #5
 8000934:	461a      	mov	r2, r3
 8000936:	4926      	ldr	r1, [pc, #152]	@ (80009d0 <main+0x154>)
 8000938:	2003      	movs	r0, #3
 800093a:	f007 fa9d 	bl	8007e78 <OSTaskNameSet>
		(INT8U *)"Primer Secuencia",
		&os_err);
	#endif


	OSTaskCreateExt( SegundaSecuencia,
 800093e:	2303      	movs	r3, #3
 8000940:	9304      	str	r3, [sp, #16]
 8000942:	2300      	movs	r3, #0
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <main+0x158>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	2304      	movs	r3, #4
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2304      	movs	r3, #4
 8000954:	4a20      	ldr	r2, [pc, #128]	@ (80009d8 <main+0x15c>)
 8000956:	2100      	movs	r1, #0
 8000958:	4820      	ldr	r0, [pc, #128]	@ (80009dc <main+0x160>)
 800095a:	f007 f939 	bl	8007bd0 <OSTaskCreateExt>
					 &SegundaSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		 OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800095e:	1d7b      	adds	r3, r7, #5
 8000960:	461a      	mov	r2, r3
 8000962:	491f      	ldr	r1, [pc, #124]	@ (80009e0 <main+0x164>)
 8000964:	2003      	movs	r0, #3
 8000966:	f007 fa87 	bl	8007e78 <OSTaskNameSet>
		 (INT8U *)"Segunda Secuencia",
		 &os_err);
	#endif


	OSTaskCreateExt( TercerSecuencia,
 800096a:	2303      	movs	r3, #3
 800096c:	9304      	str	r3, [sp, #16]
 800096e:	2300      	movs	r3, #0
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <main+0x168>)
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2305      	movs	r3, #5
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2305      	movs	r3, #5
 8000980:	4a19      	ldr	r2, [pc, #100]	@ (80009e8 <main+0x16c>)
 8000982:	2100      	movs	r1, #0
 8000984:	4819      	ldr	r0, [pc, #100]	@ (80009ec <main+0x170>)
 8000986:	f007 f923 	bl	8007bd0 <OSTaskCreateExt>
					 &TercerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		  OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800098a:	1d7b      	adds	r3, r7, #5
 800098c:	461a      	mov	r2, r3
 800098e:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <main+0x174>)
 8000990:	2003      	movs	r0, #3
 8000992:	f007 fa71 	bl	8007e78 <OSTaskNameSet>
		  (INT8U *)"Tercer Secuencia",
		  &os_err);
	#endif


  DIOInit();
 8000996:	f7ff fd41 	bl	800041c <DIOInit>
  OSStart();
 800099a:	f006 f911 	bl	8006bc0 <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0x122>
 80009a2:	bf00      	nop
 80009a4:	20000c48 	.word	0x20000c48
 80009a8:	20000e44 	.word	0x20000e44
 80009ac:	08000bc9 	.word	0x08000bc9
 80009b0:	0800b0c0 	.word	0x0800b0c0
 80009b4:	20000e48 	.word	0x20000e48
 80009b8:	20001044 	.word	0x20001044
 80009bc:	08000c4d 	.word	0x08000c4d
 80009c0:	0800b0d0 	.word	0x0800b0d0
 80009c4:	20001048 	.word	0x20001048
 80009c8:	20001244 	.word	0x20001244
 80009cc:	08000d65 	.word	0x08000d65
 80009d0:	0800b0dc 	.word	0x0800b0dc
 80009d4:	20001248 	.word	0x20001248
 80009d8:	20001444 	.word	0x20001444
 80009dc:	08000dc1 	.word	0x08000dc1
 80009e0:	0800b0f0 	.word	0x0800b0f0
 80009e4:	20001448 	.word	0x20001448
 80009e8:	20001644 	.word	0x20001644
 80009ec:	08000e2f 	.word	0x08000e2f
 80009f0:	0800b104 	.word	0x0800b104

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fe:	2228      	movs	r2, #40	@ 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 fec0 	bl	800a788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a32:	2301      	movs	r3, #1
 8000a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a40:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fbcc 	bl	80031e8 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a56:	f000 fac6 	bl	8000fe6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fe38 	bl	80036ec <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a82:	f000 fab0 	bl	8000fe6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a86:	2310      	movs	r3, #16
 8000a88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 ff91 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a9c:	f000 faa3 	bl	8000fe6 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	@ 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a32      	ldr	r2, [pc, #200]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a26      	ldr	r2, [pc, #152]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_GPIO_Init+0xe4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b22:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000b24:	f000 fddb 	bl	80016de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	21ff      	movs	r1, #255	@ 0xff
 8000b2c:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_GPIO_Init+0xec>)
 8000b2e:	f000 fdd6 	bl	80016de <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000b4c:	f000 fc2c 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b50:	23ff      	movs	r3, #255	@ 0xff
 8000b52:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <MX_GPIO_Init+0xec>)
 8000b68:	f000 fc1e 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000b6c:	23d3      	movs	r3, #211	@ 0xd3
 8000b6e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <MX_GPIO_Init+0xf0>)
 8000b80:	f000 fc12 	bl	80013a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 8000bb6:	f007 fb8d 	bl	80082d4 <OSTimeGet>
 8000bba:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <StartupTask>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

static void StartupTask (void *p_arg){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000bd0:	f002 feca 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000bd4:	60f8      	str	r0, [r7, #12]

	/* Initialize and enable System Tick timer */
	OS_CPU_SysTickInitFreq(cpu_clk);
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f005 fe96 	bl	8006908 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();                                               /* Determine CPU capacity.                              */
 8000bdc:	f006 f818 	bl	8006c10 <OSStatInit>
	#endif

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be6:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <StartupTask+0x80>)
 8000be8:	f000 fd79 	bl	80016de <HAL_GPIO_WritePin>

	while (DEF_TRUE){
		switch (GetButton()) {
 8000bec:	f000 f977 	bl	8000ede <GetButton>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d820      	bhi.n	8000c38 <StartupTask+0x70>
 8000bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bfc <StartupTask+0x34>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c11 	.word	0x08000c11
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c21 	.word	0x08000c21
 8000c08:	08000c29 	.word	0x08000c29
 8000c0c:	08000c31 	.word	0x08000c31
			case BOTON1:
				SuspendAllTasksExceptOne(SEC1);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f9c8 	bl	8000fa6 <SuspendAllTasksExceptOne>
				break;
 8000c16:	e012      	b.n	8000c3e <StartupTask+0x76>
			case BOTON2:
				SuspendAllTasksExceptOne(SEC2);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f000 f9c4 	bl	8000fa6 <SuspendAllTasksExceptOne>
				break;
 8000c1e:	e00e      	b.n	8000c3e <StartupTask+0x76>
			case BOTON3:
				SuspendAllTasksExceptOne(SEC3);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f000 f9c0 	bl	8000fa6 <SuspendAllTasksExceptOne>
				break;
 8000c26:	e00a      	b.n	8000c3e <StartupTask+0x76>
			case BOTON4:
				SuspendAllTasksExceptOne(SENO);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 f9bc 	bl	8000fa6 <SuspendAllTasksExceptOne>
				break;
 8000c2e:	e006      	b.n	8000c3e <StartupTask+0x76>
			case BOTON5:
				SuspendAllTasksExceptOne(SENO);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 f9b8 	bl	8000fa6 <SuspendAllTasksExceptOne>
				break;
 8000c36:	e002      	b.n	8000c3e <StartupTask+0x76>
			default:
				SuspendAllTasks();
 8000c38:	f000 f99f 	bl	8000f7a <SuspendAllTasks>
				break;
 8000c3c:	bf00      	nop
		}
		OSTimeDly(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f007 faf8 	bl	8008234 <OSTimeDly>
		switch (GetButton()) {
 8000c44:	e7d2      	b.n	8000bec <StartupTask+0x24>
 8000c46:	bf00      	nop
 8000c48:	40011000 	.word	0x40011000

08000c4c <SenoTsk>:
	}
}


static void SenoTsk (void *p_arg){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000c54:	f002 fe88 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000c58:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f005 fe54 	bl	8006908 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000c60:	f005 ffd6 	bl	8006c10 <OSStatInit>
	#endif

	PinReset();
 8000c64:	f000 f972 	bl	8000f4c <PinReset>

    DOCfgMode(LED1, DO_MODE_LOW, false);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fc6f 	bl	8000550 <DOCfgMode>
    DOCfgMode(LED2, DO_MODE_LOW, false);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fc6a 	bl	8000550 <DOCfgMode>
    DOCfgMode(LED3, DO_MODE_LOW, false);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fc65 	bl	8000550 <DOCfgMode>

	while (DEF_TRUE){
		UsbPrintf("Frencuencia Seno: %d Hz\n",valorFrecuenciaHz[frecuencia]);
 8000c86:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <SenoTsk+0x100>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a31      	ldr	r2, [pc, #196]	@ (8000d50 <SenoTsk+0x104>)
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4830      	ldr	r0, [pc, #192]	@ (8000d54 <SenoTsk+0x108>)
 8000c94:	f000 f900 	bl	8000e98 <UsbPrintf>

		if(DIGet(3)){
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f7ff fb1f 	bl	80002dc <DIGet>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <SenoTsk+0x6a>
			if(frecuencia < 4){
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <SenoTsk+0x100>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	dc04      	bgt.n	8000cb6 <SenoTsk+0x6a>
				frecuencia++;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <SenoTsk+0x100>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <SenoTsk+0x100>)
 8000cb4:	6013      	str	r3, [r2, #0]
			}
		}
		if(DIGet(4)){
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff fb10 	bl	80002dc <DIGet>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <SenoTsk+0x88>
			if(frecuencia > 0){
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <SenoTsk+0x100>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd04      	ble.n	8000cd4 <SenoTsk+0x88>
				frecuencia--;
 8000cca:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <SenoTsk+0x100>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <SenoTsk+0x100>)
 8000cd2:	6013      	str	r3, [r2, #0]
			}
		}
		for(int i = 0; i < seno45; i++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e033      	b.n	8000d42 <SenoTsk+0xf6>
			for(int j = 0; j < 8; j++){
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	e022      	b.n	8000d26 <SenoTsk+0xda>
				salida[j] = (senoArreglo45[i] >> j) % 2;
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d58 <SenoTsk+0x10c>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	fa42 f303 	asr.w	r3, r2, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	bfb8      	it	lt
 8000cf6:	425b      	neglt	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <SenoTsk+0x110>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DOSet(j, salida[j]);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4915      	ldr	r1, [pc, #84]	@ (8000d5c <SenoTsk+0x110>)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	f7ff fc5e 	bl	80005dc <DOSet>
			for(int j = 0; j < 8; j++){
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	3301      	adds	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	ddd9      	ble.n	8000ce0 <SenoTsk+0x94>
			}
			OSTimeDly(valorFrecuencia[frecuencia]);
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <SenoTsk+0x100>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <SenoTsk+0x114>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f007 fa7c 	bl	8008234 <OSTimeDly>
		for(int i = 0; i < seno45; i++){
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d46:	ddc8      	ble.n	8000cda <SenoTsk+0x8e>
		UsbPrintf("Frencuencia Seno: %d Hz\n",valorFrecuenciaHz[frecuencia]);
 8000d48:	e79d      	b.n	8000c86 <SenoTsk+0x3a>
 8000d4a:	bf00      	nop
 8000d4c:	20001668 	.word	0x20001668
 8000d50:	20000014 	.word	0x20000014
 8000d54:	0800b118 	.word	0x0800b118
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	20001648 	.word	0x20001648
 8000d60:	20000000 	.word	0x20000000

08000d64 <PrimerSecuencia>:
		}
	}
}


static void PrimerSecuencia (void *p_arg){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000d6c:	f002 fdfc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000d70:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f005 fdc8 	bl	8006908 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000d78:	f005 ff4a 	bl	8006c10 <OSStatInit>
	#endif


	while (DEF_TRUE){
	    DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fbe5 	bl	8000550 <DOCfgMode>
	    DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 8000d86:	23c7      	movs	r3, #199	@ 0xc7
 8000d88:	2263      	movs	r2, #99	@ 0x63
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fbb1 	bl	80004f4 <DOCfgBlink>

	    DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fbda 	bl	8000550 <DOCfgMode>
	    DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8000d9c:	f240 138f 	movw	r3, #399	@ 0x18f
 8000da0:	22c7      	movs	r2, #199	@ 0xc7
 8000da2:	2100      	movs	r1, #0
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fba5 	bl	80004f4 <DOCfgBlink>

	    DOCfgMode(LED3, DO_MODE_LOW, false);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fbce 	bl	8000550 <DOCfgMode>

	    OSTimeDly(1000);
 8000db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db8:	f007 fa3c 	bl	8008234 <OSTimeDly>
	    DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000dbc:	bf00      	nop
 8000dbe:	e7dd      	b.n	8000d7c <PrimerSecuencia+0x18>

08000dc0 <SegundaSecuencia>:
	}
}


static void SegundaSecuencia (void *p_arg){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000dc8:	f002 fdce 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000dcc:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f005 fd9a 	bl	8006908 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000dd4:	f005 ff1c 	bl	8006c10 <OSStatInit>
	#endif


	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fbb7 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 299);
 8000de2:	f240 132b 	movw	r3, #299	@ 0x12b
 8000de6:	2263      	movs	r2, #99	@ 0x63
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fb82 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fbab 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8000dfa:	f240 138f 	movw	r3, #399	@ 0x18f
 8000dfe:	22c7      	movs	r2, #199	@ 0xc7
 8000e00:	2100      	movs	r1, #0
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fb76 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fb9f 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 299, 399);
 8000e12:	f240 138f 	movw	r3, #399	@ 0x18f
 8000e16:	f240 122b 	movw	r2, #299	@ 0x12b
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fb69 	bl	80004f4 <DOCfgBlink>

		OSTimeDly(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e26:	f007 fa05 	bl	8008234 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e2a:	bf00      	nop
 8000e2c:	e7d4      	b.n	8000dd8 <SegundaSecuencia+0x18>

08000e2e <TercerSecuencia>:
	}
}


static void TercerSecuencia (void *p_arg){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000e36:	f002 fd97 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000e3a:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f005 fd63 	bl	8006908 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000e42:	f005 fee5 	bl	8006c10 <OSStatInit>
	#endif

	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2104      	movs	r1, #4
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fb80 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 8000e50:	23c7      	movs	r3, #199	@ 0xc7
 8000e52:	2263      	movs	r2, #99	@ 0x63
 8000e54:	2100      	movs	r1, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fb4c 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2104      	movs	r1, #4
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fb75 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 149, 299);
 8000e66:	f240 132b 	movw	r3, #299	@ 0x12b
 8000e6a:	2295      	movs	r2, #149	@ 0x95
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fb40 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff fb69 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 199, 349);
 8000e7e:	f240 135d 	movw	r3, #349	@ 0x15d
 8000e82:	22c7      	movs	r2, #199	@ 0xc7
 8000e84:	2100      	movs	r1, #0
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fb34 	bl	80004f4 <DOCfgBlink>

		OSTimeDly(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e90:	f007 f9d0 	bl	8008234 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e94:	bf00      	nop
 8000e96:	e7d6      	b.n	8000e46 <TercerSecuencia+0x18>

08000e98 <UsbPrintf>:
* Caller(s)   :
* Note(s)     : none.
**************************************************************************************************************************
*/
void UsbPrintf (CPU_CHAR  *p_fmt, ...)
{
 8000e98:	b40f      	push	{r0, r1, r2, r3}
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b098      	sub	sp, #96	@ 0x60
 8000e9e:	af00      	add	r7, sp, #0
    CPU_CHAR    str[80u + 1u];
    CPU_SIZE_T  len;
    va_list     vArgs;

    va_start(vArgs, p_fmt);
 8000ea0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ea4:	607b      	str	r3, [r7, #4]

    vsprintf((char       *)str,
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f009 fc60 	bl	800a774 <vsiprintf>
             (char const *)p_fmt,
                           vArgs);

    va_end(vArgs);

    len = strlen(str);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fa07 	bl	80002cc <strlen>
 8000ebe:	65f8      	str	r0, [r7, #92]	@ 0x5c

    CDC_Transmit_FS((uint8_t *)str, len);
 8000ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f009 f85e 	bl	8009f8c <CDC_Transmit_FS>
}
 8000ed0:	bf00      	nop
 8000ed2:	3760      	adds	r7, #96	@ 0x60
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eda:	b004      	add	sp, #16
 8000edc:	4770      	bx	lr

08000ede <GetButton>:

int GetButton(){
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
	int boton;

	if(DIGet(BOTON1)){
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff f9f9 	bl	80002dc <DIGet>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <GetButton+0x18>
		boton = BOTON1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	e025      	b.n	8000f42 <GetButton+0x64>
	}else if(DIGet(BOTON2)){
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff f9f0 	bl	80002dc <DIGet>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <GetButton+0x2a>
		boton = BOTON2;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	e01c      	b.n	8000f42 <GetButton+0x64>
	}else if(DIGet(BOTON3)){
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff f9e7 	bl	80002dc <DIGet>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <GetButton+0x3c>
		boton = BOTON3;
 8000f14:	2302      	movs	r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	e013      	b.n	8000f42 <GetButton+0x64>
	}else if(DIGet(BOTON4)){
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f7ff f9de 	bl	80002dc <DIGet>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <GetButton+0x4e>
		boton = BOTON4;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e00a      	b.n	8000f42 <GetButton+0x64>
	}else if(DIGet(BOTON5)){
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff f9d5 	bl	80002dc <DIGet>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <GetButton+0x60>
		boton = BOTON5;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e001      	b.n	8000f42 <GetButton+0x64>
	}else
		boton = DEFAULT;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	607b      	str	r3, [r7, #4]

	return boton;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <PinReset>:

void PinReset(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	for (int pin = 0; pin < 8; pin++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e008      	b.n	8000f6a <PinReset+0x1e>
		DOSet(pin, 0);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb3c 	bl	80005dc <DOSet>
	for (int pin = 0; pin < 8; pin++) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddf3      	ble.n	8000f58 <PinReset+0xc>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SuspendAllTasks>:

void SuspendAllTasks(){
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
	for (int task = 2; task < 6; task++) {
 8000f80:	2302      	movs	r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	e007      	b.n	8000f96 <SuspendAllTasks+0x1c>
		OSTaskSuspend(task);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 f8a4 	bl	80080d8 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	ddf4      	ble.n	8000f86 <SuspendAllTasks+0xc>
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SuspendAllTasksExceptOne>:

void SuspendAllTasksExceptOne(int TaskID){
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]

	OSTaskResume(TaskID);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 ffb4 	bl	8007f20 <OSTaskResume>

	for (int task = 2; task < 6; task++) {
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e00b      	b.n	8000fd6 <SuspendAllTasksExceptOne+0x30>
		if(task != TaskID){
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d004      	beq.n	8000fd0 <SuspendAllTasksExceptOne+0x2a>
			OSTaskSuspend(task);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 f884 	bl	80080d8 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	ddf0      	ble.n	8000fbe <SuspendAllTasksExceptOne+0x18>
		}
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <HAL_MspInit+0x5c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_MspInit+0x5c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_MspInit+0x60>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_MspInit+0x60>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <MemManage_Handler+0x4>

08001074 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <UsageFault_Handler+0x4>

08001084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010a2:	f000 fc59 	bl	8001958 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20003ae0 	.word	0x20003ae0

080010b0 <_sbrk>:
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x50>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x16>
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <_sbrk+0x50>)
 80010c2:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <_sbrk+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <_sbrk+0x50>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <_sbrk+0x50>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	466a      	mov	r2, sp
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d907      	bls.n	80010ea <_sbrk+0x3a>
 80010da:	f009 fb5d 	bl	800a798 <__errno>
 80010de:	4603      	mov	r3, r0
 80010e0:	220c      	movs	r2, #12
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	e006      	b.n	80010f8 <_sbrk+0x48>
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <_sbrk+0x50>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <_sbrk+0x50>)
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000166c 	.word	0x2000166c
 8001104:	20004138 	.word	0x20004138

08001108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <SystemInit+0x5c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <SystemInit+0x5c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <SystemInit+0x5c>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4911      	ldr	r1, [pc, #68]	@ (8001164 <SystemInit+0x5c>)
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <SystemInit+0x60>)
 8001120:	4013      	ands	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <SystemInit+0x5c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <SystemInit+0x5c>)
 800112a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800112e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <SystemInit+0x5c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <SystemInit+0x5c>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <SystemInit+0x5c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <SystemInit+0x5c>)
 8001146:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800114a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <SystemInit+0x5c>)
 800114e:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8001152:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SystemInit+0x64>)
 8001156:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800115a:	609a      	str	r2, [r3, #8]
#endif 
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	f8ff0000 	.word	0xf8ff0000
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:
 8001170:	2100      	movs	r1, #0
 8001172:	e003      	b.n	800117c <LoopCopyDataInit>

08001174 <CopyDataInit>:
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <LoopFillZerobss+0x14>)
 8001176:	585b      	ldr	r3, [r3, r1]
 8001178:	5043      	str	r3, [r0, r1]
 800117a:	3104      	adds	r1, #4

0800117c <LoopCopyDataInit>:
 800117c:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x18>)
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <LoopFillZerobss+0x1c>)
 8001180:	1842      	adds	r2, r0, r1
 8001182:	429a      	cmp	r2, r3
 8001184:	d3f6      	bcc.n	8001174 <CopyDataInit>
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x20>)
 8001188:	e002      	b.n	8001190 <LoopFillZerobss>

0800118a <FillZerobss>:
 800118a:	2300      	movs	r3, #0
 800118c:	f842 3b04 	str.w	r3, [r2], #4

08001190 <LoopFillZerobss>:
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <LoopFillZerobss+0x24>)
 8001192:	429a      	cmp	r2, r3
 8001194:	d3f9      	bcc.n	800118a <FillZerobss>
 8001196:	f7ff ffb7 	bl	8001108 <SystemInit>
 800119a:	f009 fb03 	bl	800a7a4 <__libc_init_array>
 800119e:	f7ff fb6d 	bl	800087c <main>
 80011a2:	4770      	bx	lr
 80011a4:	0800b3c4 	.word	0x0800b3c4
 80011a8:	20000000 	.word	0x20000000
 80011ac:	200002a8 	.word	0x200002a8
 80011b0:	200002a8 	.word	0x200002a8
 80011b4:	20004138 	.word	0x20004138

080011b8 <ADC1_2_IRQHandler>:
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x28>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f8b5 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fce2 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff ff0c 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40022000 	.word	0x40022000

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4906      	ldr	r1, [pc, #24]	@ (8001280 <__NVIC_EnableIRQ+0x34>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff4f 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff64 	bl	8001230 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ffb2 	bl	80012d8 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff81 	bl	8001284 <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff57 	bl	800124c <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	@ 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e169      	b.n	8001690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013bc:	2201      	movs	r2, #1
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8158 	bne.w	800168a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a9a      	ldr	r2, [pc, #616]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013e4:	4a98      	ldr	r2, [pc, #608]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d875      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013ea:	4a98      	ldr	r2, [pc, #608]	@ (800164c <HAL_GPIO_Init+0x2a4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d058      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013f0:	4a96      	ldr	r2, [pc, #600]	@ (800164c <HAL_GPIO_Init+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d86f      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013f6:	4a96      	ldr	r2, [pc, #600]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d052      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013fc:	4a94      	ldr	r2, [pc, #592]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d869      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001402:	4a94      	ldr	r2, [pc, #592]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04c      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001408:	4a92      	ldr	r2, [pc, #584]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d863      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800140e:	4a92      	ldr	r2, [pc, #584]	@ (8001658 <HAL_GPIO_Init+0x2b0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d046      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001414:	4a90      	ldr	r2, [pc, #576]	@ (8001658 <HAL_GPIO_Init+0x2b0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d85d      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d82a      	bhi.n	8001474 <HAL_GPIO_Init+0xcc>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d859      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001422:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <HAL_GPIO_Init+0x80>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014a3 	.word	0x080014a3
 800142c:	0800147d 	.word	0x0800147d
 8001430:	0800148f 	.word	0x0800148f
 8001434:	080014d1 	.word	0x080014d1
 8001438:	080014d7 	.word	0x080014d7
 800143c:	080014d7 	.word	0x080014d7
 8001440:	080014d7 	.word	0x080014d7
 8001444:	080014d7 	.word	0x080014d7
 8001448:	080014d7 	.word	0x080014d7
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014d7 	.word	0x080014d7
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014d7 	.word	0x080014d7
 800146c:	08001485 	.word	0x08001485
 8001470:	08001499 	.word	0x08001499
 8001474:	4a79      	ldr	r2, [pc, #484]	@ (800165c <HAL_GPIO_Init+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e029      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e024      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01f      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e01a      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e013      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e009      	b.n	80014d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          break;
 80014d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d801      	bhi.n	80014e2 <HAL_GPIO_Init+0x13a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_Init+0x13e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	@ 0xff
 80014ec:	d802      	bhi.n	80014f4 <HAL_GPIO_Init+0x14c>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x152>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	3b08      	subs	r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	210f      	movs	r1, #15
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b1 	beq.w	800168a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001528:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a4c      	ldr	r2, [pc, #304]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001540:	4a48      	ldr	r2, [pc, #288]	@ (8001664 <HAL_GPIO_Init+0x2bc>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a40      	ldr	r2, [pc, #256]	@ (8001668 <HAL_GPIO_Init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d013      	beq.n	8001594 <HAL_GPIO_Init+0x1ec>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3f      	ldr	r2, [pc, #252]	@ (800166c <HAL_GPIO_Init+0x2c4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00d      	beq.n	8001590 <HAL_GPIO_Init+0x1e8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3e      	ldr	r2, [pc, #248]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3d      	ldr	r2, [pc, #244]	@ (8001674 <HAL_GPIO_Init+0x2cc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_Init+0x1e0>
 8001584:	2303      	movs	r3, #3
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001588:	2304      	movs	r3, #4
 800158a:	e004      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 800158c:	2302      	movs	r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_GPIO_Init+0x1ee>
 8001594:	2300      	movs	r3, #0
 8001596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	4093      	lsls	r3, r2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a6:	492f      	ldr	r1, [pc, #188]	@ (8001664 <HAL_GPIO_Init+0x2bc>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	492c      	ldr	r1, [pc, #176]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4928      	ldr	r1, [pc, #160]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	4922      	ldr	r1, [pc, #136]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491e      	ldr	r1, [pc, #120]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4918      	ldr	r1, [pc, #96]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4914      	ldr	r1, [pc, #80]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d021      	beq.n	800167c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	490e      	ldr	r1, [pc, #56]	@ (8001678 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e021      	b.n	800168a <HAL_GPIO_Init+0x2e2>
 8001646:	bf00      	nop
 8001648:	10320000 	.word	0x10320000
 800164c:	10310000 	.word	0x10310000
 8001650:	10220000 	.word	0x10220000
 8001654:	10210000 	.word	0x10210000
 8001658:	10120000 	.word	0x10120000
 800165c:	10110000 	.word	0x10110000
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40011000 	.word	0x40011000
 8001674:	40011400 	.word	0x40011400
 8001678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_GPIO_Init+0x304>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	@ (80016ac <HAL_GPIO_Init+0x304>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae8e 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	@ 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f4:	887a      	ldrh	r2, [r7, #2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016fa:	e003      	b.n	8001704 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800170e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001710:	b08b      	sub	sp, #44	@ 0x2c
 8001712:	af06      	add	r7, sp, #24
 8001714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0f1      	b.n	8001904 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f008 fd5d 	bl	800a1f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fa12 	bl	8003b70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	687e      	ldr	r6, [r7, #4]
 8001754:	466d      	mov	r5, sp
 8001756:	f106 0410 	add.w	r4, r6, #16
 800175a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	602b      	str	r3, [r5, #0]
 8001762:	1d33      	adds	r3, r6, #4
 8001764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f002 f9dc 	bl	8003b24 <USB_CoreInit>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2202      	movs	r2, #2
 8001776:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0c2      	b.n	8001904 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fa0d 	bl	8003ba4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e040      	b.n	8001812 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3301      	adds	r3, #1
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3303      	adds	r3, #3
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3338      	adds	r3, #56	@ 0x38
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	333c      	adds	r3, #60	@ 0x3c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3340      	adds	r3, #64	@ 0x40
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	3301      	adds	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3b9      	bcc.n	8001790 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e044      	b.n	80018ac <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3b5      	bcc.n	8001822 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	687e      	ldr	r6, [r7, #4]
 80018be:	466d      	mov	r5, sp
 80018c0:	f106 0410 	add.w	r4, r6, #16
 80018c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	602b      	str	r3, [r5, #0]
 80018cc:	1d33      	adds	r3, r6, #4
 80018ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f002 f973 	bl	8003bbc <USB_DevInit>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e00d      	b.n	8001904 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f004 fbf4 	bl	80060ea <USB_DevDisconnect>

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_PCD_Start+0x16>
 800191e:	2302      	movs	r3, #2
 8001920:	e016      	b.n	8001950 <HAL_PCD_Start+0x44>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f908 	bl	8003b44 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f008 fecf 	bl	800a6da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fbc8 	bl	80060d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f004 fbca 	bl	80060fe <USB_ReadInterrupts>
 800196a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb1b 	bl	8001fb2 <PCD_EP_ISR_Handler>

    return;
 800197c:	e119      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800199a:	b292      	uxth	r2, r2
 800199c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f008 fca2 	bl	800a2ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f905 	bl	8001bb8 <HAL_PCD_SetAddress>

    return;
 80019ae:	e100      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00c      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019d2:	e0ee      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019f6:	e0dc      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d027      	beq.n	8001a52 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0204 	bic.w	r2, r2, #4
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f008 fc92 	bl	800a35c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a50:	e0af      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8083 	beq.w	8001b64 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	77fb      	strb	r3, [r7, #31]
 8001a62:	e010      	b.n	8001a86 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	441a      	add	r2, r3
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	b292      	uxth	r2, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	3320      	adds	r3, #32
 8001a7a:	443b      	add	r3, r7
 8001a7c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a80:	7ffb      	ldrb	r3, [r7, #31]
 8001a82:	3301      	adds	r3, #1
 8001a84:	77fb      	strb	r3, [r7, #31]
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b07      	cmp	r3, #7
 8001a8a:	d9eb      	bls.n	8001a64 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001abc:	bf00      	nop
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f6      	beq.n	8001abe <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	77fb      	strb	r3, [r7, #31]
 8001aec:	e00f      	b.n	8001b0e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4611      	mov	r1, r2
 8001af6:	7ffa      	ldrb	r2, [r7, #31]
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	440a      	add	r2, r1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	3320      	adds	r3, #32
 8001b00:	443b      	add	r3, r7
 8001b02:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b06:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	77fb      	strb	r3, [r7, #31]
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d9ec      	bls.n	8001aee <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0208 	orr.w	r2, r2, #8
 8001b26:	b292      	uxth	r2, r2
 8001b28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0204 	orr.w	r2, r2, #4
 8001b56:	b292      	uxth	r2, r2
 8001b58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f008 fbe3 	bl	800a328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b62:	e026      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00f      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f008 fba1 	bl	800a2ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b8c:	e011      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bb0:	bf00      	nop
  }
}
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_SetAddress+0x1a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e013      	b.n	8001bfa <HAL_PCD_SetAddress+0x42>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fa60 	bl	80060b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	460b      	mov	r3, r1
 8001c16:	803b      	strh	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da0e      	bge.n	8001c46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	705a      	strb	r2, [r3, #1]
 8001c44:	e00e      	b.n	8001c64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 0207 	and.w	r2, r3, #7
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c70:	883a      	ldrh	r2, [r7, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	78ba      	ldrb	r2, [r7, #2]
 8001c7a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d102      	bne.n	8001c88 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_EP_Open+0x94>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e00e      	b.n	8001cb4 <HAL_PCD_EP_Open+0xb2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 ffa9 	bl	8003bfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0e      	bge.n	8001cee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
 8001cec:	e00e      	b.n	8001d0c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 0207 	and.w	r2, r3, #7
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_PCD_EP_Close+0x6a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e00e      	b.n	8001d44 <HAL_PCD_EP_Close+0x88>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 fb21 	bl	800437c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 0207 	and.w	r2, r3, #7
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fcd8 	bl	8004754 <USB_EPStartXfer>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 0207 	and.w	r2, r3, #7
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001dd0:	681b      	ldr	r3, [r3, #0]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	460b      	mov	r3, r1
 8001dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fc8a 	bl	8004754 <USB_EPStartXfer>

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 0207 	and.w	r2, r3, #7
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d901      	bls.n	8001e68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e04c      	b.n	8001f02 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da0e      	bge.n	8001e8e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
 8001e8c:	e00c      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_EP_SetStall+0x7e>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e01c      	b.n	8001f02 <HAL_PCD_EP_SetStall+0xb8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 ffed 	bl	8005eb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f004 f912 	bl	800611c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d901      	bls.n	8001f28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e040      	b.n	8001faa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0e      	bge.n	8001f4e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0207 	and.w	r2, r3, #7
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_EP_ClrStall+0x82>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e00e      	b.n	8001faa <HAL_PCD_EP_ClrStall+0xa0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 ffdb 	bl	8005f56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b096      	sub	sp, #88	@ 0x58
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fba:	e3be      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001fd6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 8178 	bne.w	80022d0 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d151      	bne.n	8002090 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ffc:	81fb      	strh	r3, [r7, #14]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800200c:	b29b      	uxth	r3, r3
 800200e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3328      	adds	r3, #40	@ 0x28
 8002014:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	3302      	adds	r3, #2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800203e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002040:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	441a      	add	r2, r3
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002050:	2100      	movs	r1, #0
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f008 f921 	bl	800a29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 836a 	beq.w	800273a <PCD_EP_ISR_Handler+0x788>
 8002066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8365 	bne.w	800273a <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800208e:	e354      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d034      	beq.n	8002118 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	3306      	adds	r3, #6
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80020e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f004 f865 	bl	80061bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020fe:	4013      	ands	r3, r2
 8002100:	823b      	strh	r3, [r7, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	8a3a      	ldrh	r2, [r7, #16]
 8002108:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800210c:	b292      	uxth	r2, r2
 800210e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f008 f895 	bl	800a240 <HAL_PCD_SetupStageCallback>
 8002116:	e310      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002118:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800211c:	2b00      	cmp	r3, #0
 800211e:	f280 830c 	bge.w	800273a <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800212e:	4013      	ands	r3, r2
 8002130:	83fb      	strh	r3, [r7, #30]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	8bfa      	ldrh	r2, [r7, #30]
 8002138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	3306      	adds	r3, #6
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800216c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d019      	beq.n	80021a8 <PCD_EP_ISR_Handler+0x1f6>
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	6959      	ldr	r1, [r3, #20]
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800218c:	b29b      	uxth	r3, r3
 800218e:	f004 f815 	bl	80061bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	441a      	add	r2, r3
 800219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021a0:	2100      	movs	r1, #0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f008 f85e 	bl	800a264 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 82bd 	bne.w	800273a <PCD_EP_ISR_Handler+0x788>
 80021c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021cc:	f000 82b5 	beq.w	800273a <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4413      	add	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b3e      	cmp	r3, #62	@ 0x3e
 8002206:	d91d      	bls.n	8002244 <PCD_EP_ISR_Handler+0x292>
 8002208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <PCD_EP_ISR_Handler+0x270>
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	3b01      	subs	r3, #1
 8002220:	647b      	str	r3, [r7, #68]	@ 0x44
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29a      	uxth	r2, r3
 8002228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222a:	b29b      	uxth	r3, r3
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	b29b      	uxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b29b      	uxth	r3, r3
 8002234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223c:	b29a      	uxth	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e026      	b.n	8002292 <PCD_EP_ISR_Handler+0x2e0>
 8002244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <PCD_EP_ISR_Handler+0x2b0>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225a:	b29a      	uxth	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	801a      	strh	r2, [r3, #0]
 8002260:	e017      	b.n	8002292 <PCD_EP_ISR_Handler+0x2e0>
 8002262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
 800226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <PCD_EP_ISR_Handler+0x2ca>
 8002276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002278:	3301      	adds	r3, #1
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29a      	uxth	r2, r3
 8002282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002284:	b29b      	uxth	r3, r3
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	b29b      	uxth	r3, r3
 800228a:	4313      	orrs	r3, r2
 800228c:	b29a      	uxth	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	827b      	strh	r3, [r7, #18]
 80022a4:	8a7b      	ldrh	r3, [r7, #18]
 80022a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80022aa:	827b      	strh	r3, [r7, #18]
 80022ac:	8a7b      	ldrh	r3, [r7, #18]
 80022ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022b2:	827b      	strh	r3, [r7, #18]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	8a7b      	ldrh	r3, [r7, #18]
 80022ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	8013      	strh	r3, [r2, #0]
 80022ce:	e234      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f280 80fc 	bge.w	80024e6 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002304:	4013      	ands	r3, r2
 8002306:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800231c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002324:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800233a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233c:	7b1b      	ldrb	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d125      	bne.n	800238e <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	3306      	adds	r3, #6
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800236e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8092 	beq.w	800249c <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237e:	6959      	ldr	r1, [r3, #20]
 8002380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002382:	88da      	ldrh	r2, [r3, #6]
 8002384:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002388:	f003 ff18 	bl	80061bc <USB_ReadPMA>
 800238c:	e086      	b.n	800249c <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800238e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002390:	78db      	ldrb	r3, [r3, #3]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d10a      	bne.n	80023ac <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800239a:	461a      	mov	r2, r3
 800239c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f9d9 	bl	8002756 <HAL_PCD_EP_DB_Receive>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80023aa:	e077      	b.n	800249c <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d024      	beq.n	8002454 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3302      	adds	r3, #2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002436:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02e      	beq.n	800249c <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	6959      	ldr	r1, [r3, #20]
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	891a      	ldrh	r2, [r3, #8]
 800244a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800244e:	f003 feb5 	bl	80061bc <USB_ReadPMA>
 8002452:	e023      	b.n	800249c <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	3306      	adds	r3, #6
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002480:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248e:	6959      	ldr	r1, [r3, #20]
 8002490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002492:	895a      	ldrh	r2, [r3, #10]
 8002494:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002498:	f003 fe90 	bl	80061bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800249c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a4:	441a      	add	r2, r3
 80024a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024b2:	441a      	add	r2, r3
 80024b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <PCD_EP_ISR_Handler+0x51a>
 80024c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80024c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d206      	bcs.n	80024da <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f007 fec6 	bl	800a264 <HAL_PCD_DataOutStageCallback>
 80024d8:	e005      	b.n	80024e6 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 f937 	bl	8004754 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8123 	beq.w	800273a <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80024f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800251e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002522:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	441a      	add	r2, r3
 8002534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002540:	b29b      	uxth	r3, r3
 8002542:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	78db      	ldrb	r3, [r3, #3]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 80a2 	bne.w	8002692 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 800254e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002556:	7b1b      	ldrb	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8093 	beq.w	8002684 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800255e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d046      	beq.n	80025f8 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800256a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d126      	bne.n	80025c0 <PCD_EP_ISR_Handler+0x60e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002580:	b29b      	uxth	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	4413      	add	r3, r2
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
 800258a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	011a      	lsls	r2, r3, #4
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	4413      	add	r3, r2
 8002594:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	e061      	b.n	8002684 <PCD_EP_ISR_Handler+0x6d2>
 80025c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d15d      	bne.n	8002684 <PCD_EP_ISR_Handler+0x6d2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025dc:	4413      	add	r3, r2
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	011a      	lsls	r2, r3, #4
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	4413      	add	r3, r2
 80025ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	2200      	movs	r2, #0
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	e045      	b.n	8002684 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d126      	bne.n	8002654 <PCD_EP_ISR_Handler+0x6a2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261a:	4413      	add	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
 800261e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	011a      	lsls	r2, r3, #4
 8002624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002626:	4413      	add	r3, r2
 8002628:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002638:	b29a      	uxth	r2, r3
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29a      	uxth	r2, r3
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e017      	b.n	8002684 <PCD_EP_ISR_Handler+0x6d2>
 8002654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002656:	785b      	ldrb	r3, [r3, #1]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d113      	bne.n	8002684 <PCD_EP_ISR_Handler+0x6d2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800266a:	4413      	add	r3, r2
 800266c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800266e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	011a      	lsls	r2, r3, #4
 8002674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002676:	4413      	add	r3, r2
 8002678:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	2200      	movs	r2, #0
 8002682:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f007 fe05 	bl	800a29a <HAL_PCD_DataInStageCallback>
 8002690:	e053      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002692:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d146      	bne.n	800272c <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	3302      	adds	r3, #2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80026ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d907      	bls.n	80026e6 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	e002      	b.n	80026ec <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f007 fdcd 	bl	800a29a <HAL_PCD_DataInStageCallback>
 8002700:	e01b      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800270a:	441a      	add	r2, r3
 800270c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002718:	441a      	add	r2, r3
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002724:	4618      	mov	r0, r3
 8002726:	f002 f815 	bl	8004754 <USB_EPStartXfer>
 800272a:	e006      	b.n	800273a <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800272c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002730:	461a      	mov	r2, r3
 8002732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f91b 	bl	8002970 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002742:	b29b      	uxth	r3, r3
 8002744:	b21b      	sxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f6ff ac38 	blt.w	8001fbc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3758      	adds	r7, #88	@ 0x58
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	3302      	adds	r3, #2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d306      	bcc.n	80027b0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	8b7b      	ldrh	r3, [r7, #26]
 80027a8:	1ad2      	subs	r2, r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	619a      	str	r2, [r3, #24]
 80027ae:	e002      	b.n	80027b6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d123      	bne.n	8002806 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d8:	833b      	strh	r3, [r7, #24]
 80027da:	8b3b      	ldrh	r3, [r7, #24]
 80027dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027e0:	833b      	strh	r3, [r7, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	8b3b      	ldrh	r3, [r7, #24]
 80027f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002802:	b29b      	uxth	r3, r3
 8002804:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01f      	beq.n	8002850 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282a:	82fb      	strh	r3, [r7, #22]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	8afb      	ldrh	r3, [r7, #22]
 800283c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002848:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800284c:	b29b      	uxth	r3, r3
 800284e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002850:	8b7b      	ldrh	r3, [r7, #26]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6959      	ldr	r1, [r3, #20]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	891a      	ldrh	r2, [r3, #8]
 8002864:	8b7b      	ldrh	r3, [r7, #26]
 8002866:	f003 fca9 	bl	80061bc <USB_ReadPMA>
 800286a:	e07c      	b.n	8002966 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	3306      	adds	r3, #6
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	8b7b      	ldrh	r3, [r7, #26]
 800289c:	429a      	cmp	r2, r3
 800289e:	d306      	bcc.n	80028ae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	8b7b      	ldrh	r3, [r7, #26]
 80028a6:	1ad2      	subs	r2, r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	619a      	str	r2, [r3, #24]
 80028ac:	e002      	b.n	80028b4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d123      	bne.n	8002904 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d6:	83fb      	strh	r3, [r7, #30]
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028de:	83fb      	strh	r3, [r7, #30]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	441a      	add	r2, r3
 80028ee:	8bfb      	ldrh	r3, [r7, #30]
 80028f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002900:	b29b      	uxth	r3, r3
 8002902:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11f      	bne.n	800294e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002928:	83bb      	strh	r3, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	8bbb      	ldrh	r3, [r7, #28]
 800293a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800293e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800294a:	b29b      	uxth	r3, r3
 800294c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800294e:	8b7b      	ldrh	r3, [r7, #26]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6959      	ldr	r1, [r3, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	895a      	ldrh	r2, [r3, #10]
 8002960:	8b7b      	ldrh	r3, [r7, #26]
 8002962:	f003 fc2b 	bl	80061bc <USB_ReadPMA>
    }
  }

  return count;
 8002966:	8b7b      	ldrh	r3, [r7, #26]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0a4      	sub	sp, #144	@ 0x90
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 81dd 	beq.w	8002d44 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	3302      	adds	r3, #2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029be:	429a      	cmp	r2, r3
 80029c0:	d907      	bls.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ca:	1ad2      	subs	r2, r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	619a      	str	r2, [r3, #24]
 80029d0:	e002      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 80b9 	bne.w	8002b54 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d126      	bne.n	8002a38 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	4413      	add	r3, r2
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	011a      	lsls	r2, r3, #4
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	e01a      	b.n	8002a6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d116      	bne.n	8002a6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a54:	4413      	add	r3, r2
 8002a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	011a      	lsls	r2, r3, #4
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d126      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	011a      	lsls	r2, r3, #4
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e017      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d113      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	4413      	add	r3, r2
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f007 fbca 	bl	800a29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 82fc 	beq.w	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2c:	82fb      	strh	r3, [r7, #22]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	8013      	strh	r3, [r2, #0]
 8002b52:	e2da      	b.n	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d021      	beq.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 82ae 	bne.w	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bb6:	441a      	add	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bc4:	441a      	add	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d30b      	bcc.n	8002bee <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	621a      	str	r2, [r3, #32]
 8002bec:	e017      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002bf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c06:	e00a      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d165      	bne.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3a:	4413      	add	r3, r2
 8002c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	011a      	lsls	r2, r3, #4
 8002c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c46:	4413      	add	r3, r2
 8002c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	801a      	strh	r2, [r3, #0]
 8002c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c62:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c64:	d91d      	bls.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9e:	801a      	strh	r2, [r3, #0]
 8002ca0:	e044      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	e035      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_PCD_EP_DB_Transmit+0x36a>
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cee:	801a      	strh	r2, [r3, #0]
 8002cf0:	e01c      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d118      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	4413      	add	r3, r2
 8002d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011a      	lsls	r2, r3, #4
 8002d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6959      	ldr	r1, [r3, #20]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	891a      	ldrh	r2, [r3, #8]
 8002d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f003 f9f8 	bl	8006132 <USB_WritePMA>
 8002d42:	e1e2      	b.n	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	3306      	adds	r3, #6
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d307      	bcc.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	e002      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80c0 	bne.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d126      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db8:	4413      	add	r3, r2
 8002dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	011a      	lsls	r2, r3, #4
 8002dc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002dca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	e01a      	b.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d116      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e0e:	4413      	add	r3, r2
 8002e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	011a      	lsls	r2, r3, #4
 8002e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e24:	2200      	movs	r2, #0
 8002e26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12b      	bne.n	8002e8e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	011a      	lsls	r2, r3, #4
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e8a:	801a      	strh	r2, [r3, #0]
 8002e8c:	e017      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d113      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ea4:	4413      	add	r3, r2
 8002ea6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eba:	2200      	movs	r2, #0
 8002ebc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f007 f9e8 	bl	800a29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 811a 	bne.w	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]
 8002f1a:	e0f6      	b.n	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d121      	bne.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	441a      	add	r2, r3
 8002f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 80ca 	bne.w	800310a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f7e:	441a      	add	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f8c:	441a      	add	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d30b      	bcc.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	621a      	str	r2, [r3, #32]
 8002fb4:	e017      	b.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002fbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fce:	e00a      	b.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d165      	bne.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x750>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003008:	4413      	add	r3, r2
 800300a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003014:	4413      	add	r3, r2
 8003016:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800301a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800301c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003030:	2b3e      	cmp	r3, #62	@ 0x3e
 8003032:	d91d      	bls.n	8003070 <HAL_PCD_EP_DB_Transmit+0x700>
 8003034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003048:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800304a:	3b01      	subs	r3, #1
 800304c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29a      	uxth	r2, r3
 8003054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003056:	b29b      	uxth	r3, r3
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	b29b      	uxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29a      	uxth	r2, r3
 800306a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e041      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29a      	uxth	r2, r3
 8003088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e032      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x784>
 800308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x738>
 80030a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030a4:	3301      	adds	r3, #1
 80030a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	e019      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d115      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	4413      	add	r3, r2
 80030d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6959      	ldr	r1, [r3, #20]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	895a      	ldrh	r2, [r3, #10]
 8003100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003104:	b29b      	uxth	r3, r3
 8003106:	f003 f814 	bl	8006132 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003124:	82bb      	strh	r3, [r7, #20]
 8003126:	8abb      	ldrh	r3, [r7, #20]
 8003128:	f083 0310 	eor.w	r3, r3, #16
 800312c:	82bb      	strh	r3, [r7, #20]
 800312e:	8abb      	ldrh	r3, [r7, #20]
 8003130:	f083 0320 	eor.w	r3, r3, #32
 8003134:	82bb      	strh	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	8abb      	ldrh	r3, [r7, #20]
 8003146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800314a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003156:	b29b      	uxth	r3, r3
 8003158:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3790      	adds	r7, #144	@ 0x90
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	4613      	mov	r3, r2
 8003174:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e009      	b.n	80031ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319a:	897a      	ldrh	r2, [r7, #10]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	80da      	strh	r2, [r3, #6]
 80031c2:	e00b      	b.n	80031dc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2201      	movs	r2, #1
 80031c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e272      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b92      	ldr	r3, [pc, #584]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003214:	4b8f      	ldr	r3, [pc, #572]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
 8003220:	4b8c      	ldr	r3, [pc, #560]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b89      	ldr	r3, [pc, #548]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x12c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e24c      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x76>
 8003250:	4b80      	ldr	r3, [pc, #512]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7f      	ldr	r2, [pc, #508]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b7b      	ldr	r3, [pc, #492]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b78      	ldr	r3, [pc, #480]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a77      	ldr	r2, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xbc>
 800328a:	4b72      	ldr	r3, [pc, #456]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a71      	ldr	r2, [pc, #452]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 80032a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a67      	ldr	r2, [pc, #412]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fc74 	bl	8000bb0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fd fc70 	bl	8000bb0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e200      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe4>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fc60 	bl	8000bb0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fc5c 	bl	8000bb0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1ec      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x10c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	4b4c      	ldr	r3, [pc, #304]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800332e:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
 800333a:	4b46      	ldr	r3, [pc, #280]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1c0      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4939      	ldr	r1, [pc, #228]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <HAL_RCC_OscConfig+0x270>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fc15 	bl	8000bb0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fd fc11 	bl	8000bb0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1a1      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4927      	ldr	r1, [pc, #156]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <HAL_RCC_OscConfig+0x270>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fbf4 	bl	8000bb0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fd fbf0 	bl	8000bb0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e180      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03a      	beq.n	800346c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_RCC_OscConfig+0x274>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7fd fbd4 	bl	8000bb0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7fd fbd0 	bl	8000bb0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e160      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f000 faa6 	bl	800397c <RCC_Delay>
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_RCC_OscConfig+0x274>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fd fbba 	bl	8000bb0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd fbb6 	bl	8000bb0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e146      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e9      	bne.n	8003440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a6 	beq.w	80035c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b8b      	ldr	r3, [pc, #556]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b88      	ldr	r3, [pc, #544]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a87      	ldr	r2, [pc, #540]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	4b85      	ldr	r3, [pc, #532]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b82      	ldr	r3, [pc, #520]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b7f      	ldr	r3, [pc, #508]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7e      	ldr	r2, [pc, #504]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fd fb77 	bl	8000bb0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fd fb73 	bl	8000bb0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e103      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b75      	ldr	r3, [pc, #468]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x312>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e02d      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x334>
 8003502:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a69      	ldr	r2, [pc, #420]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b67      	ldr	r3, [pc, #412]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a66      	ldr	r2, [pc, #408]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	e01c      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d10c      	bne.n	800353e <HAL_RCC_OscConfig+0x356>
 8003524:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a60      	ldr	r2, [pc, #384]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4b5e      	ldr	r3, [pc, #376]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a5d      	ldr	r2, [pc, #372]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800353e:	4b5b      	ldr	r3, [pc, #364]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a5a      	ldr	r2, [pc, #360]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b58      	ldr	r3, [pc, #352]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a57      	ldr	r2, [pc, #348]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fd fb27 	bl	8000bb0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fd fb23 	bl	8000bb0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0b1      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCC_OscConfig+0x37e>
 8003588:	e014      	b.n	80035b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fd fb11 	bl	8000bb0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd fb0d 	bl	8000bb0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e09b      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	4b40      	ldr	r3, [pc, #256]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b3c      	ldr	r3, [pc, #240]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a3b      	ldr	r2, [pc, #236]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8087 	beq.w	80036de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d061      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d146      	bne.n	8003672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b33      	ldr	r3, [pc, #204]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fd fae1 	bl	8000bb0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd fadd 	bl	8000bb0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e06d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4921      	ldr	r1, [pc, #132]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a19      	ldr	r1, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	430b      	orrs	r3, r1
 800363e:	491b      	ldr	r1, [pc, #108]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fd fab1 	bl	8000bb0 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fd faad 	bl	8000bb0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e03d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x46a>
 8003670:	e035      	b.n	80036de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fa9a 	bl	8000bb0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd fa96 	bl	8000bb0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e026      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x498>
 800369e:	e01e      	b.n	80036de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e019      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_OscConfig+0x500>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000

080036ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d0      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b67      	ldr	r3, [pc, #412]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4965      	ldr	r1, [pc, #404]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a58      	ldr	r2, [pc, #352]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a52      	ldr	r2, [pc, #328]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800376a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d040      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b41      	ldr	r3, [pc, #260]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e073      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3d      	ldr	r3, [pc, #244]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06b      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b39      	ldr	r3, [pc, #228]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4936      	ldr	r1, [pc, #216]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fd f9e8 	bl	8000bb0 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fd f9e4 	bl	8000bb0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e053      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d210      	bcs.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4922      	ldr	r1, [pc, #136]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003866:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x1d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd f97e 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	0800b1ec 	.word	0x0800b1ec
 80038b8:	200000e0 	.word	0x200000e0
 80038bc:	200000e4 	.word	0x200000e4

080038c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x94>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ee:	e027      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	e027      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x94>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0c5b      	lsrs	r3, r3, #17
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xa0>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	fb03 f202 	mul.w	r2, r3, r2
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e004      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0c      	ldr	r2, [pc, #48]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	613b      	str	r3, [r7, #16]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 8003942:	613b      	str	r3, [r7, #16]
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	693b      	ldr	r3, [r7, #16]
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	007a1200 	.word	0x007a1200
 800395c:	0800b1fc 	.word	0x0800b1fc
 8003960:	0800b20c 	.word	0x0800b20c
 8003964:	003d0900 	.word	0x003d0900

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b02      	ldr	r3, [pc, #8]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	200000e0 	.word	0x200000e0

0800397c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <RCC_Delay+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <RCC_Delay+0x38>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003998:	bf00      	nop
  }
  while (Delay --);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <RCC_Delay+0x1c>
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	200000e0 	.word	0x200000e0
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d07d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b49      	ldr	r3, [pc, #292]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d118      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a18:	f7fd f8ca 	bl	8000bb0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a20:	f7fd f8c6 	bl	8000bb0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e06d      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3e:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02e      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d027      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a72:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd f895 	bl	8000bb0 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd f891 	bl	8000bb0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e036      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4917      	ldr	r1, [pc, #92]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	490b      	ldr	r1, [pc, #44]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42420440 	.word	0x42420440

08003b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b24:	b084      	sub	sp, #16
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	f107 0014 	add.w	r0, r7, #20
 8003b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	b004      	add	sp, #16
 8003b42:	4770      	bx	lr

08003b44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b54:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b78:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	f107 0014 	add.w	r0, r7, #20
 8003bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	b004      	add	sp, #16
 8003bfa:	4770      	bx	lr

08003bfc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b09d      	sub	sp, #116	@ 0x74
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	78db      	ldrb	r3, [r3, #3]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d81f      	bhi.n	8003c6e <USB_ActivateEndpoint+0x72>
 8003c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <USB_ActivateEndpoint+0x38>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c77 	.word	0x08003c77
 8003c40:	08003c53 	.word	0x08003c53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c50:	e012      	b.n	8003c78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c56:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003c5a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c5e:	e00b      	b.n	8003c78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c6c:	e004      	b.n	8003c78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003c74:	e000      	b.n	8003c78 <USB_ActivateEndpoint+0x7c>
      break;
 8003c76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	7812      	ldrb	r2, [r2, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	441a      	add	r2, r3
 8003cc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7b1b      	ldrb	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 8178 	bne.w	8003fd8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8084 	beq.w	8003dfa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4413      	add	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	011a      	lsls	r2, r3, #4
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	88db      	ldrh	r3, [r3, #6]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	827b      	strh	r3, [r7, #18]
 8003d34:	8a7b      	ldrh	r3, [r7, #18]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <USB_ActivateEndpoint+0x17a>
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d54:	823b      	strh	r3, [r7, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8a3b      	ldrh	r3, [r7, #16]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d020      	beq.n	8003dc0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d94:	81bb      	strh	r3, [r7, #12]
 8003d96:	89bb      	ldrh	r3, [r7, #12]
 8003d98:	f083 0320 	eor.w	r3, r3, #32
 8003d9c:	81bb      	strh	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	89bb      	ldrh	r3, [r7, #12]
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
 8003dbe:	e2d5      	b.n	800436c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd6:	81fb      	strh	r3, [r7, #14]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	89fb      	ldrh	r3, [r7, #14]
 8003de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]
 8003df8:	e2b8      	b.n	800436c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	4413      	add	r3, r2
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	011a      	lsls	r2, r3, #4
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	88db      	ldrh	r3, [r3, #6]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	4413      	add	r3, r2
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	011a      	lsls	r2, r3, #4
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e68:	d91d      	bls.n	8003ea6 <USB_ActivateEndpoint+0x2aa>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <USB_ActivateEndpoint+0x288>
 8003e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e80:	3b01      	subs	r3, #1
 8003e82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	029b      	lsls	r3, r3, #10
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e026      	b.n	8003ef4 <USB_ActivateEndpoint+0x2f8>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <USB_ActivateEndpoint+0x2c8>
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e017      	b.n	8003ef4 <USB_ActivateEndpoint+0x2f8>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <USB_ActivateEndpoint+0x2e2>
 8003ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eda:	3301      	adds	r3, #1
 8003edc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	029b      	lsls	r3, r3, #10
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4313      	orrs	r3, r2
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003f02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <USB_ActivateEndpoint+0x348>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	843b      	strh	r3, [r7, #32]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	8c3b      	ldrh	r3, [r7, #32]
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d124      	bne.n	8003f96 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	83bb      	strh	r3, [r7, #28]
 8003f64:	8bbb      	ldrh	r3, [r7, #28]
 8003f66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f6a:	83bb      	strh	r3, [r7, #28]
 8003f6c:	8bbb      	ldrh	r3, [r7, #28]
 8003f6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f72:	83bb      	strh	r3, [r7, #28]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	8bbb      	ldrh	r3, [r7, #28]
 8003f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8013      	strh	r3, [r2, #0]
 8003f94:	e1ea      	b.n	800436c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fac:	83fb      	strh	r3, [r7, #30]
 8003fae:	8bfb      	ldrh	r3, [r7, #30]
 8003fb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fb4:	83fb      	strh	r3, [r7, #30]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	8bfb      	ldrh	r3, [r7, #30]
 8003fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]
 8003fd6:	e1c9      	b.n	800436c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	78db      	ldrb	r3, [r3, #3]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d11e      	bne.n	800401e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800400c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004010:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004018:	b29b      	uxth	r3, r3
 800401a:	8013      	strh	r3, [r2, #0]
 800401c:	e01d      	b.n	800405a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004034:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406a:	4413      	add	r3, r2
 800406c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	011a      	lsls	r2, r3, #4
 8004074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004076:	4413      	add	r3, r2
 8004078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800407c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	891b      	ldrh	r3, [r3, #8]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	657b      	str	r3, [r7, #84]	@ 0x54
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409e:	4413      	add	r3, r2
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011a      	lsls	r2, r3, #4
 80040a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80040b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	895b      	ldrh	r3, [r3, #10]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 8093 	bne.w	80041f2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80040dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01b      	beq.n	8004120 <USB_ActivateEndpoint+0x524>
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800410c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411c:	b29b      	uxth	r3, r3
 800411e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800412e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01b      	beq.n	8004170 <USB_ActivateEndpoint+0x574>
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800414a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800415c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004168:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800416c:	b29b      	uxth	r3, r3
 800416e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004188:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800418a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800418e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004190:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004192:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004196:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	8013      	strh	r3, [r2, #0]
 80041f0:	e0bc      	b.n	800436c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01d      	beq.n	800424a <USB_ActivateEndpoint+0x64e>
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004224:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800425a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01d      	beq.n	80042a2 <USB_ActivateEndpoint+0x6a6>
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800429a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	78db      	ldrb	r3, [r3, #3]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d024      	beq.n	80042f4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042c8:	f083 0320 	eor.w	r3, r3, #32
 80042cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	441a      	add	r2, r3
 8004354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800435c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800436c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004370:	4618      	mov	r0, r3
 8004372:	3774      	adds	r7, #116	@ 0x74
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800437c:	b480      	push	{r7}
 800437e:	b08d      	sub	sp, #52	@ 0x34
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	7b1b      	ldrb	r3, [r3, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 808e 	bne.w	80044ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d044      	beq.n	8004422 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	81bb      	strh	r3, [r7, #12]
 80043a6:	89bb      	ldrh	r3, [r7, #12]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <USB_DeactivateEndpoint+0x6c>
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c6:	817b      	strh	r3, [r7, #10]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043fe:	813b      	strh	r3, [r7, #8]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	893b      	ldrh	r3, [r7, #8]
 800440c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441c:	b29b      	uxth	r3, r3
 800441e:	8013      	strh	r3, [r2, #0]
 8004420:	e192      	b.n	8004748 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	827b      	strh	r3, [r7, #18]
 8004430:	8a7b      	ldrh	r3, [r7, #18]
 8004432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01b      	beq.n	8004472 <USB_DeactivateEndpoint+0xf6>
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004450:	823b      	strh	r3, [r7, #16]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	8a3b      	ldrh	r3, [r7, #16]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800446a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004488:	81fb      	strh	r3, [r7, #14]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800449a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	8013      	strh	r3, [r2, #0]
 80044aa:	e14d      	b.n	8004748 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 80a5 	bne.w	8004600 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	843b      	strh	r3, [r7, #32]
 80044c4:	8c3b      	ldrh	r3, [r7, #32]
 80044c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01b      	beq.n	8004506 <USB_DeactivateEndpoint+0x18a>
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e4:	83fb      	strh	r3, [r7, #30]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	8bfb      	ldrh	r3, [r7, #30]
 80044f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004502:	b29b      	uxth	r3, r3
 8004504:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	83bb      	strh	r3, [r7, #28]
 8004514:	8bbb      	ldrh	r3, [r7, #28]
 8004516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01b      	beq.n	8004556 <USB_DeactivateEndpoint+0x1da>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004534:	837b      	strh	r3, [r7, #26]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8b7b      	ldrh	r3, [r7, #26]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800454e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456c:	833b      	strh	r3, [r7, #24]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8b3b      	ldrh	r3, [r7, #24]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004586:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a4:	82fb      	strh	r3, [r7, #22]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8afb      	ldrh	r3, [r7, #22]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045dc:	82bb      	strh	r3, [r7, #20]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8abb      	ldrh	r3, [r7, #20]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
 80045fe:	e0a3      	b.n	8004748 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800460e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <USB_DeactivateEndpoint+0x2d4>
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800465e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <USB_DeactivateEndpoint+0x324>
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004698:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3734      	adds	r7, #52	@ 0x34
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b0c2      	sub	sp, #264	@ 0x108
 8004758:	af00      	add	r7, sp, #0
 800475a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004762:	6018      	str	r0, [r3, #0]
 8004764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800476c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800476e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b01      	cmp	r3, #1
 800477c:	f040 86b7 	bne.w	80054ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d908      	bls.n	80047ae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800479c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047ac:	e007      	b.n	80047be <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	7b1b      	ldrb	r3, [r3, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13a      	bne.n	8004844 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6959      	ldr	r1, [r3, #20]
 80047da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	88da      	ldrh	r2, [r3, #6]
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047f4:	6800      	ldr	r0, [r0, #0]
 80047f6:	f001 fc9c 	bl	8006132 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800480a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	011a      	lsls	r2, r3, #4
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f000 be1f 	b.w	8005482 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	78db      	ldrb	r3, [r3, #3]
 8004850:	2b02      	cmp	r3, #2
 8004852:	f040 8462 	bne.w	800511a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800485a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	f240 83df 	bls.w	8005032 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800489e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80048c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e0:	1ad2      	subs	r2, r2, r3
 80048e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 81c7 	beq.w	8004ca4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800491a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
 8004922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d177      	bne.n	8004a22 <USB_EPStartXfer+0x2ce>
 8004932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800493e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	4413      	add	r3, r2
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	011a      	lsls	r2, r3, #4
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	4413      	add	r3, r2
 8004968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004978:	b29a      	uxth	r2, r3
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004982:	2b3e      	cmp	r3, #62	@ 0x3e
 8004984:	d921      	bls.n	80049ca <USB_EPStartXfer+0x276>
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <USB_EPStartXfer+0x252>
 800499c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049a0:	3b01      	subs	r3, #1
 80049a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e050      	b.n	8004a6c <USB_EPStartXfer+0x318>
 80049ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <USB_EPStartXfer+0x294>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e041      	b.n	8004a6c <USB_EPStartXfer+0x318>
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <USB_EPStartXfer+0x2b4>
 80049fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a02:	3301      	adds	r3, #1
 8004a04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	e024      	b.n	8004a6c <USB_EPStartXfer+0x318>
 8004a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d11c      	bne.n	8004a6c <USB_EPStartXfer+0x318>
 8004a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	4413      	add	r3, r2
 8004a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	011a      	lsls	r2, r3, #4
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	895b      	ldrh	r3, [r3, #10]
 8004a78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6959      	ldr	r1, [r3, #20]
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	f001 fb49 	bl	8006132 <USB_WritePMA>
            ep->xfer_buff += len;
 8004aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab0:	441a      	add	r2, r3
 8004ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d90f      	bls.n	8004afa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	621a      	str	r2, [r3, #32]
 8004af8:	e00e      	b.n	8004b18 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d177      	bne.n	8004c18 <USB_EPStartXfer+0x4c4>
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	011a      	lsls	r2, r3, #4
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b78:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b7a:	d921      	bls.n	8004bc0 <USB_EPStartXfer+0x46c>
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <USB_EPStartXfer+0x448>
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b96:	3b01      	subs	r3, #1
 8004b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	e056      	b.n	8004c6e <USB_EPStartXfer+0x51a>
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <USB_EPStartXfer+0x48a>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e047      	b.n	8004c6e <USB_EPStartXfer+0x51a>
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <USB_EPStartXfer+0x4aa>
 8004bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	e02a      	b.n	8004c6e <USB_EPStartXfer+0x51a>
 8004c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d122      	bne.n	8004c6e <USB_EPStartXfer+0x51a>
 8004c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	623b      	str	r3, [r7, #32]
 8004c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	4413      	add	r3, r2
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	011a      	lsls	r2, r3, #4
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	891b      	ldrh	r3, [r3, #8]
 8004c7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6959      	ldr	r1, [r3, #20]
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f001 fa48 	bl	8006132 <USB_WritePMA>
 8004ca2:	e3ee      	b.n	8005482 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d177      	bne.n	8004da4 <USB_EPStartXfer+0x650>
 8004cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd4:	4413      	add	r3, r2
 8004cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	011a      	lsls	r2, r3, #4
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d04:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d06:	d921      	bls.n	8004d4c <USB_EPStartXfer+0x5f8>
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <USB_EPStartXfer+0x5d4>
 8004d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d22:	3b01      	subs	r3, #1
 8004d24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e056      	b.n	8004dfa <USB_EPStartXfer+0x6a6>
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <USB_EPStartXfer+0x616>
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	e047      	b.n	8004dfa <USB_EPStartXfer+0x6a6>
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <USB_EPStartXfer+0x636>
 8004d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d84:	3301      	adds	r3, #1
 8004d86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e02a      	b.n	8004dfa <USB_EPStartXfer+0x6a6>
 8004da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d122      	bne.n	8004dfa <USB_EPStartXfer+0x6a6>
 8004db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dd4:	4413      	add	r3, r2
 8004dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	891b      	ldrh	r3, [r3, #8]
 8004e06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6959      	ldr	r1, [r3, #20]
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e28:	6800      	ldr	r0, [r0, #0]
 8004e2a:	f001 f982 	bl	8006132 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3e:	441a      	add	r2, r3
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d90f      	bls.n	8004e88 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	621a      	str	r2, [r3, #32]
 8004e86:	e00e      	b.n	8004ea6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d177      	bne.n	8004fb2 <USB_EPStartXfer+0x85e>
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	4413      	add	r3, r2
 8004ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	011a      	lsls	r2, r3, #4
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f14:	d921      	bls.n	8004f5a <USB_EPStartXfer+0x806>
 8004f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <USB_EPStartXfer+0x7e2>
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	3b01      	subs	r3, #1
 8004f32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e050      	b.n	8004ffc <USB_EPStartXfer+0x8a8>
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <USB_EPStartXfer+0x824>
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e041      	b.n	8004ffc <USB_EPStartXfer+0x8a8>
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <USB_EPStartXfer+0x844>
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f92:	3301      	adds	r3, #1
 8004f94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e024      	b.n	8004ffc <USB_EPStartXfer+0x8a8>
 8004fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11c      	bne.n	8004ffc <USB_EPStartXfer+0x8a8>
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd6:	4413      	add	r3, r2
 8004fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	011a      	lsls	r2, r3, #4
 8004fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	895b      	ldrh	r3, [r3, #10]
 8005008:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800500c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6959      	ldr	r1, [r3, #20]
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	b29b      	uxth	r3, r3
 800501e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005022:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005026:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	f001 f881 	bl	8006132 <USB_WritePMA>
 8005030:	e227      	b.n	8005482 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005068:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800506c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800508a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050be:	4413      	add	r3, r2
 80050c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	011a      	lsls	r2, r3, #4
 80050d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050de:	b29a      	uxth	r2, r3
 80050e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	891b      	ldrh	r3, [r3, #8]
 80050f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6959      	ldr	r1, [r3, #20]
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	b29b      	uxth	r3, r3
 8005106:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800510a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800510e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005112:	6800      	ldr	r0, [r0, #0]
 8005114:	f001 f80d 	bl	8006132 <USB_WritePMA>
 8005118:	e1b3      	b.n	8005482 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800511a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a1a      	ldr	r2, [r3, #32]
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80c6 	beq.w	80052ec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	673b      	str	r3, [r7, #112]	@ 0x70
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d177      	bne.n	800526c <USB_EPStartXfer+0xb18>
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800519c:	4413      	add	r3, r2
 800519e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	011a      	lsls	r2, r3, #4
 80051ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80051b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051ce:	d921      	bls.n	8005214 <USB_EPStartXfer+0xac0>
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <USB_EPStartXfer+0xa9c>
 80051e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e050      	b.n	80052b6 <USB_EPStartXfer+0xb62>
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <USB_EPStartXfer+0xade>
 800521c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e041      	b.n	80052b6 <USB_EPStartXfer+0xb62>
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <USB_EPStartXfer+0xafe>
 8005248:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800524c:	3301      	adds	r3, #1
 800524e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29a      	uxth	r2, r3
 8005258:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800525c:	b29b      	uxth	r3, r3
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	b29b      	uxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e024      	b.n	80052b6 <USB_EPStartXfer+0xb62>
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11c      	bne.n	80052b6 <USB_EPStartXfer+0xb62>
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005290:	4413      	add	r3, r2
 8005292:	673b      	str	r3, [r7, #112]	@ 0x70
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	895b      	ldrh	r3, [r3, #10]
 80052c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6959      	ldr	r1, [r3, #20]
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052e4:	6800      	ldr	r0, [r0, #0]
 80052e6:	f000 ff24 	bl	8006132 <USB_WritePMA>
 80052ea:	e0ca      	b.n	8005482 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d177      	bne.n	80053ec <USB_EPStartXfer+0xc98>
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005316:	b29b      	uxth	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800531c:	4413      	add	r3, r2
 800531e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005330:	4413      	add	r3, r2
 8005332:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005336:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	b29a      	uxth	r2, r3
 8005344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	2b3e      	cmp	r3, #62	@ 0x3e
 800534e:	d921      	bls.n	8005394 <USB_EPStartXfer+0xc40>
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <USB_EPStartXfer+0xc1c>
 8005366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800536a:	3b01      	subs	r3, #1
 800536c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29a      	uxth	r2, r3
 8005376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800537a:	b29b      	uxth	r3, r3
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	b29b      	uxth	r3, r3
 8005380:	4313      	orrs	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538c:	b29a      	uxth	r2, r3
 800538e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e05c      	b.n	800544e <USB_EPStartXfer+0xcfa>
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <USB_EPStartXfer+0xc5e>
 800539c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e04d      	b.n	800544e <USB_EPStartXfer+0xcfa>
 80053b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <USB_EPStartXfer+0xc7e>
 80053c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053dc:	b29b      	uxth	r3, r3
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4313      	orrs	r3, r2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e030      	b.n	800544e <USB_EPStartXfer+0xcfa>
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d128      	bne.n	800544e <USB_EPStartXfer+0xcfa>
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800540a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005418:	b29b      	uxth	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005420:	4413      	add	r3, r2
 8005422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	011a      	lsls	r2, r3, #4
 8005434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005438:	4413      	add	r3, r2
 800543a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800543e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800544c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	891b      	ldrh	r3, [r3, #8]
 800545a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6959      	ldr	r1, [r3, #20]
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	b29b      	uxth	r3, r3
 8005470:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005474:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005478:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f000 fe58 	bl	8006132 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	f083 0310 	eor.w	r3, r3, #16
 80054b0:	817b      	strh	r3, [r7, #10]
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	f083 0320 	eor.w	r3, r3, #32
 80054b8:	817b      	strh	r3, [r7, #10]
 80054ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	897b      	ldrh	r3, [r7, #10]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
 80054ea:	f000 bcde 	b.w	8005eaa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	7b1b      	ldrb	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 80bb 	bne.w	8005676 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d917      	bls.n	800554c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	1ad2      	subs	r2, r2, r3
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	619a      	str	r2, [r3, #24]
 800554a:	e00e      	b.n	800556a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800554c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800556a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800558e:	4413      	add	r3, r2
 8005590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80055ca:	d924      	bls.n	8005616 <USB_EPStartXfer+0xec2>
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <USB_EPStartXfer+0xe98>
 80055e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055e6:	3b01      	subs	r3, #1
 80055e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	029b      	lsls	r3, r3, #10
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560a:	b29a      	uxth	r2, r3
 800560c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	f000 bc10 	b.w	8005e36 <USB_EPStartXfer+0x16e2>
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <USB_EPStartXfer+0xee4>
 800561e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e3fe      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <USB_EPStartXfer+0xf04>
 800564e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005652:	3301      	adds	r3, #1
 8005654:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29a      	uxth	r2, r3
 8005660:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29b      	uxth	r3, r3
 800566a:	4313      	orrs	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e3df      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	78db      	ldrb	r3, [r3, #3]
 8005682:	2b02      	cmp	r3, #2
 8005684:	f040 8218 	bne.w	8005ab8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 809d 	bne.w	80057d4 <USB_EPStartXfer+0x1080>
 800569a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056be:	4413      	add	r3, r2
 80056c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b3e      	cmp	r3, #62	@ 0x3e
 8005702:	d92b      	bls.n	800575c <USB_EPStartXfer+0x1008>
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <USB_EPStartXfer+0xfe0>
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572e:	3b01      	subs	r3, #1
 8005730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29a      	uxth	r2, r3
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29b      	uxth	r3, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005752:	b29a      	uxth	r2, r3
 8005754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e070      	b.n	800583e <USB_EPStartXfer+0x10ea>
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10c      	bne.n	8005786 <USB_EPStartXfer+0x1032>
 800576c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e05b      	b.n	800583e <USB_EPStartXfer+0x10ea>
 8005786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <USB_EPStartXfer+0x1062>
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b0:	3301      	adds	r3, #1
 80057b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e034      	b.n	800583e <USB_EPStartXfer+0x10ea>
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d12c      	bne.n	800583e <USB_EPStartXfer+0x10ea>
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005808:	4413      	add	r3, r2
 800580a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005820:	4413      	add	r3, r2
 8005822:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800582a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800584c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 809d 	bne.w	8005998 <USB_EPStartXfer+0x1244>
 800585e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005882:	4413      	add	r3, r2
 8005884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800589a:	4413      	add	r3, r2
 800589c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058c6:	d92b      	bls.n	8005920 <USB_EPStartXfer+0x11cc>
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <USB_EPStartXfer+0x11a4>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	b29b      	uxth	r3, r3
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	b29b      	uxth	r3, r3
 800590a:	4313      	orrs	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005916:	b29a      	uxth	r2, r3
 8005918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e069      	b.n	80059f4 <USB_EPStartXfer+0x12a0>
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10c      	bne.n	800594a <USB_EPStartXfer+0x11f6>
 8005930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e054      	b.n	80059f4 <USB_EPStartXfer+0x12a0>
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <USB_EPStartXfer+0x1226>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005974:	3301      	adds	r3, #1
 8005976:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800597a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29a      	uxth	r2, r3
 8005982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	4313      	orrs	r3, r2
 800598e:	b29a      	uxth	r2, r3
 8005990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e02d      	b.n	80059f4 <USB_EPStartXfer+0x12a0>
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d125      	bne.n	80059f4 <USB_EPStartXfer+0x12a0>
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059be:	4413      	add	r3, r2
 80059c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	011a      	lsls	r2, r3, #4
 80059d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8218 	beq.w	8005e36 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <USB_EPStartXfer+0x12ea>
 8005a32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10d      	bne.n	8005a5a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 81f5 	bne.w	8005e36 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 81ee 	bne.w	8005e36 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
 8005ab6:	e1be      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	f040 81b4 	bne.w	8005e32 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d917      	bls.n	8005b16 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	619a      	str	r2, [r3, #24]
 8005b14:	e00e      	b.n	8005b34 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2200      	movs	r2, #0
 8005b32:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 8085 	bne.w	8005c50 <USB_EPStartXfer+0x14fc>
 8005b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	011a      	lsls	r2, r3, #4
 8005b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ba6:	d923      	bls.n	8005bf0 <USB_EPStartXfer+0x149c>
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <USB_EPStartXfer+0x1474>
 8005bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e060      	b.n	8005cb2 <USB_EPStartXfer+0x155e>
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10c      	bne.n	8005c12 <USB_EPStartXfer+0x14be>
 8005bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e04f      	b.n	8005cb2 <USB_EPStartXfer+0x155e>
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <USB_EPStartXfer+0x14de>
 8005c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e030      	b.n	8005cb2 <USB_EPStartXfer+0x155e>
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d128      	bne.n	8005cb2 <USB_EPStartXfer+0x155e>
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c84:	4413      	add	r3, r2
 8005c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 8085 	bne.w	8005ddc <USB_EPStartXfer+0x1688>
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	011a      	lsls	r2, r3, #4
 8005d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d32:	d923      	bls.n	8005d7c <USB_EPStartXfer+0x1628>
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <USB_EPStartXfer+0x1600>
 8005d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e05c      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <USB_EPStartXfer+0x164a>
 8005d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e04b      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <USB_EPStartXfer+0x166a>
 8005db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005db8:	3301      	adds	r3, #1
 8005dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e02c      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
 8005ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d124      	bne.n	8005e36 <USB_EPStartXfer+0x16e2>
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e02:	4413      	add	r3, r2
 8005e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	011a      	lsls	r2, r3, #4
 8005e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e001      	b.n	8005e36 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03a      	b.n	8005eac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ede:	81bb      	strh	r3, [r7, #12]
 8005ee0:	89bb      	ldrh	r3, [r7, #12]
 8005ee2:	f083 0310 	eor.w	r3, r3, #16
 8005ee6:	81bb      	strh	r3, [r7, #12]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	89bb      	ldrh	r3, [r7, #12]
 8005ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	8013      	strh	r3, [r2, #0]
 8005f08:	e01f      	b.n	8005f4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f20:	81fb      	strh	r3, [r7, #14]
 8005f22:	89fb      	ldrh	r3, [r7, #14]
 8005f24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f28:	81fb      	strh	r3, [r7, #14]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	7b1b      	ldrb	r3, [r3, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 809d 	bne.w	80060a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04c      	beq.n	800600c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	823b      	strh	r3, [r7, #16]
 8005f80:	8a3b      	ldrh	r3, [r7, #16]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01b      	beq.n	8005fc2 <USB_EPClearStall+0x6c>
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	81fb      	strh	r3, [r7, #14]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d06c      	beq.n	80060a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe0:	81bb      	strh	r3, [r7, #12]
 8005fe2:	89bb      	ldrh	r3, [r7, #12]
 8005fe4:	f083 0320 	eor.w	r3, r3, #32
 8005fe8:	81bb      	strh	r3, [r7, #12]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	89bb      	ldrh	r3, [r7, #12]
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
 800600a:	e04b      	b.n	80060a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	82fb      	strh	r3, [r7, #22]
 800601a:	8afb      	ldrh	r3, [r7, #22]
 800601c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <USB_EPClearStall+0x106>
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603a:	82bb      	strh	r3, [r7, #20]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	8abb      	ldrh	r3, [r7, #20]
 8006048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006058:	b29b      	uxth	r3, r3
 800605a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006072:	827b      	strh	r3, [r7, #18]
 8006074:	8a7b      	ldrh	r3, [r7, #18]
 8006076:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800607a:	827b      	strh	r3, [r7, #18]
 800607c:	8a7b      	ldrh	r3, [r7, #18]
 800607e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006082:	827b      	strh	r3, [r7, #18]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8a7b      	ldrh	r3, [r7, #18]
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2280      	movs	r2, #128	@ 0x80
 80060c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800610c:	b29b      	uxth	r3, r3
 800610e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006132:	b480      	push	{r7}
 8006134:	b08b      	sub	sp, #44	@ 0x2c
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	4611      	mov	r1, r2
 800613e:	461a      	mov	r2, r3
 8006140:	460b      	mov	r3, r1
 8006142:	80fb      	strh	r3, [r7, #6]
 8006144:	4613      	mov	r3, r2
 8006146:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	3301      	adds	r3, #1
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	005a      	lsls	r2, r3, #1
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006164:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	e01e      	b.n	80061aa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3301      	adds	r3, #1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b21a      	sxth	r2, r3
 800617c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006180:	4313      	orrs	r3, r2
 8006182:	b21b      	sxth	r3, r3
 8006184:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	8a7a      	ldrh	r2, [r7, #18]
 800618a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	3302      	adds	r3, #2
 8006190:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	3302      	adds	r3, #2
 8006196:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	3b01      	subs	r3, #1
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1dd      	bne.n	800616c <USB_WritePMA+0x3a>
  }
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	372c      	adds	r7, #44	@ 0x2c
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061bc:	b480      	push	{r7}
 80061be:	b08b      	sub	sp, #44	@ 0x2c
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	460b      	mov	r3, r1
 80061cc:	80fb      	strh	r3, [r7, #6]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061d2:	88bb      	ldrh	r3, [r7, #4]
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	005a      	lsls	r2, r3, #1
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	e01b      	b.n	800622e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	3302      	adds	r3, #2
 8006202:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3301      	adds	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	b2da      	uxtb	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	3301      	adds	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	3302      	adds	r3, #2
 8006226:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	3b01      	subs	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e0      	bne.n	80061f6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006234:	88bb      	ldrh	r3, [r7, #4]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	701a      	strb	r2, [r3, #0]
  }
}
 8006250:	bf00      	nop
 8006252:	372c      	adds	r7, #44	@ 0x2c
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
	...

0800625c <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	460b      	mov	r3, r1
 8006268:	71bb      	strb	r3, [r7, #6]
 800626a:	4613      	mov	r3, r2
 800626c:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 8006272:	79bb      	ldrb	r3, [r7, #6]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	613b      	str	r3, [r7, #16]
    switch (pos) {
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	f200 80c3 	bhi.w	8006406 <CPU_IntSrcPrioSet+0x1aa>
 8006280:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <CPU_IntSrcPrioSet+0x2c>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080064b7 	.word	0x080064b7
 800628c:	080064b7 	.word	0x080064b7
 8006290:	080064b7 	.word	0x080064b7
 8006294:	080064b7 	.word	0x080064b7
 8006298:	080062c9 	.word	0x080062c9
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	08006323 	.word	0x08006323
 80062a4:	080064b7 	.word	0x080064b7
 80062a8:	080064b7 	.word	0x080064b7
 80062ac:	080064b7 	.word	0x080064b7
 80062b0:	080064b7 	.word	0x080064b7
 80062b4:	08006351 	.word	0x08006351
 80062b8:	0800637f 	.word	0x0800637f
 80062bc:	080064b7 	.word	0x080064b7
 80062c0:	080063ab 	.word	0x080063ab
 80062c4:	080063d9 	.word	0x080063d9
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 80062c8:	2040      	movs	r0, #64	@ 0x40
 80062ca:	f7f9 ff43 	bl	8000154 <CPU_SR_Save>
 80062ce:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 80062d0:	4b7c      	ldr	r3, [pc, #496]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062dc:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 80062e6:	4a77      	ldr	r2, [pc, #476]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80062ec:	6978      	ldr	r0, [r7, #20]
 80062ee:	f7f9 ff3f 	bl	8000170 <CPU_SR_Restore>
             break;
 80062f2:	e0e3      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 80062f4:	2040      	movs	r0, #64	@ 0x40
 80062f6:	f7f9 ff2d 	bl	8000154 <CPU_SR_Save>
 80062fa:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 80062fc:	4b71      	ldr	r3, [pc, #452]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006308:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006314:	4a6b      	ldr	r2, [pc, #428]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7f9 ff28 	bl	8000170 <CPU_SR_Restore>
             break;
 8006320:	e0cc      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8006322:	2040      	movs	r0, #64	@ 0x40
 8006324:	f7f9 ff16 	bl	8000154 <CPU_SR_Save>
 8006328:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 800632a:	4b66      	ldr	r3, [pc, #408]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8006336:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006342:	4a60      	ldr	r2, [pc, #384]	@ (80064c4 <CPU_IntSrcPrioSet+0x268>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f7f9 ff11 	bl	8000170 <CPU_SR_Restore>
             break;
 800634e:	e0b5      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 8006350:	2040      	movs	r0, #64	@ 0x40
 8006352:	f7f9 feff 	bl	8000154 <CPU_SR_Save>
 8006356:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 8006358:	4b5b      	ldr	r3, [pc, #364]	@ (80064c8 <CPU_IntSrcPrioSet+0x26c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006364:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 8006370:	4a55      	ldr	r2, [pc, #340]	@ (80064c8 <CPU_IntSrcPrioSet+0x26c>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006376:	6978      	ldr	r0, [r7, #20]
 8006378:	f7f9 fefa 	bl	8000170 <CPU_SR_Restore>
             break;
 800637c:	e09e      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 800637e:	2040      	movs	r0, #64	@ 0x40
 8006380:	f7f9 fee8 	bl	8000154 <CPU_SR_Save>
 8006384:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8006386:	4b51      	ldr	r3, [pc, #324]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006392:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 800639c:	4a4b      	ldr	r2, [pc, #300]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80063a2:	6978      	ldr	r0, [r7, #20]
 80063a4:	f7f9 fee4 	bl	8000170 <CPU_SR_Restore>
             break;
 80063a8:	e088      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 80063aa:	2040      	movs	r0, #64	@ 0x40
 80063ac:	f7f9 fed2 	bl	8000154 <CPU_SR_Save>
 80063b0:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80063b2:	4b46      	ldr	r3, [pc, #280]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80063be:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 80063ca:	4a40      	ldr	r2, [pc, #256]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80063d0:	6978      	ldr	r0, [r7, #20]
 80063d2:	f7f9 fecd 	bl	8000170 <CPU_SR_Restore>
             break;
 80063d6:	e071      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 80063d8:	2040      	movs	r0, #64	@ 0x40
 80063da:	f7f9 febb 	bl	8000154 <CPU_SR_Save>
 80063de:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80063e0:	4b3a      	ldr	r3, [pc, #232]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063ec:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	061b      	lsls	r3, r3, #24
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 80063f8:	4a34      	ldr	r2, [pc, #208]	@ (80064cc <CPU_IntSrcPrioSet+0x270>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f7f9 feb6 	bl	8000170 <CPU_SR_Restore>
             break;
 8006404:	e05a      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 8006406:	4b32      	ldr	r3, [pc, #200]	@ (80064d0 <CPU_IntSrcPrioSet+0x274>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	3301      	adds	r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	015b      	lsls	r3, r3, #5
 8006414:	b29b      	uxth	r3, r3
 8006416:	3310      	adds	r3, #16
 8006418:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	b29b      	uxth	r3, r3
 800641e:	897a      	ldrh	r2, [r7, #10]
 8006420:	429a      	cmp	r2, r3
 8006422:	d94a      	bls.n	80064ba <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 8006424:	797b      	ldrb	r3, [r7, #5]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d105      	bne.n	8006436 <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 800642a:	79bb      	ldrb	r3, [r7, #6]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d907      	bls.n	8006440 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8006430:	f000 f850 	bl	80064d4 <CPU_SW_Exception>
 8006434:	e004      	b.n	8006440 <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 8006436:	79bb      	ldrb	r3, [r7, #6]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d801      	bhi.n	8006440 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 800643c:	f000 f84a 	bl	80064d4 <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	3b10      	subs	r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	da00      	bge.n	800644a <CPU_IntSrcPrioSet+0x1ee>
 8006448:	3303      	adds	r3, #3
 800644a:	109b      	asrs	r3, r3, #2
 800644c:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	3b10      	subs	r3, #16
 8006452:	425a      	negs	r2, r3
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	f002 0203 	and.w	r2, r2, #3
 800645c:	bf58      	it	pl
 800645e:	4253      	negpl	r3, r2
 8006460:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 8006462:	2040      	movs	r0, #64	@ 0x40
 8006464:	f7f9 fe76 	bl	8000154 <CPU_SR_Save>
 8006468:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 800646a:	7a7b      	ldrb	r3, [r7, #9]
 800646c:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8006470:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 800647a:	7a3b      	ldrb	r3, [r7, #8]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	22ff      	movs	r2, #255	@ 0xff
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 800648c:	7a3b      	ldrb	r3, [r7, #8]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 800649c:	7a7b      	ldrb	r3, [r7, #9]
 800649e:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80064a2:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	461a      	mov	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 80064ae:	6978      	ldr	r0, [r7, #20]
 80064b0:	f7f9 fe5e 	bl	8000170 <CPU_SR_Restore>
             }
             break;
 80064b4:	e001      	b.n	80064ba <CPU_IntSrcPrioSet+0x25e>
             break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <CPU_IntSrcPrioSet+0x260>
             break;
 80064ba:	bf00      	nop
    }
}
 80064bc:	bf00      	nop
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	e000ed18 	.word	0xe000ed18
 80064c8:	e000ed1c 	.word	0xe000ed1c
 80064cc:	e000ed20 	.word	0xe000ed20
 80064d0:	e000e004 	.word	0xe000e004

080064d4 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
    for (;;) {
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <CPU_SW_Exception+0x4>

080064dc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 80064e2:	4b3b      	ldr	r3, [pc, #236]	@ (80065d0 <OSDebugInit+0xf4>)
 80064e4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 80064e6:	4b3b      	ldr	r3, [pc, #236]	@ (80065d4 <OSDebugInit+0xf8>)
 80064e8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 80064ea:	4b3b      	ldr	r3, [pc, #236]	@ (80065d8 <OSDebugInit+0xfc>)
 80064ec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 80064ee:	4b3b      	ldr	r3, [pc, #236]	@ (80065dc <OSDebugInit+0x100>)
 80064f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 80064f2:	4b3b      	ldr	r3, [pc, #236]	@ (80065e0 <OSDebugInit+0x104>)
 80064f4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 80064f6:	4b3b      	ldr	r3, [pc, #236]	@ (80065e4 <OSDebugInit+0x108>)
 80064f8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 80064fa:	4b3b      	ldr	r3, [pc, #236]	@ (80065e8 <OSDebugInit+0x10c>)
 80064fc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 80064fe:	4b3b      	ldr	r3, [pc, #236]	@ (80065ec <OSDebugInit+0x110>)
 8006500:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8006502:	4b3b      	ldr	r3, [pc, #236]	@ (80065f0 <OSDebugInit+0x114>)
 8006504:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8006506:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <OSDebugInit+0x118>)
 8006508:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 800650a:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <OSDebugInit+0x11c>)
 800650c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 800650e:	4b3b      	ldr	r3, [pc, #236]	@ (80065fc <OSDebugInit+0x120>)
 8006510:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8006512:	4b3b      	ldr	r3, [pc, #236]	@ (8006600 <OSDebugInit+0x124>)
 8006514:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8006516:	4b3b      	ldr	r3, [pc, #236]	@ (8006604 <OSDebugInit+0x128>)
 8006518:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 800651a:	4b3b      	ldr	r3, [pc, #236]	@ (8006608 <OSDebugInit+0x12c>)
 800651c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 800651e:	4b3b      	ldr	r3, [pc, #236]	@ (800660c <OSDebugInit+0x130>)
 8006520:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8006522:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <OSDebugInit+0x134>)
 8006524:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8006526:	4b3b      	ldr	r3, [pc, #236]	@ (8006614 <OSDebugInit+0x138>)
 8006528:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 800652a:	4b3b      	ldr	r3, [pc, #236]	@ (8006618 <OSDebugInit+0x13c>)
 800652c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 800652e:	4b3b      	ldr	r3, [pc, #236]	@ (800661c <OSDebugInit+0x140>)
 8006530:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8006532:	4b3b      	ldr	r3, [pc, #236]	@ (8006620 <OSDebugInit+0x144>)
 8006534:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8006536:	4b3b      	ldr	r3, [pc, #236]	@ (8006624 <OSDebugInit+0x148>)
 8006538:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 800653a:	4b3b      	ldr	r3, [pc, #236]	@ (8006628 <OSDebugInit+0x14c>)
 800653c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 800653e:	4b3b      	ldr	r3, [pc, #236]	@ (800662c <OSDebugInit+0x150>)
 8006540:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8006542:	4b3b      	ldr	r3, [pc, #236]	@ (8006630 <OSDebugInit+0x154>)
 8006544:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8006546:	4b3b      	ldr	r3, [pc, #236]	@ (8006634 <OSDebugInit+0x158>)
 8006548:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 800654a:	4b3b      	ldr	r3, [pc, #236]	@ (8006638 <OSDebugInit+0x15c>)
 800654c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 800654e:	4b3b      	ldr	r3, [pc, #236]	@ (800663c <OSDebugInit+0x160>)
 8006550:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8006552:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <OSDebugInit+0x164>)
 8006554:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8006556:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <OSDebugInit+0x168>)
 8006558:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 800655a:	4b3b      	ldr	r3, [pc, #236]	@ (8006648 <OSDebugInit+0x16c>)
 800655c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 800655e:	4b3b      	ldr	r3, [pc, #236]	@ (800664c <OSDebugInit+0x170>)
 8006560:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <OSDebugInit+0x174>)
 8006564:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8006566:	4b3b      	ldr	r3, [pc, #236]	@ (8006654 <OSDebugInit+0x178>)
 8006568:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <OSDebugInit+0x17c>)
 800656c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 800656e:	4b3b      	ldr	r3, [pc, #236]	@ (800665c <OSDebugInit+0x180>)
 8006570:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8006572:	4b3b      	ldr	r3, [pc, #236]	@ (8006660 <OSDebugInit+0x184>)
 8006574:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8006576:	4b3b      	ldr	r3, [pc, #236]	@ (8006664 <OSDebugInit+0x188>)
 8006578:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 800657a:	4b3b      	ldr	r3, [pc, #236]	@ (8006668 <OSDebugInit+0x18c>)
 800657c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 800657e:	4b3b      	ldr	r3, [pc, #236]	@ (800666c <OSDebugInit+0x190>)
 8006580:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8006582:	4b3b      	ldr	r3, [pc, #236]	@ (8006670 <OSDebugInit+0x194>)
 8006584:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8006586:	4b3b      	ldr	r3, [pc, #236]	@ (8006674 <OSDebugInit+0x198>)
 8006588:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 800658a:	4b3b      	ldr	r3, [pc, #236]	@ (8006678 <OSDebugInit+0x19c>)
 800658c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 800658e:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <OSDebugInit+0x1a0>)
 8006590:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8006592:	4b3b      	ldr	r3, [pc, #236]	@ (8006680 <OSDebugInit+0x1a4>)
 8006594:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8006596:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <OSDebugInit+0x1a8>)
 8006598:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 800659a:	4b3b      	ldr	r3, [pc, #236]	@ (8006688 <OSDebugInit+0x1ac>)
 800659c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 800659e:	4b3b      	ldr	r3, [pc, #236]	@ (800668c <OSDebugInit+0x1b0>)
 80065a0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 80065a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006690 <OSDebugInit+0x1b4>)
 80065a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 80065a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <OSDebugInit+0x1b8>)
 80065a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 80065aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <OSDebugInit+0x1bc>)
 80065ac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 80065ae:	4b3b      	ldr	r3, [pc, #236]	@ (800669c <OSDebugInit+0x1c0>)
 80065b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 80065b2:	4b3b      	ldr	r3, [pc, #236]	@ (80066a0 <OSDebugInit+0x1c4>)
 80065b4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 80065b6:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <OSDebugInit+0x1c8>)
 80065b8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 80065ba:	4b3b      	ldr	r3, [pc, #236]	@ (80066a8 <OSDebugInit+0x1cc>)
 80065bc:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 80065be:	4b3b      	ldr	r3, [pc, #236]	@ (80066ac <OSDebugInit+0x1d0>)
 80065c0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 80065c2:	4b3b      	ldr	r3, [pc, #236]	@ (80066b0 <OSDebugInit+0x1d4>)
 80065c4:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	0800b20e 	.word	0x0800b20e
 80065d4:	0800b210 	.word	0x0800b210
 80065d8:	0800b216 	.word	0x0800b216
 80065dc:	0800b218 	.word	0x0800b218
 80065e0:	0800b214 	.word	0x0800b214
 80065e4:	0800b21a 	.word	0x0800b21a
 80065e8:	0800b21c 	.word	0x0800b21c
 80065ec:	0800b21e 	.word	0x0800b21e
 80065f0:	0800b220 	.word	0x0800b220
 80065f4:	0800b222 	.word	0x0800b222
 80065f8:	0800b224 	.word	0x0800b224
 80065fc:	0800b226 	.word	0x0800b226
 8006600:	0800b228 	.word	0x0800b228
 8006604:	0800b22a 	.word	0x0800b22a
 8006608:	0800b22c 	.word	0x0800b22c
 800660c:	0800b22e 	.word	0x0800b22e
 8006610:	0800b230 	.word	0x0800b230
 8006614:	0800b232 	.word	0x0800b232
 8006618:	0800b234 	.word	0x0800b234
 800661c:	0800b236 	.word	0x0800b236
 8006620:	0800b238 	.word	0x0800b238
 8006624:	0800b23a 	.word	0x0800b23a
 8006628:	0800b23c 	.word	0x0800b23c
 800662c:	0800b23e 	.word	0x0800b23e
 8006630:	0800b240 	.word	0x0800b240
 8006634:	0800b242 	.word	0x0800b242
 8006638:	0800b244 	.word	0x0800b244
 800663c:	0800b246 	.word	0x0800b246
 8006640:	0800b248 	.word	0x0800b248
 8006644:	0800b24a 	.word	0x0800b24a
 8006648:	0800b24c 	.word	0x0800b24c
 800664c:	0800b24e 	.word	0x0800b24e
 8006650:	0800b250 	.word	0x0800b250
 8006654:	0800b252 	.word	0x0800b252
 8006658:	0800b254 	.word	0x0800b254
 800665c:	0800b256 	.word	0x0800b256
 8006660:	0800b258 	.word	0x0800b258
 8006664:	0800b25a 	.word	0x0800b25a
 8006668:	0800b25c 	.word	0x0800b25c
 800666c:	0800b25e 	.word	0x0800b25e
 8006670:	0800b260 	.word	0x0800b260
 8006674:	0800b262 	.word	0x0800b262
 8006678:	0800b264 	.word	0x0800b264
 800667c:	0800b266 	.word	0x0800b266
 8006680:	2000298c 	.word	0x2000298c
 8006684:	20002e10 	.word	0x20002e10
 8006688:	0800b26a 	.word	0x0800b26a
 800668c:	0800b26c 	.word	0x0800b26c
 8006690:	0800b26e 	.word	0x0800b26e
 8006694:	0800b270 	.word	0x0800b270
 8006698:	0800b272 	.word	0x0800b272
 800669c:	0800b274 	.word	0x0800b274
 80066a0:	0800b276 	.word	0x0800b276
 80066a4:	0800b278 	.word	0x0800b278
 80066a8:	0800b27a 	.word	0x0800b27a
 80066ac:	0800b268 	.word	0x0800b268
 80066b0:	0800b27c 	.word	0x0800b27c

080066b4 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80066ba:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <OSInitHookBegin+0x54>)
 80066bc:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80066be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066c2:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 80066c4:	e007      	b.n	80066d6 <OSInitHookBegin+0x22>
        size--;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	1d1a      	adds	r2, r3, #4
 80066d0:	603a      	str	r2, [r7, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f4      	bne.n	80066c6 <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80066dc:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <OSInitHookBegin+0x58>)
 80066de:	4a0c      	ldr	r2, [pc, #48]	@ (8006710 <OSInitHookBegin+0x5c>)
 80066e0:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <OSInitHookBegin+0x58>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 0307 	bic.w	r3, r3, #7
 80066ea:	461a      	mov	r2, r3
 80066ec:	4b07      	ldr	r3, [pc, #28]	@ (800670c <OSInitHookBegin+0x58>)
 80066ee:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <OSInitHookBegin+0x60>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80066f6:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <OSInitHookBegin+0x64>)
 80066f8:	2240      	movs	r2, #64	@ 0x40
 80066fa:	601a      	str	r2, [r3, #0]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20001670 	.word	0x20001670
 800670c:	20001a70 	.word	0x20001a70
 8006710:	20001a70 	.word	0x20001a70
 8006714:	20001a74 	.word	0x20001a74
 8006718:	20001a78 	.word	0x20001a78

0800671c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0

}
 8006720:	bf00      	nop
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 ffc5 	bl	80086c0 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 ffc3 	bl	80086d2 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8006758:	f001 ffc4 	bl	80086e4 <App_TaskIdleHook>
#endif
}
 800675c:	bf00      	nop
 800675e:	bd80      	pop	{r7, pc}

08006760 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 ffc7 	bl	80086fc <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 800677a:	f001 ffb9 	bl	80086f0 <App_TaskStatHook>
#endif
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b04      	subs	r3, #4
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067ac:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3b04      	subs	r3, #4
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	3b04      	subs	r3, #4
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	4a34      	ldr	r2, [pc, #208]	@ (8006894 <OSTaskStkInit+0x110>)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3b04      	subs	r3, #4
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80067d2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3b04      	subs	r3, #4
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80067e0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80067ee:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3b04      	subs	r3, #4
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80067fc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	3b04      	subs	r3, #4
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	3b04      	subs	r3, #4
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f06f 0202 	mvn.w	r2, #2
 8006816:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3b04      	subs	r3, #4
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8006824:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3b04      	subs	r3, #4
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8006832:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3b04      	subs	r3, #4
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8006840:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	3b04      	subs	r3, #4
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800684e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3b04      	subs	r3, #4
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800685c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	3b04      	subs	r3, #4
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800686a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3b04      	subs	r3, #4
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8006878:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3b04      	subs	r3, #4
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8006886:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 8006888:	697b      	ldr	r3, [r7, #20]
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr
 8006894:	080081d5 	.word	0x080081d5

08006898 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 800689c:	f001 ff37 	bl	800870e <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 80068a0:	bf00      	nop
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 ff34 	bl	800871a <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 80068c0:	f001 ff34 	bl	800872c <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 80068c4:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <OSTimeTickHook+0x2c>)
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <OSTimeTickHook+0x2c>)
 80068ce:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <OSTimeTickHook+0x2c>)
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068d8:	d304      	bcc.n	80068e4 <OSTimeTickHook+0x28>
        OSTmrCtr = 0u;
 80068da:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <OSTimeTickHook+0x2c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 80068e0:	f001 fd0c 	bl	80082fc <OSTmrSignal>
    }
#endif
}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20001a74 	.word	0x20001a74

080068ec <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 80068f0:	f7f9 fc2c 	bl	800014c <CPU_IntDis>
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 80068f4:	f000 f8a2 	bl	8006a3c <OSIntEnter>
    OS_EXIT_CRITICAL();
 80068f8:	f7f9 fc2a 	bl	8000150 <CPU_IntEn>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 80068fc:	f000 f9b0 	bl	8006c60 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8006900:	f000 f8b4 	bl	8006a6c <OSIntExit>
}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}

08006908 <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a06      	ldr	r2, [pc, #24]	@ (800692c <OS_CPU_SysTickInitFreq+0x24>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	0b5b      	lsrs	r3, r3, #13
 800691a:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f807 	bl	8006930 <OS_CPU_SysTickInit>
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	d1b71759 	.word	0xd1b71759

08006930 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8006938:	2340      	movs	r3, #64	@ 0x40
 800693a:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 800693c:	4a11      	ldr	r2, [pc, #68]	@ (8006984 <OS_CPU_SysTickInit+0x54>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3b01      	subs	r3, #1
 8006942:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8006944:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <OS_CPU_SysTickInit+0x58>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006950:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	061b      	lsls	r3, r3, #24
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4313      	orrs	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 800695c:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <OS_CPU_SysTickInit+0x58>)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8006962:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <OS_CPU_SysTickInit+0x5c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a09      	ldr	r2, [pc, #36]	@ (800698c <OS_CPU_SysTickInit+0x5c>)
 8006968:	f043 0305 	orr.w	r3, r3, #5
 800696c:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 800696e:	4b07      	ldr	r3, [pc, #28]	@ (800698c <OS_CPU_SysTickInit+0x5c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a06      	ldr	r2, [pc, #24]	@ (800698c <OS_CPU_SysTickInit+0x5c>)
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	6013      	str	r3, [r2, #0]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	e000e014 	.word	0xe000e014
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	e000e010 	.word	0xe000e010

08006990 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	701a      	strb	r2, [r3, #0]
        return;
 80069ac:	e022      	b.n	80069f4 <OSEventNameSet+0x64>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	220c      	movs	r2, #12
 80069b8:	701a      	strb	r2, [r3, #0]
        return;
 80069ba:	e01b      	b.n	80069f4 <OSEventNameSet+0x64>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80069bc:	4b0f      	ldr	r3, [pc, #60]	@ (80069fc <OSEventNameSet+0x6c>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2212      	movs	r2, #18
 80069c8:	701a      	strb	r2, [r3, #0]
        return;
 80069ca:	e013      	b.n	80069f4 <OSEventNameSet+0x64>
    }
    switch (pevent->OSEventType) {
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d903      	bls.n	80069de <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
             return;
 80069dc:	e00a      	b.n	80069f4 <OSEventNameSet+0x64>
             break;
 80069de:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80069e0:	f7f9 fbb4 	bl	800014c <CPU_IntDis>
    pevent->OSEventName = pname;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80069ea:	f7f9 fbb1 	bl	8000150 <CPU_IntEn>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
}
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20001dd8 	.word	0x20001dd8

08006a00 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8006a04:	f7ff fe56 	bl	80066b4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8006a08:	f000 fb6e 	bl	80070e8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8006a0c:	f000 fbaa 	bl	8007164 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8006a10:	f000 fc24 	bl	800725c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8006a14:	f000 fb1e 	bl	8007054 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8006a18:	f000 fe90 	bl	800773c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8006a1c:	f000 fefe 	bl	800781c <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8006a20:	f000 ff3c 	bl	800789c <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8006a24:	f000 fbce 	bl	80071c4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8006a28:	f000 fbf2 	bl	8007210 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8006a2c:	f001 fc78 	bl	8008320 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8006a30:	f7ff fe74 	bl	800671c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8006a34:	f7ff fd52 	bl	80064dc <OSDebugInit>
#endif
}
 8006a38:	bf00      	nop
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8006a40:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <OSIntEnter+0x28>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d109      	bne.n	8006a5c <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8006a48:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <OSIntEnter+0x2c>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2bff      	cmp	r3, #255	@ 0xff
 8006a4e:	d005      	beq.n	8006a5c <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <OSIntEnter+0x2c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <OSIntEnter+0x2c>)
 8006a5a:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8006a5c:	bf00      	nop
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	20001de8 	.word	0x20001de8
 8006a68:	20001dd8 	.word	0x20001dd8

08006a6c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8006a76:	4b1d      	ldr	r3, [pc, #116]	@ (8006aec <OSIntExit+0x80>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d131      	bne.n	8006ae2 <OSIntExit+0x76>
        OS_ENTER_CRITICAL();
 8006a7e:	f7f9 fb65 	bl	800014c <CPU_IntDis>
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8006a82:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <OSIntExit+0x84>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <OSIntExit+0x2a>
            OSIntNesting--;
 8006a8a:	4b19      	ldr	r3, [pc, #100]	@ (8006af0 <OSIntExit+0x84>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <OSIntExit+0x84>)
 8006a94:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8006a96:	4b16      	ldr	r3, [pc, #88]	@ (8006af0 <OSIntExit+0x84>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11f      	bne.n	8006ade <OSIntExit+0x72>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8006a9e:	4b15      	ldr	r3, [pc, #84]	@ (8006af4 <OSIntExit+0x88>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d11b      	bne.n	8006ade <OSIntExit+0x72>
                OS_SchedNew();
 8006aa6:	f000 fc7f 	bl	80073a8 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8006aaa:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <OSIntExit+0x8c>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b12      	ldr	r3, [pc, #72]	@ (8006afc <OSIntExit+0x90>)
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	4a12      	ldr	r2, [pc, #72]	@ (8006b00 <OSIntExit+0x94>)
 8006ab8:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <OSIntExit+0x8c>)
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	4b11      	ldr	r3, [pc, #68]	@ (8006b04 <OSIntExit+0x98>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00b      	beq.n	8006ade <OSIntExit+0x72>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b00 <OSIntExit+0x94>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006acc:	3201      	adds	r2, #1
 8006ace:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <OSIntExit+0x9c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b08 <OSIntExit+0x9c>)
 8006ad8:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8006ada:	f7f9 fbb8 	bl	800024e <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8006ade:	f7f9 fb37 	bl	8000150 <CPU_IntEn>
    }
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20001de8 	.word	0x20001de8
 8006af0:	20001dd8 	.word	0x20001dd8
 8006af4:	20001dd9 	.word	0x20001dd9
 8006af8:	20001ddb 	.word	0x20001ddb
 8006afc:	20002000 	.word	0x20002000
 8006b00:	20001ff8 	.word	0x20001ff8
 8006b04:	20001dda 	.word	0x20001dda
 8006b08:	20001a7c 	.word	0x20001a7c

08006b0c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006b12:	2300      	movs	r3, #0
 8006b14:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <OSSchedLock+0x40>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d111      	bne.n	8006b42 <OSSchedLock+0x36>
        OS_ENTER_CRITICAL();
 8006b1e:	f7f9 fb15 	bl	800014c <CPU_IntDis>
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8006b22:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <OSSchedLock+0x44>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <OSSchedLock+0x32>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <OSSchedLock+0x48>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2bff      	cmp	r3, #255	@ 0xff
 8006b30:	d005      	beq.n	8006b3e <OSSchedLock+0x32>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8006b32:	4b08      	ldr	r3, [pc, #32]	@ (8006b54 <OSSchedLock+0x48>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <OSSchedLock+0x48>)
 8006b3c:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8006b3e:	f7f9 fb07 	bl	8000150 <CPU_IntEn>
    }
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20001de8 	.word	0x20001de8
 8006b50:	20001dd8 	.word	0x20001dd8
 8006b54:	20001dd9 	.word	0x20001dd9

08006b58 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8006b62:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <OSSchedUnlock+0x5c>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d120      	bne.n	8006bac <OSSchedUnlock+0x54>
        OS_ENTER_CRITICAL();
 8006b6a:	f7f9 faef 	bl	800014c <CPU_IntDis>
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8006b6e:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <OSSchedUnlock+0x60>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d118      	bne.n	8006ba8 <OSSchedUnlock+0x50>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8006b76:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <OSSchedUnlock+0x64>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d011      	beq.n	8006ba2 <OSSchedUnlock+0x4a>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bbc <OSSchedUnlock+0x64>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <OSSchedUnlock+0x64>)
 8006b88:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <OSSchedUnlock+0x64>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <OSSchedUnlock+0x44>
                    OS_EXIT_CRITICAL();
 8006b92:	f7f9 fadd 	bl	8000150 <CPU_IntEn>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8006b96:	f000 fbc7 	bl	8007328 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8006b9a:	e007      	b.n	8006bac <OSSchedUnlock+0x54>
                    OS_EXIT_CRITICAL();
 8006b9c:	f7f9 fad8 	bl	8000150 <CPU_IntEn>
}
 8006ba0:	e004      	b.n	8006bac <OSSchedUnlock+0x54>
                OS_EXIT_CRITICAL();
 8006ba2:	f7f9 fad5 	bl	8000150 <CPU_IntEn>
}
 8006ba6:	e001      	b.n	8006bac <OSSchedUnlock+0x54>
            OS_EXIT_CRITICAL();
 8006ba8:	f7f9 fad2 	bl	8000150 <CPU_IntEn>
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20001de8 	.word	0x20001de8
 8006bb8:	20001dd8 	.word	0x20001dd8
 8006bbc:	20001dd9 	.word	0x20001dd9

08006bc0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <OSStart+0x38>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d113      	bne.n	8006bf4 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8006bcc:	f000 fbec 	bl	80073a8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <OSStart+0x3c>)
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <OSStart+0x40>)
 8006bd6:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8006bd8:	4b08      	ldr	r3, [pc, #32]	@ (8006bfc <OSStart+0x3c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <OSStart+0x44>)
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <OSStart+0x48>)
 8006be6:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8006be8:	4b07      	ldr	r3, [pc, #28]	@ (8006c08 <OSStart+0x48>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a07      	ldr	r2, [pc, #28]	@ (8006c0c <OSStart+0x4c>)
 8006bee:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8006bf0:	f7f9 faed 	bl	80001ce <OSStartHighRdy>
    }
}
 8006bf4:	bf00      	nop
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20001de8 	.word	0x20001de8
 8006bfc:	20001ddb 	.word	0x20001ddb
 8006c00:	20001dda 	.word	0x20001dda
 8006c04:	20002000 	.word	0x20002000
 8006c08:	20001ff8 	.word	0x20001ff8
 8006c0c:	20001ff0 	.word	0x20001ff0

08006c10 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8006c1a:	2002      	movs	r0, #2
 8006c1c:	f001 fb0a 	bl	8008234 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8006c20:	f7f9 fa94 	bl	800014c <CPU_IntDis>
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8006c24:	4b0b      	ldr	r3, [pc, #44]	@ (8006c54 <OSStatInit+0x44>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8006c2a:	f7f9 fa91 	bl	8000150 <CPU_IntEn>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8006c2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006c32:	f001 faff 	bl	8008234 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8006c36:	f7f9 fa89 	bl	800014c <CPU_IntDis>
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8006c3a:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <OSStatInit+0x44>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a06      	ldr	r2, [pc, #24]	@ (8006c58 <OSStatInit+0x48>)
 8006c40:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8006c42:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <OSStatInit+0x4c>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8006c48:	f7f9 fa82 	bl	8000150 <CPU_IntEn>
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20001dec 	.word	0x20001dec
 8006c58:	20001bcc 	.word	0x20001bcc
 8006c5c:	20001bd4 	.word	0x20001bd4

08006c60 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8006c6a:	f7ff fe27 	bl	80068bc <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8006c6e:	f7f9 fa6d 	bl	800014c <CPU_IntDis>
    OSTime++;
 8006c72:	4b43      	ldr	r3, [pc, #268]	@ (8006d80 <OSTimeTick+0x120>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	4a41      	ldr	r2, [pc, #260]	@ (8006d80 <OSTimeTick+0x120>)
 8006c7a:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8006c7c:	f7f9 fa68 	bl	8000150 <CPU_IntEn>
#endif
    if (OSRunning == OS_TRUE) {
 8006c80:	4b40      	ldr	r3, [pc, #256]	@ (8006d84 <OSTimeTick+0x124>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d177      	bne.n	8006d78 <OSTimeTick+0x118>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8006c88:	4b3f      	ldr	r3, [pc, #252]	@ (8006d88 <OSTimeTick+0x128>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d00c      	beq.n	8006caa <OSTimeTick+0x4a>
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	dc10      	bgt.n	8006cb6 <OSTimeTick+0x56>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <OSTimeTick+0x3e>
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d003      	beq.n	8006ca4 <OSTimeTick+0x44>
 8006c9c:	e00b      	b.n	8006cb6 <OSTimeTick+0x56>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
                 break;
 8006ca2:	e00e      	b.n	8006cc2 <OSTimeTick+0x62>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	72fb      	strb	r3, [r7, #11]
                 break;
 8006ca8:	e00b      	b.n	8006cc2 <OSTimeTick+0x62>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8006caa:	2301      	movs	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8006cae:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <OSTimeTick+0x128>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
                 break;
 8006cb4:	e005      	b.n	8006cc2 <OSTimeTick+0x62>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8006cba:	4b33      	ldr	r3, [pc, #204]	@ (8006d88 <OSTimeTick+0x128>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
                 break;
 8006cc0:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d056      	beq.n	8006d76 <OSTimeTick+0x116>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8006cc8:	4b30      	ldr	r3, [pc, #192]	@ (8006d8c <OSTimeTick+0x12c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8006cce:	e04c      	b.n	8006d6a <OSTimeTick+0x10a>
            OS_ENTER_CRITICAL();
 8006cd0:	f7f9 fa3c 	bl	800014c <CPU_IntDis>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d041      	beq.n	8006d60 <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	631a      	str	r2, [r3, #48]	@ 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d138      	bne.n	8006d60 <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cf4:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d02:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006d16:	e003      	b.n	8006d20 <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d118      	bne.n	8006d60 <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006d34:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <OSTimeTick+0x130>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	4b14      	ldr	r3, [pc, #80]	@ (8006d90 <OSTimeTick+0x130>)
 8006d3e:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d46:	461a      	mov	r2, r3
 8006d48:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <OSTimeTick+0x134>)
 8006d4a:	5c9a      	ldrb	r2, [r3, r2]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <OSTimeTick+0x134>)
 8006d5e:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8006d66:	f7f9 f9f3 	bl	8000150 <CPU_IntEn>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d72:	d1ad      	bne.n	8006cd0 <OSTimeTick+0x70>
 8006d74:	e000      	b.n	8006d78 <OSTimeTick+0x118>
            return;
 8006d76:	bf00      	nop
        }
    }
}
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20002978 	.word	0x20002978
 8006d84:	20001de8 	.word	0x20001de8
 8006d88:	20002890 	.word	0x20002890
 8006d8c:	20001ffc 	.word	0x20001ffc
 8006d90:	20001ddc 	.word	0x20001ddc
 8006d94:	20001de0 	.word	0x20001de0

08006d98 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
}
 8006d9c:	bf00      	nop
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	460b      	mov	r3, r1
 8006db4:	71fb      	strb	r3, [r7, #7]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	7a9b      	ldrb	r3, [r3, #10]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <OS_EventTaskRdy+0xd4>)
 8006dc2:	5c9b      	ldrb	r3, [r3, r2]
 8006dc4:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	7adb      	ldrb	r3, [r3, #11]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b29      	ldr	r3, [pc, #164]	@ (8006e78 <OS_EventTaskRdy+0xd4>)
 8006dd2:	5c9b      	ldrb	r3, [r3, r2]
 8006dd4:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	7dbb      	ldrb	r3, [r7, #22]
 8006dde:	4413      	add	r3, r2
 8006de0:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8006de2:	7d7b      	ldrb	r3, [r7, #21]
 8006de4:	4a25      	ldr	r2, [pc, #148]	@ (8006e7c <OS_EventTaskRdy+0xd8>)
 8006de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dea:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	@ 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	625a      	str	r2, [r3, #36]	@ 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4013      	ands	r3, r2
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	79ba      	ldrb	r2, [r7, #6]
 8006e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d113      	bne.n	8006e4c <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006e2a:	4b15      	ldr	r3, [pc, #84]	@ (8006e80 <OS_EventTaskRdy+0xdc>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <OS_EventTaskRdy+0xdc>)
 8006e34:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	4a12      	ldr	r2, [pc, #72]	@ (8006e84 <OS_EventTaskRdy+0xe0>)
 8006e3a:	5cd1      	ldrb	r1, [r2, r3]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	b2d1      	uxtb	r1, r2
 8006e48:	4a0e      	ldr	r2, [pc, #56]	@ (8006e84 <OS_EventTaskRdy+0xe0>)
 8006e4a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	6938      	ldr	r0, [r7, #16]
 8006e50:	f000 f870 	bl	8006f34 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d008      	beq.n	8006e6e <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4619      	mov	r1, r3
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f000 f898 	bl	8006f98 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8006e6e:	7d7b      	ldrb	r3, [r7, #21]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	0800b280 	.word	0x0800b280
 8006e7c:	20002000 	.word	0x20002000
 8006e80:	20001ddc 	.word	0x20001ddc
 8006e84:	20001de0 	.word	0x20001de0

08006e88 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8006e90:	4b25      	ldr	r3, [pc, #148]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8006e98:	4b23      	ldr	r3, [pc, #140]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	7ada      	ldrb	r2, [r3, #11]
 8006ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006eb0:	491d      	ldr	r1, [pc, #116]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006eb2:	6809      	ldr	r1, [r1, #0]
 8006eb4:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	440b      	add	r3, r1
 8006ec0:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7a9a      	ldrb	r2, [r3, #10]
 8006ec6:	4b18      	ldr	r3, [pc, #96]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8006ed6:	4b14      	ldr	r3, [pc, #80]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ede:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4a12      	ldr	r2, [pc, #72]	@ (8006f2c <OS_EventTaskWait+0xa4>)
 8006ee4:	5cd1      	ldrb	r1, [r2, r3]
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	400a      	ands	r2, r1
 8006ef6:	b2d1      	uxtb	r1, r2
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <OS_EventTaskWait+0xa4>)
 8006efa:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	4a0b      	ldr	r2, [pc, #44]	@ (8006f2c <OS_EventTaskWait+0xa4>)
 8006f00:	5cd3      	ldrb	r3, [r2, r3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <OS_EventTaskWait+0xa0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <OS_EventTaskWait+0xa8>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	4013      	ands	r3, r2
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	4b05      	ldr	r3, [pc, #20]	@ (8006f30 <OS_EventTaskWait+0xa8>)
 8006f1c:	701a      	strb	r2, [r3, #0]
    }
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr
 8006f28:	20001ff0 	.word	0x20001ff0
 8006f2c:	20001de0 	.word	0x20001de0
 8006f30:	20001ddc 	.word	0x20001ddc

08006f34 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f44:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	7ad9      	ldrb	r1, [r3, #11]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006f54:	43db      	mvns	r3, r3
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	b2d1      	uxtb	r1, r2
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4413      	add	r3, r2
 8006f62:	460a      	mov	r2, r1
 8006f64:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	7adb      	ldrb	r3, [r3, #11]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	7a9a      	ldrb	r2, [r3, #10]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	4013      	ands	r3, r2
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	61da      	str	r2, [r3, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fa8:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fb0:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006fb8:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8006fc4:	e022      	b.n	800700c <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	7ad9      	ldrb	r1, [r3, #11]
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	400a      	ands	r2, r1
 8006fd8:	b2d1      	uxtb	r1, r2
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	460a      	mov	r2, r1
 8006fe0:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	7adb      	ldrb	r3, [r3, #11]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d108      	bne.n	8007000 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	7a9a      	ldrb	r2, [r3, #10]
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	3304      	adds	r3, #4
 8007004:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1d9      	bne.n	8006fc6 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
 8007030:	e007      	b.n	8007042 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	2200      	movs	r2, #0
 800703a:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	3301      	adds	r3, #1
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b07      	cmp	r3, #7
 8007046:	d9f4      	bls.n	8007032 <OS_EventWaitListInit+0x14>
    }
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800705a:	21f0      	movs	r1, #240	@ 0xf0
 800705c:	481f      	ldr	r0, [pc, #124]	@ (80070dc <OS_InitEventList+0x88>)
 800705e:	f000 f94b 	bl	80072f8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007062:	2300      	movs	r3, #0
 8007064:	81fb      	strh	r3, [r7, #14]
 8007066:	e01e      	b.n	80070a6 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	3301      	adds	r3, #1
 800706c:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800706e:	89fa      	ldrh	r2, [r7, #14]
 8007070:	4613      	mov	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	4413      	add	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4a18      	ldr	r2, [pc, #96]	@ (80070dc <OS_InitEventList+0x88>)
 800707a:	4413      	add	r3, r2
 800707c:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4a14      	ldr	r2, [pc, #80]	@ (80070dc <OS_InitEventList+0x88>)
 800708a:	4413      	add	r3, r2
 800708c:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4a10      	ldr	r2, [pc, #64]	@ (80070e0 <OS_InitEventList+0x8c>)
 800709e:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	3301      	adds	r3, #1
 80070a4:	81fb      	strh	r3, [r7, #14]
 80070a6:	89fb      	ldrh	r3, [r7, #14]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d9dd      	bls.n	8007068 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 80070ac:	89fa      	ldrh	r2, [r7, #14]
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	4a09      	ldr	r2, [pc, #36]	@ (80070dc <OS_InitEventList+0x88>)
 80070b8:	4413      	add	r3, r2
 80070ba:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4a05      	ldr	r2, [pc, #20]	@ (80070e0 <OS_InitEventList+0x8c>)
 80070cc:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 80070ce:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <OS_InitEventList+0x90>)
 80070d0:	4a02      	ldr	r2, [pc, #8]	@ (80070dc <OS_InitEventList+0x88>)
 80070d2:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20001a84 	.word	0x20001a84
 80070e0:	0800b134 	.word	0x0800b134
 80070e4:	20001a80 	.word	0x20001a80

080070e8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <OS_InitMisc+0x50>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 80070f2:	4b12      	ldr	r3, [pc, #72]	@ (800713c <OS_InitMisc+0x54>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 80070f8:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <OS_InitMisc+0x58>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 80070fe:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <OS_InitMisc+0x5c>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8007104:	4b10      	ldr	r3, [pc, #64]	@ (8007148 <OS_InitMisc+0x60>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800710a:	4b10      	ldr	r3, [pc, #64]	@ (800714c <OS_InitMisc+0x64>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8007110:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <OS_InitMisc+0x68>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8007116:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <OS_InitMisc+0x6c>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 800711c:	4b0e      	ldr	r3, [pc, #56]	@ (8007158 <OS_InitMisc+0x70>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8007122:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <OS_InitMisc+0x74>)
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8007128:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <OS_InitMisc+0x78>)
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
#endif
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20002978 	.word	0x20002978
 800713c:	20001dd8 	.word	0x20001dd8
 8007140:	20001dd9 	.word	0x20001dd9
 8007144:	20001de9 	.word	0x20001de9
 8007148:	20001de8 	.word	0x20001de8
 800714c:	20001a7c 	.word	0x20001a7c
 8007150:	20001dec 	.word	0x20001dec
 8007154:	20001bd0 	.word	0x20001bd0
 8007158:	20001bcc 	.word	0x20001bcc
 800715c:	20001bd4 	.word	0x20001bd4
 8007160:	20002974 	.word	0x20002974

08007164 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800716a:	4b10      	ldr	r3, [pc, #64]	@ (80071ac <OS_InitRdyList+0x48>)
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8007170:	2300      	movs	r3, #0
 8007172:	71fb      	strb	r3, [r7, #7]
 8007174:	e006      	b.n	8007184 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	4a0d      	ldr	r2, [pc, #52]	@ (80071b0 <OS_InitRdyList+0x4c>)
 800717a:	2100      	movs	r1, #0
 800717c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	3301      	adds	r3, #1
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	2b07      	cmp	r3, #7
 8007188:	d9f5      	bls.n	8007176 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800718a:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <OS_InitRdyList+0x50>)
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8007190:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <OS_InitRdyList+0x54>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <OS_InitRdyList+0x58>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 800719c:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <OS_InitRdyList+0x5c>)
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr
 80071ac:	20001ddc 	.word	0x20001ddc
 80071b0:	20001de0 	.word	0x20001de0
 80071b4:	20001dda 	.word	0x20001dda
 80071b8:	20001ddb 	.word	0x20001ddb
 80071bc:	20001ff8 	.word	0x20001ff8
 80071c0:	20001ff0 	.word	0x20001ff0

080071c4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 80071ca:	2303      	movs	r3, #3
 80071cc:	9304      	str	r3, [sp, #16]
 80071ce:	2300      	movs	r3, #0
 80071d0:	9303      	str	r3, [sp, #12]
 80071d2:	2380      	movs	r3, #128	@ 0x80
 80071d4:	9302      	str	r3, [sp, #8]
 80071d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <OS_InitTaskIdle+0x3c>)
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	233f      	movs	r3, #63	@ 0x3f
 80071e2:	4a08      	ldr	r2, [pc, #32]	@ (8007204 <OS_InitTaskIdle+0x40>)
 80071e4:	2100      	movs	r1, #0
 80071e6:	4808      	ldr	r0, [pc, #32]	@ (8007208 <OS_InitTaskIdle+0x44>)
 80071e8:	f000 fcf2 	bl	8007bd0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80071ec:	1dfb      	adds	r3, r7, #7
 80071ee:	461a      	mov	r2, r3
 80071f0:	4906      	ldr	r1, [pc, #24]	@ (800720c <OS_InitTaskIdle+0x48>)
 80071f2:	203f      	movs	r0, #63	@ 0x3f
 80071f4:	f000 fe40 	bl	8007e78 <OSTaskNameSet>
#endif
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20001df0 	.word	0x20001df0
 8007204:	20001fec 	.word	0x20001fec
 8007208:	080073f1 	.word	0x080073f1
 800720c:	0800b138 	.word	0x0800b138

08007210 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8007216:	2303      	movs	r3, #3
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	2300      	movs	r3, #0
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	2380      	movs	r3, #128	@ 0x80
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <OS_InitTaskStat+0x3c>)
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	233e      	movs	r3, #62	@ 0x3e
 800722e:	4a08      	ldr	r2, [pc, #32]	@ (8007250 <OS_InitTaskStat+0x40>)
 8007230:	2100      	movs	r1, #0
 8007232:	4808      	ldr	r0, [pc, #32]	@ (8007254 <OS_InitTaskStat+0x44>)
 8007234:	f000 fccc 	bl	8007bd0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8007238:	1dfb      	adds	r3, r7, #7
 800723a:	461a      	mov	r2, r3
 800723c:	4906      	ldr	r1, [pc, #24]	@ (8007258 <OS_InitTaskStat+0x48>)
 800723e:	203e      	movs	r0, #62	@ 0x3e
 8007240:	f000 fe1a 	bl	8007e78 <OSTaskNameSet>
#endif
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20001bd8 	.word	0x20001bd8
 8007250:	20001dd4 	.word	0x20001dd4
 8007254:	0800741d 	.word	0x0800741d
 8007258:	0800b148 	.word	0x0800b148

0800725c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8007262:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 8007266:	481f      	ldr	r0, [pc, #124]	@ (80072e4 <OS_InitTCBList+0x88>)
 8007268:	f000 f846 	bl	80072f8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800726c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007270:	481d      	ldr	r0, [pc, #116]	@ (80072e8 <OS_InitTCBList+0x8c>)
 8007272:	f000 f841 	bl	80072f8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
 800727a:	e019      	b.n	80072b0 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	3301      	adds	r3, #1
 8007280:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2258      	movs	r2, #88	@ 0x58
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	4a16      	ldr	r2, [pc, #88]	@ (80072e4 <OS_InitTCBList+0x88>)
 800728c:	4413      	add	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2258      	movs	r2, #88	@ 0x58
 8007294:	fb02 f303 	mul.w	r3, r2, r3
 8007298:	4a12      	ldr	r2, [pc, #72]	@ (80072e4 <OS_InitTCBList+0x88>)
 800729a:	4413      	add	r3, r2
 800729c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <OS_InitTCBList+0x90>)
 80072a8:	651a      	str	r2, [r3, #80]	@ 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	3301      	adds	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b14      	cmp	r3, #20
 80072b4:	d9e2      	bls.n	800727c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2258      	movs	r2, #88	@ 0x58
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	4a09      	ldr	r2, [pc, #36]	@ (80072e4 <OS_InitTCBList+0x88>)
 80072c0:	4413      	add	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a07      	ldr	r2, [pc, #28]	@ (80072ec <OS_InitTCBList+0x90>)
 80072ce:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 80072d0:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <OS_InitTCBList+0x94>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 80072d6:	4b07      	ldr	r3, [pc, #28]	@ (80072f4 <OS_InitTCBList+0x98>)
 80072d8:	4a02      	ldr	r2, [pc, #8]	@ (80072e4 <OS_InitTCBList+0x88>)
 80072da:	601a      	str	r2, [r3, #0]
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20002100 	.word	0x20002100
 80072e8:	20002000 	.word	0x20002000
 80072ec:	0800b134 	.word	0x0800b134
 80072f0:	20001ffc 	.word	0x20001ffc
 80072f4:	20001ff4 	.word	0x20001ff4

080072f8 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007304:	e007      	b.n	8007316 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
        size--;
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	3b01      	subs	r3, #1
 8007314:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f4      	bne.n	8007306 <OS_MemClr+0xe>
    }
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8007332:	f7f8 ff0b 	bl	800014c <CPU_IntDis>
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <OS_Sched+0x64>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11f      	bne.n	800737e <OS_Sched+0x56>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 800733e:	4b14      	ldr	r3, [pc, #80]	@ (8007390 <OS_Sched+0x68>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d11b      	bne.n	800737e <OS_Sched+0x56>
            OS_SchedNew();
 8007346:	f000 f82f 	bl	80073a8 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800734a:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <OS_Sched+0x6c>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	4b11      	ldr	r3, [pc, #68]	@ (8007398 <OS_Sched+0x70>)
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	4a11      	ldr	r2, [pc, #68]	@ (800739c <OS_Sched+0x74>)
 8007358:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800735a:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <OS_Sched+0x6c>)
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	4b10      	ldr	r3, [pc, #64]	@ (80073a0 <OS_Sched+0x78>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d00b      	beq.n	800737e <OS_Sched+0x56>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <OS_Sched+0x74>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800736c:	3201      	adds	r2, #1
 800736e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8007370:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <OS_Sched+0x7c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	4a0b      	ldr	r2, [pc, #44]	@ (80073a4 <OS_Sched+0x7c>)
 8007378:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 800737a:	f7f8 ff68 	bl	800024e <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 800737e:	f7f8 fee7 	bl	8000150 <CPU_IntEn>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20001dd8 	.word	0x20001dd8
 8007390:	20001dd9 	.word	0x20001dd9
 8007394:	20001ddb 	.word	0x20001ddb
 8007398:	20002000 	.word	0x20002000
 800739c:	20001ff8 	.word	0x20001ff8
 80073a0:	20001dda 	.word	0x20001dda
 80073a4:	20001a7c 	.word	0x20001a7c

080073a8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 80073ae:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <OS_SchedNew+0x38>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <OS_SchedNew+0x3c>)
 80073b6:	5c9b      	ldrb	r3, [r3, r2]
 80073b8:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	4909      	ldr	r1, [pc, #36]	@ (80073e8 <OS_SchedNew+0x40>)
 80073c4:	5ccb      	ldrb	r3, [r1, r3]
 80073c6:	4619      	mov	r1, r3
 80073c8:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <OS_SchedNew+0x3c>)
 80073ca:	5c5b      	ldrb	r3, [r3, r1]
 80073cc:	4413      	add	r3, r2
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <OS_SchedNew+0x44>)
 80073d2:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20001ddc 	.word	0x20001ddc
 80073e4:	0800b280 	.word	0x0800b280
 80073e8:	20001de0 	.word	0x20001de0
 80073ec:	20001ddb 	.word	0x20001ddb

080073f0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80073fc:	f7f8 fea6 	bl	800014c <CPU_IntDis>
        OSIdleCtr++;
 8007400:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <OS_TaskIdle+0x28>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a04      	ldr	r2, [pc, #16]	@ (8007418 <OS_TaskIdle+0x28>)
 8007408:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800740a:	f7f8 fea1 	bl	8000150 <CPU_IntEn>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800740e:	f7ff f9a1 	bl	8006754 <OSTaskIdleHook>
    for (;;) {
 8007412:	bf00      	nop
 8007414:	e7f2      	b.n	80073fc <OS_TaskIdle+0xc>
 8007416:	bf00      	nop
 8007418:	20001dec 	.word	0x20001dec

0800741c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8007428:	e003      	b.n	8007432 <OS_TaskStat+0x16>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 800742a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800742e:	f000 ff01 	bl	8008234 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8007432:	4b2d      	ldr	r3, [pc, #180]	@ (80074e8 <OS_TaskStat+0xcc>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f7      	beq.n	800742a <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 800743a:	4b2c      	ldr	r3, [pc, #176]	@ (80074ec <OS_TaskStat+0xd0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2c      	ldr	r2, [pc, #176]	@ (80074f0 <OS_TaskStat+0xd4>)
 8007440:	fba2 2303 	umull	r2, r3, r2, r3
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	4a29      	ldr	r2, [pc, #164]	@ (80074ec <OS_TaskStat+0xd0>)
 8007448:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 800744a:	4b28      	ldr	r3, [pc, #160]	@ (80074ec <OS_TaskStat+0xd0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <OS_TaskStat+0x42>
        OSCPUUsage = 0u;
 8007452:	4b28      	ldr	r3, [pc, #160]	@ (80074f4 <OS_TaskStat+0xd8>)
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8007458:	20ff      	movs	r0, #255	@ 0xff
 800745a:	f000 fe3d 	bl	80080d8 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 800745e:	f7f8 fe75 	bl	800014c <CPU_IntDis>
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8007462:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <OS_TaskStat+0xd0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2264      	movs	r2, #100	@ 0x64
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	4a22      	ldr	r2, [pc, #136]	@ (80074f8 <OS_TaskStat+0xdc>)
 800746e:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8007470:	f7f8 fe6e 	bl	8000150 <CPU_IntEn>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8007474:	2001      	movs	r0, #1
 8007476:	f000 fedd 	bl	8008234 <OSTimeDly>

        OS_ENTER_CRITICAL();
 800747a:	f7f8 fe67 	bl	800014c <CPU_IntDis>
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 800747e:	4b1e      	ldr	r3, [pc, #120]	@ (80074f8 <OS_TaskStat+0xdc>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8007484:	f7f8 fe64 	bl	8000150 <CPU_IntEn>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8007488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800748c:	f000 fed2 	bl	8008234 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8007490:	f7f8 fe5c 	bl	800014c <CPU_IntDis>
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 8007494:	4b18      	ldr	r3, [pc, #96]	@ (80074f8 <OS_TaskStat+0xdc>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a18      	ldr	r2, [pc, #96]	@ (80074fc <OS_TaskStat+0xe0>)
 800749a:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800749c:	f7f8 fe58 	bl	8000150 <CPU_IntEn>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 80074a0:	4b16      	ldr	r3, [pc, #88]	@ (80074fc <OS_TaskStat+0xe0>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <OS_TaskStat+0xd0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 80074b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db03      	blt.n	80074c6 <OS_TaskStat+0xaa>
            OSCPUUsage   = (INT8U)usage;
 80074be:	7afa      	ldrb	r2, [r7, #11]
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <OS_TaskStat+0xd8>)
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e00a      	b.n	80074dc <OS_TaskStat+0xc0>
        } else {
            OSCPUUsage   = 0u;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <OS_TaskStat+0xd8>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <OS_TaskStat+0xe0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a07      	ldr	r2, [pc, #28]	@ (80074f0 <OS_TaskStat+0xd4>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	4a04      	ldr	r2, [pc, #16]	@ (80074ec <OS_TaskStat+0xd0>)
 80074da:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 80074dc:	f7ff f94b 	bl	8006776 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 80074e0:	f000 f80e 	bl	8007500 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80074e4:	e7c6      	b.n	8007474 <OS_TaskStat+0x58>
 80074e6:	bf00      	nop
 80074e8:	20001bd4 	.word	0x20001bd4
 80074ec:	20001bcc 	.word	0x20001bcc
 80074f0:	51eb851f 	.word	0x51eb851f
 80074f4:	20001bc8 	.word	0x20001bc8
 80074f8:	20001dec 	.word	0x20001dec
 80074fc:	20001bd0 	.word	0x20001bd0

08007500 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
 800750a:	e023      	b.n	8007554 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 800750c:	463a      	mov	r2, r7
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fd78 	bl	8008008 <OSTaskStkChk>
 8007518:	4603      	mov	r3, r0
 800751a:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d115      	bne.n	800754e <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	4a0f      	ldr	r2, [pc, #60]	@ (8007564 <OS_TaskStatStkChk+0x64>)
 8007526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752a:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d00a      	beq.n	800754e <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	649a      	str	r2, [r3, #72]	@ 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	3301      	adds	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	2b3f      	cmp	r3, #63	@ 0x3f
 8007558:	d9d8      	bls.n	800750c <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20002000 	.word	0x20002000

08007568 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	461a      	mov	r2, r3
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	4613      	mov	r3, r2
 800757a:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8007580:	f7f8 fde4 	bl	800014c <CPU_IntDis>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8007584:	4b66      	ldr	r3, [pc, #408]	@ (8007720 <OS_TCBInit+0x1b8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80c0 	beq.w	8007712 <OS_TCBInit+0x1aa>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	4a62      	ldr	r2, [pc, #392]	@ (8007720 <OS_TCBInit+0x1b8>)
 8007598:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800759a:	f7f8 fdd9 	bl	8000150 <CPU_IntEn>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2200      	movs	r2, #0
 80075c0:	631a      	str	r2, [r3, #48]	@ 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075c6:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075cc:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80075d8:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	89ba      	ldrh	r2, [r7, #12]
 80075de:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	08db      	lsrs	r3, r3, #3
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007608:	461a      	mov	r2, r3
 800760a:	2301      	movs	r3, #1
 800760c:	4093      	lsls	r3, r2
 800760e:	b2da      	uxtb	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800761c:	461a      	mov	r2, r3
 800761e:	2301      	movs	r3, #1
 8007620:	4093      	lsls	r3, r2
 8007622:	b2da      	uxtb	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2200      	movs	r2, #0
 800762e:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2200      	movs	r2, #0
 8007634:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2200      	movs	r2, #0
 800763a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2200      	movs	r2, #0
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	63da      	str	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2200      	movs	r2, #0
 8007658:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4a30      	ldr	r2, [pc, #192]	@ (8007724 <OS_TCBInit+0x1bc>)
 8007664:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8007666:	2300      	movs	r3, #0
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e009      	b.n	8007680 <OS_TCBInit+0x118>
            ptcb->OSTCBRegTbl[i] = 0u;
 800766c:	7ffb      	ldrb	r3, [r7, #31]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	3314      	adds	r3, #20
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	3301      	adds	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	7ffb      	ldrb	r3, [r7, #31]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f2      	beq.n	800766c <OS_TCBInit+0x104>
        }
#endif

        OSTCBInitHook(ptcb);
 8007686:	6978      	ldr	r0, [r7, #20]
 8007688:	f7ff f90c 	bl	80068a4 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 800768c:	f7f8 fd5e 	bl	800014c <CPU_IntDis>
        OSTCBPrioTbl[prio] = ptcb;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	4925      	ldr	r1, [pc, #148]	@ (8007728 <OS_TCBInit+0x1c0>)
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 800769a:	f7f8 fd59 	bl	8000150 <CPU_IntEn>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800769e:	6978      	ldr	r0, [r7, #20]
 80076a0:	f7ff f842 	bl	8006728 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80076a4:	f7f8 fd52 	bl	800014c <CPU_IntDis>
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 80076a8:	4b20      	ldr	r3, [pc, #128]	@ (800772c <OS_TCBInit+0x1c4>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2200      	movs	r2, #0
 80076b4:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80076b6:	4b1d      	ldr	r3, [pc, #116]	@ (800772c <OS_TCBInit+0x1c4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <OS_TCBInit+0x15e>
            OSTCBList->OSTCBPrev = ptcb;
 80076be:	4b1b      	ldr	r3, [pc, #108]	@ (800772c <OS_TCBInit+0x1c4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80076c6:	4a19      	ldr	r2, [pc, #100]	@ (800772c <OS_TCBInit+0x1c4>)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80076d2:	4b17      	ldr	r3, [pc, #92]	@ (8007730 <OS_TCBInit+0x1c8>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <OS_TCBInit+0x1c8>)
 80076dc:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076e4:	461a      	mov	r2, r3
 80076e6:	4b13      	ldr	r3, [pc, #76]	@ (8007734 <OS_TCBInit+0x1cc>)
 80076e8:	5c9a      	ldrb	r2, [r3, r2]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 80076f6:	4313      	orrs	r3, r2
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007734 <OS_TCBInit+0x1cc>)
 80076fc:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80076fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <OS_TCBInit+0x1d0>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	b2da      	uxtb	r2, r3
 8007706:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <OS_TCBInit+0x1d0>)
 8007708:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 800770a:	f7f8 fd21 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_NONE);
 800770e:	2300      	movs	r3, #0
 8007710:	e002      	b.n	8007718 <OS_TCBInit+0x1b0>
    }
    OS_EXIT_CRITICAL();
 8007712:	f7f8 fd1d 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8007716:	2342      	movs	r3, #66	@ 0x42
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20001ff4 	.word	0x20001ff4
 8007724:	0800b134 	.word	0x0800b134
 8007728:	20002000 	.word	0x20002000
 800772c:	20001ffc 	.word	0x20001ffc
 8007730:	20001ddc 	.word	0x20001ddc
 8007734:	20001de0 	.word	0x20001de0
 8007738:	20001de9 	.word	0x20001de9

0800773c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8007742:	2150      	movs	r1, #80	@ 0x50
 8007744:	481b      	ldr	r0, [pc, #108]	@ (80077b4 <OS_FlagInit+0x78>)
 8007746:	f7ff fdd7 	bl	80072f8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800774a:	2300      	movs	r3, #0
 800774c:	81fb      	strh	r3, [r7, #14]
 800774e:	e018      	b.n	8007782 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8007750:	89fb      	ldrh	r3, [r7, #14]
 8007752:	3301      	adds	r3, #1
 8007754:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8007756:	89fb      	ldrh	r3, [r7, #14]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	4a16      	ldr	r2, [pc, #88]	@ (80077b4 <OS_FlagInit+0x78>)
 800775c:	4413      	add	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	4a13      	ldr	r2, [pc, #76]	@ (80077b4 <OS_FlagInit+0x78>)
 8007766:	4413      	add	r3, r2
 8007768:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a0f      	ldr	r2, [pc, #60]	@ (80077b8 <OS_FlagInit+0x7c>)
 800777a:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800777c:	89fb      	ldrh	r3, [r7, #14]
 800777e:	3301      	adds	r3, #1
 8007780:	81fb      	strh	r3, [r7, #14]
 8007782:	89fb      	ldrh	r3, [r7, #14]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d9e3      	bls.n	8007750 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8007788:	89fb      	ldrh	r3, [r7, #14]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	4a09      	ldr	r2, [pc, #36]	@ (80077b4 <OS_FlagInit+0x78>)
 800778e:	4413      	add	r3, r2
 8007790:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a05      	ldr	r2, [pc, #20]	@ (80077b8 <OS_FlagInit+0x7c>)
 80077a2:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80077a4:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <OS_FlagInit+0x80>)
 80077a6:	4a03      	ldr	r2, [pc, #12]	@ (80077b4 <OS_FlagInit+0x78>)
 80077a8:	601a      	str	r2, [r3, #0]
#endif
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20001b74 	.word	0x20001b74
 80077b8:	0800b158 	.word	0x0800b158
 80077bc:	20001bc4 	.word	0x20001bc4

080077c0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10c      	bne.n	80077f4 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00c      	beq.n	8007806 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2200      	movs	r2, #0
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	e008      	b.n	8007806 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8007822:	2178      	movs	r1, #120	@ 0x78
 8007824:	481a      	ldr	r0, [pc, #104]	@ (8007890 <OS_MemInit+0x74>)
 8007826:	f7ff fd67 	bl	80072f8 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800782a:	2300      	movs	r3, #0
 800782c:	80fb      	strh	r3, [r7, #6]
 800782e:	e017      	b.n	8007860 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	4613      	mov	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4413      	add	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	4a15      	ldr	r2, [pc, #84]	@ (8007890 <OS_MemInit+0x74>)
 800783c:	4413      	add	r3, r2
 800783e:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4a10      	ldr	r2, [pc, #64]	@ (8007890 <OS_MemInit+0x74>)
 800784e:	441a      	add	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	4a0f      	ldr	r2, [pc, #60]	@ (8007894 <OS_MemInit+0x78>)
 8007858:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	3301      	adds	r3, #1
 800785e:	80fb      	strh	r3, [r7, #6]
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d9e4      	bls.n	8007830 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	4613      	mov	r3, r2
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	4413      	add	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	4a07      	ldr	r2, [pc, #28]	@ (8007890 <OS_MemInit+0x74>)
 8007872:	4413      	add	r3, r2
 8007874:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	4a05      	ldr	r2, [pc, #20]	@ (8007894 <OS_MemInit+0x78>)
 8007880:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <OS_MemInit+0x7c>)
 8007884:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <OS_MemInit+0x74>)
 8007886:	601a      	str	r2, [r3, #0]
#endif
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20002898 	.word	0x20002898
 8007894:	0800b15c 	.word	0x0800b15c
 8007898:	20002894 	.word	0x20002894

0800789c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80078a2:	2160      	movs	r1, #96	@ 0x60
 80078a4:	4819      	ldr	r0, [pc, #100]	@ (800790c <OS_QInit+0x70>)
 80078a6:	f7ff fd27 	bl	80072f8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80078aa:	2300      	movs	r3, #0
 80078ac:	81fb      	strh	r3, [r7, #14]
 80078ae:	e018      	b.n	80078e2 <OS_QInit+0x46>
        ix_next = ix + 1u;
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	3301      	adds	r3, #1
 80078b4:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 80078b6:	89fa      	ldrh	r2, [r7, #14]
 80078b8:	4613      	mov	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4413      	add	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4a12      	ldr	r2, [pc, #72]	@ (800790c <OS_QInit+0x70>)
 80078c2:	4413      	add	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 80078c6:	88fa      	ldrh	r2, [r7, #6]
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4a0e      	ldr	r2, [pc, #56]	@ (800790c <OS_QInit+0x70>)
 80078d2:	4413      	add	r3, r2
 80078d4:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80078dc:	89fb      	ldrh	r3, [r7, #14]
 80078de:	3301      	adds	r3, #1
 80078e0:	81fb      	strh	r3, [r7, #14]
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d9e3      	bls.n	80078b0 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 80078e8:	89fa      	ldrh	r2, [r7, #14]
 80078ea:	4613      	mov	r3, r2
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4413      	add	r3, r2
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	4a06      	ldr	r2, [pc, #24]	@ (800790c <OS_QInit+0x70>)
 80078f4:	4413      	add	r3, r2
 80078f6:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 80078fe:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <OS_QInit+0x74>)
 8007900:	4a02      	ldr	r2, [pc, #8]	@ (800790c <OS_QInit+0x70>)
 8007902:	601a      	str	r2, [r3, #0]
#endif
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20002914 	.word	0x20002914
 8007910:	20002910 	.word	0x20002910

08007914 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8007922:	4b16      	ldr	r3, [pc, #88]	@ (800797c <OSSemCreate+0x68>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800792a:	2300      	movs	r3, #0
 800792c:	e022      	b.n	8007974 <OSSemCreate+0x60>
    }
    OS_ENTER_CRITICAL();
 800792e:	f7f8 fc0d 	bl	800014c <CPU_IntDis>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8007932:	4b13      	ldr	r3, [pc, #76]	@ (8007980 <OSSemCreate+0x6c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8007938:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <OSSemCreate+0x6c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <OSSemCreate+0x36>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8007940:	4b0f      	ldr	r3, [pc, #60]	@ (8007980 <OSSemCreate+0x6c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4a0e      	ldr	r2, [pc, #56]	@ (8007980 <OSSemCreate+0x6c>)
 8007948:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800794a:	f7f8 fc01 	bl	8000150 <CPU_IntEn>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <OSSemCreate+0x5e>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2203      	movs	r2, #3
 8007958:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	88fa      	ldrh	r2, [r7, #6]
 800795e:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4a06      	ldr	r2, [pc, #24]	@ (8007984 <OSSemCreate+0x70>)
 800796a:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 800796c:	68b8      	ldr	r0, [r7, #8]
 800796e:	f7ff fb56 	bl	800701e <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8007972:	68bb      	ldr	r3, [r7, #8]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20001dd8 	.word	0x20001dd8
 8007980:	20001a80 	.word	0x20001a80
 8007984:	0800b160 	.word	0x0800b160

08007988 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2204      	movs	r2, #4
 80079a2:	701a      	strb	r2, [r3, #0]
        return;
 80079a4:	e075      	b.n	8007a92 <OSSemPend+0x10a>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d003      	beq.n	80079b6 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079b4:	e06d      	b.n	8007a92 <OSSemPend+0x10a>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80079b6:	4b38      	ldr	r3, [pc, #224]	@ (8007a98 <OSSemPend+0x110>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079c4:	e065      	b.n	8007a92 <OSSemPend+0x10a>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80079c6:	4b35      	ldr	r3, [pc, #212]	@ (8007a9c <OSSemPend+0x114>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	220d      	movs	r2, #13
 80079d2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079d4:	e05d      	b.n	8007a92 <OSSemPend+0x10a>
    }
    OS_ENTER_CRITICAL();
 80079d6:	f7f8 fbb9 	bl	800014c <CPU_IntDis>
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	891b      	ldrh	r3, [r3, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <OSSemPend+0x72>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	891b      	ldrh	r3, [r3, #8]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80079ee:	f7f8 fbaf 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_NONE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079f8:	e04b      	b.n	8007a92 <OSSemPend+0x10a>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80079fa:	4b29      	ldr	r3, [pc, #164]	@ (8007aa0 <OSSemPend+0x118>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007a02:	4b27      	ldr	r3, [pc, #156]	@ (8007aa0 <OSSemPend+0x118>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8007a10:	4b23      	ldr	r3, [pc, #140]	@ (8007aa0 <OSSemPend+0x118>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8007a1a:	4b21      	ldr	r3, [pc, #132]	@ (8007aa0 <OSSemPend+0x118>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	631a      	str	r2, [r3, #48]	@ 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fa30 	bl	8006e88 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8007a28:	f7f8 fb92 	bl	8000150 <CPU_IntEn>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8007a2c:	f7ff fc7c 	bl	8007328 <OS_Sched>
    OS_ENTER_CRITICAL();
 8007a30:	f7f8 fb8c 	bl	800014c <CPU_IntDis>
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8007a34:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <OSSemPend+0x118>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <OSSemPend+0xbe>
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d004      	beq.n	8007a4e <OSSemPend+0xc6>
 8007a44:	e007      	b.n	8007a56 <OSSemPend+0xce>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
             break;
 8007a4c:	e00d      	b.n	8007a6a <OSSemPend+0xe2>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	220e      	movs	r2, #14
 8007a52:	701a      	strb	r2, [r3, #0]
             break;
 8007a54:	e009      	b.n	8007a6a <OSSemPend+0xe2>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8007a56:	4b12      	ldr	r3, [pc, #72]	@ (8007aa0 <OSSemPend+0x118>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fa69 	bl	8006f34 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220a      	movs	r2, #10
 8007a66:	701a      	strb	r2, [r3, #0]
             break;
 8007a68:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <OSSemPend+0x118>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8007a74:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <OSSemPend+0x118>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8007a7e:	4b08      	ldr	r3, [pc, #32]	@ (8007aa0 <OSSemPend+0x118>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <OSSemPend+0x118>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8007a8e:	f7f8 fb5f 	bl	8000150 <CPU_IntEn>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20001dd8 	.word	0x20001dd8
 8007a9c:	20001dd9 	.word	0x20001dd9
 8007aa0:	20001ff0 	.word	0x20001ff0

08007aa4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	e02a      	b.n	8007b10 <OSSemPost+0x6c>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d001      	beq.n	8007ac6 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e024      	b.n	8007b10 <OSSemPost+0x6c>
    }
    OS_ENTER_CRITICAL();
 8007ac6:	f7f8 fb41 	bl	800014c <CPU_IntDis>
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7a9b      	ldrb	r3, [r3, #10]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <OSSemPost+0x46>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff f963 	bl	8006da4 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8007ade:	f7f8 fb37 	bl	8000150 <CPU_IntEn>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8007ae2:	f7ff fc21 	bl	8007328 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e012      	b.n	8007b10 <OSSemPost+0x6c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	891b      	ldrh	r3, [r3, #8]
 8007aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <OSSemPost+0x66>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	891b      	ldrh	r3, [r3, #8]
 8007afa:	3301      	adds	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8007b02:	f7f8 fb25 	bl	8000150 <CPU_IntEn>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8007b06:	2300      	movs	r3, #0
 8007b08:	e002      	b.n	8007b10 <OSSemPost+0x6c>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8007b0a:	f7f8 fb21 	bl	8000150 <CPU_IntEn>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8007b0e:	2333      	movs	r3, #51	@ 0x33
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	@ 0x30
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b2e:	d901      	bls.n	8007b34 <OSTaskCreate+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8007b30:	232a      	movs	r3, #42	@ 0x2a
 8007b32:	e043      	b.n	8007bbc <OSTaskCreate+0xa4>
    }
#endif
    OS_ENTER_CRITICAL();
 8007b34:	f7f8 fb0a 	bl	800014c <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8007b38:	4b22      	ldr	r3, [pc, #136]	@ (8007bc4 <OSTaskCreate+0xac>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <OSTaskCreate+0x30>
        OS_EXIT_CRITICAL();
 8007b40:	f7f8 fb06 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8007b44:	233c      	movs	r3, #60	@ 0x3c
 8007b46:	e039      	b.n	8007bbc <OSTaskCreate+0xa4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc8 <OSTaskCreate+0xb0>)
 8007b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d130      	bne.n	8007bb6 <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc8 <OSTaskCreate+0xb0>)
 8007b58:	2101      	movs	r1, #1
 8007b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8007b5e:	f7f8 faf7 	bl	8000150 <CPU_IntEn>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 8007b62:	2300      	movs	r3, #0
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7fe fe0b 	bl	8006784 <OSTaskStkInit>
 8007b6e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8007b70:	78f8      	ldrb	r0, [r7, #3]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	2300      	movs	r3, #0
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2200      	movs	r2, #0
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	f7ff fcf0 	bl	8007568 <OS_TCBInit>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <OSTaskCreate+0x88>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8007b92:	4b0e      	ldr	r3, [pc, #56]	@ (8007bcc <OSTaskCreate+0xb4>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d10b      	bne.n	8007bb2 <OSTaskCreate+0x9a>
                OS_Sched();
 8007b9a:	f7ff fbc5 	bl	8007328 <OS_Sched>
 8007b9e:	e008      	b.n	8007bb2 <OSTaskCreate+0x9a>
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
 8007ba0:	f7f8 fad4 	bl	800014c <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	4a08      	ldr	r2, [pc, #32]	@ (8007bc8 <OSTaskCreate+0xb0>)
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8007bae:	f7f8 facf 	bl	8000150 <CPU_IntEn>
        }
        return (err);
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	e002      	b.n	8007bbc <OSTaskCreate+0xa4>
    }
    OS_EXIT_CRITICAL();
 8007bb6:	f7f8 facb 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8007bba:	2328      	movs	r3, #40	@ 0x28
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20001dd8 	.word	0x20001dd8
 8007bc8:	20002000 	.word	0x20002000
 8007bcc:	20001de8 	.word	0x20001de8

08007bd0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08c      	sub	sp, #48	@ 0x30
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	2b3f      	cmp	r3, #63	@ 0x3f
 8007be6:	d901      	bls.n	8007bec <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8007be8:	232a      	movs	r3, #42	@ 0x2a
 8007bea:	e04a      	b.n	8007c82 <OSTaskCreateExt+0xb2>
    }
#endif
    OS_ENTER_CRITICAL();
 8007bec:	f7f8 faae 	bl	800014c <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8007bf0:	4b26      	ldr	r3, [pc, #152]	@ (8007c8c <OSTaskCreateExt+0xbc>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <OSTaskCreateExt+0x30>
        OS_EXIT_CRITICAL();
 8007bf8:	f7f8 faaa 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8007bfc:	233c      	movs	r3, #60	@ 0x3c
 8007bfe:	e040      	b.n	8007c82 <OSTaskCreateExt+0xb2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	4a23      	ldr	r2, [pc, #140]	@ (8007c90 <OSTaskCreateExt+0xc0>)
 8007c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d137      	bne.n	8007c7c <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	4a20      	ldr	r2, [pc, #128]	@ (8007c90 <OSTaskCreateExt+0xc0>)
 8007c10:	2101      	movs	r1, #1
 8007c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8007c16:	f7f8 fa9b 	bl	8000150 <CPU_IntEn>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8007c1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c22:	f000 fae5 	bl	80081f0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8007c26:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7fe fda9 	bl	8006784 <OSTaskStkInit>
 8007c32:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8007c34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c36:	78f8      	ldrb	r0, [r7, #3]
 8007c38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	f7ff fc8d 	bl	8007568 <OS_TCBInit>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <OSTaskCreateExt+0x96>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8007c58:	4b0e      	ldr	r3, [pc, #56]	@ (8007c94 <OSTaskCreateExt+0xc4>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d10b      	bne.n	8007c78 <OSTaskCreateExt+0xa8>
                OS_Sched();
 8007c60:	f7ff fb62 	bl	8007328 <OS_Sched>
 8007c64:	e008      	b.n	8007c78 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 8007c66:	f7f8 fa71 	bl	800014c <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	4a08      	ldr	r2, [pc, #32]	@ (8007c90 <OSTaskCreateExt+0xc0>)
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8007c74:	f7f8 fa6c 	bl	8000150 <CPU_IntEn>
        }
        return (err);
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	e002      	b.n	8007c82 <OSTaskCreateExt+0xb2>
    }
    OS_EXIT_CRITICAL();
 8007c7c:	f7f8 fa68 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8007c80:	2328      	movs	r3, #40	@ 0x28
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20001dd8 	.word	0x20001dd8
 8007c90:	20002000 	.word	0x20002000
 8007c94:	20001de8 	.word	0x20001de8

08007c98 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8007ca6:	4b69      	ldr	r3, [pc, #420]	@ (8007e4c <OSTaskDel+0x1b4>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8007cae:	2340      	movs	r3, #64	@ 0x40
 8007cb0:	e0c8      	b.n	8007e44 <OSTaskDel+0x1ac>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cb6:	d101      	bne.n	8007cbc <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8007cb8:	233e      	movs	r3, #62	@ 0x3e
 8007cba:	e0c3      	b.n	8007e44 <OSTaskDel+0x1ac>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc0:	d904      	bls.n	8007ccc <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2bff      	cmp	r3, #255	@ 0xff
 8007cc6:	d001      	beq.n	8007ccc <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8007cc8:	232a      	movs	r3, #42	@ 0x2a
 8007cca:	e0bb      	b.n	8007e44 <OSTaskDel+0x1ac>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8007ccc:	f7f8 fa3e 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	2bff      	cmp	r3, #255	@ 0xff
 8007cd4:	d104      	bne.n	8007ce0 <OSTaskDel+0x48>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8007cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8007e50 <OSTaskDel+0x1b8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cde:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8007e54 <OSTaskDel+0x1bc>)
 8007ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce8:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <OSTaskDel+0x60>
        OS_EXIT_CRITICAL();
 8007cf0:	f7f8 fa2e 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8007cf4:	2343      	movs	r3, #67	@ 0x43
 8007cf6:	e0a5      	b.n	8007e44 <OSTaskDel+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d103      	bne.n	8007d06 <OSTaskDel+0x6e>
        OS_EXIT_CRITICAL();
 8007cfe:	f7f8 fa27 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_DEL);
 8007d02:	233d      	movs	r3, #61	@ 0x3d
 8007d04:	e09e      	b.n	8007e44 <OSTaskDel+0x1ac>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b52      	ldr	r3, [pc, #328]	@ (8007e58 <OSTaskDel+0x1c0>)
 8007d10:	5c9a      	ldrb	r2, [r3, r2]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	6939      	ldr	r1, [r7, #16]
 8007d1e:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007d22:	4013      	ands	r3, r2
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4b4c      	ldr	r3, [pc, #304]	@ (8007e58 <OSTaskDel+0x1c0>)
 8007d28:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b49      	ldr	r3, [pc, #292]	@ (8007e58 <OSTaskDel+0x1c0>)
 8007d34:	5c9b      	ldrb	r3, [r3, r2]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <OSTaskDel+0xb8>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007d40:	43db      	mvns	r3, r3
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	4b45      	ldr	r3, [pc, #276]	@ (8007e5c <OSTaskDel+0x1c4>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <OSTaskDel+0x1c4>)
 8007d4e:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <OSTaskDel+0xcc>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6938      	ldr	r0, [r7, #16]
 8007d60:	f7ff f8e8 	bl	8006f34 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <OSTaskDel+0xe0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6938      	ldr	r0, [r7, #16]
 8007d74:	f7ff f910 	bl	8006f98 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7c:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <OSTaskDel+0xf2>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fd1b 	bl	80077c0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8007da0:	4b2f      	ldr	r3, [pc, #188]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2bff      	cmp	r3, #255	@ 0xff
 8007da6:	d005      	beq.n	8007db4 <OSTaskDel+0x11c>
        OSLockNesting++;
 8007da8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007db2:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8007db4:	f7f8 f9cc 	bl	8000150 <CPU_IntEn>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8007db8:	f7fe ffee 	bl	8006d98 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8007dbc:	f7f8 f9c6 	bl	800014c <CPU_IntDis>
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8007dc0:	4b27      	ldr	r3, [pc, #156]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <OSTaskDel+0x13c>
        OSLockNesting--;
 8007dc8:	4b25      	ldr	r3, [pc, #148]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	4b23      	ldr	r3, [pc, #140]	@ (8007e60 <OSTaskDel+0x1c8>)
 8007dd2:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8007dd4:	6938      	ldr	r0, [r7, #16]
 8007dd6:	f7fe fcb2 	bl	800673e <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8007dda:	4b22      	ldr	r3, [pc, #136]	@ (8007e64 <OSTaskDel+0x1cc>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4b20      	ldr	r3, [pc, #128]	@ (8007e64 <OSTaskDel+0x1cc>)
 8007de4:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	4a1a      	ldr	r2, [pc, #104]	@ (8007e54 <OSTaskDel+0x1bc>)
 8007dea:	2100      	movs	r1, #0
 8007dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <OSTaskDel+0x172>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	4a18      	ldr	r2, [pc, #96]	@ (8007e68 <OSTaskDel+0x1d0>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e009      	b.n	8007e1e <OSTaskDel+0x186>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	6952      	ldr	r2, [r2, #20]
 8007e12:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	6992      	ldr	r2, [r2, #24]
 8007e1c:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8007e1e:	4b13      	ldr	r3, [pc, #76]	@ (8007e6c <OSTaskDel+0x1d4>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8007e26:	4a11      	ldr	r2, [pc, #68]	@ (8007e6c <OSTaskDel+0x1d4>)
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4a10      	ldr	r2, [pc, #64]	@ (8007e70 <OSTaskDel+0x1d8>)
 8007e30:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OS_EXIT_CRITICAL();
 8007e32:	f7f8 f98d 	bl	8000150 <CPU_IntEn>
    if (OSRunning == OS_TRUE) {
 8007e36:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <OSTaskDel+0x1dc>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <OSTaskDel+0x1aa>
        OS_Sched();                                     /* Find new highest priority task              */
 8007e3e:	f7ff fa73 	bl	8007328 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20001dd8 	.word	0x20001dd8
 8007e50:	20001ff0 	.word	0x20001ff0
 8007e54:	20002000 	.word	0x20002000
 8007e58:	20001de0 	.word	0x20001de0
 8007e5c:	20001ddc 	.word	0x20001ddc
 8007e60:	20001dd9 	.word	0x20001dd9
 8007e64:	20001de9 	.word	0x20001de9
 8007e68:	20001ffc 	.word	0x20001ffc
 8007e6c:	20001ff4 	.word	0x20001ff4
 8007e70:	0800b164 	.word	0x0800b164
 8007e74:	20001de8 	.word	0x20001de8

08007e78 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e8e:	d906      	bls.n	8007e9e <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2bff      	cmp	r3, #255	@ 0xff
 8007e94:	d003      	beq.n	8007e9e <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	222a      	movs	r2, #42	@ 0x2a
 8007e9a:	701a      	strb	r2, [r3, #0]
            return;
 8007e9c:	e037      	b.n	8007f0e <OSTaskNameSet+0x96>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	220c      	movs	r2, #12
 8007ea8:	701a      	strb	r2, [r3, #0]
        return;
 8007eaa:	e030      	b.n	8007f0e <OSTaskNameSet+0x96>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8007eac:	4b19      	ldr	r3, [pc, #100]	@ (8007f14 <OSTaskNameSet+0x9c>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2212      	movs	r2, #18
 8007eb8:	701a      	strb	r2, [r3, #0]
        return;
 8007eba:	e028      	b.n	8007f0e <OSTaskNameSet+0x96>
    }
    OS_ENTER_CRITICAL();
 8007ebc:	f7f8 f946 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2bff      	cmp	r3, #255	@ 0xff
 8007ec4:	d104      	bne.n	8007ed0 <OSTaskNameSet+0x58>
        prio = OSTCBCur->OSTCBPrio;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	@ (8007f18 <OSTaskNameSet+0xa0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007ece:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	4a12      	ldr	r2, [pc, #72]	@ (8007f1c <OSTaskNameSet+0xa4>)
 8007ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed8:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <OSTaskNameSet+0x74>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8007ee0:	f7f8 f936 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2243      	movs	r2, #67	@ 0x43
 8007ee8:	701a      	strb	r2, [r3, #0]
        return;
 8007eea:	e010      	b.n	8007f0e <OSTaskNameSet+0x96>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d105      	bne.n	8007efe <OSTaskNameSet+0x86>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8007ef2:	f7f8 f92d 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2243      	movs	r2, #67	@ 0x43
 8007efa:	701a      	strb	r2, [r3, #0]
        return;
 8007efc:	e007      	b.n	8007f0e <OSTaskNameSet+0x96>
    }
    ptcb->OSTCBTaskName = pname;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	651a      	str	r2, [r3, #80]	@ 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8007f04:	f7f8 f924 	bl	8000150 <CPU_IntEn>
    *perr               = OS_ERR_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
}
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20001dd8 	.word	0x20001dd8
 8007f18:	20001ff0 	.word	0x20001ff0
 8007f1c:	20002000 	.word	0x20002000

08007f20 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f32:	d901      	bls.n	8007f38 <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8007f34:	232a      	movs	r3, #42	@ 0x2a
 8007f36:	e05b      	b.n	8007ff0 <OSTaskResume+0xd0>
    }
#endif
    OS_ENTER_CRITICAL();
 8007f38:	f7f8 f908 	bl	800014c <CPU_IntDis>
    ptcb = OSTCBPrioTbl[prio];
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ff8 <OSTaskResume+0xd8>)
 8007f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f44:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <OSTaskResume+0x34>
        OS_EXIT_CRITICAL();
 8007f4c:	f7f8 f900 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_RESUME_PRIO);
 8007f50:	2346      	movs	r3, #70	@ 0x46
 8007f52:	e04d      	b.n	8007ff0 <OSTaskResume+0xd0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d103      	bne.n	8007f62 <OSTaskResume+0x42>
        OS_EXIT_CRITICAL();
 8007f5a:	f7f8 f8f9 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8007f5e:	2343      	movs	r3, #67	@ 0x43
 8007f60:	e046      	b.n	8007ff0 <OSTaskResume+0xd0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d03c      	beq.n	8007fea <OSTaskResume+0xca>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f76:	f023 0308 	bic.w	r3, r3, #8
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f88:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d128      	bne.n	8007fe2 <OSTaskResume+0xc2>
            if (ptcb->OSTCBDly == 0u) {
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d121      	bne.n	8007fdc <OSTaskResume+0xbc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007f9e:	4b17      	ldr	r3, [pc, #92]	@ (8007ffc <OSTaskResume+0xdc>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <OSTaskResume+0xdc>)
 8007fa8:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4b13      	ldr	r3, [pc, #76]	@ (8008000 <OSTaskResume+0xe0>)
 8007fb4:	5c9a      	ldrb	r2, [r3, r2]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008000 <OSTaskResume+0xe0>)
 8007fc8:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8007fca:	f7f8 f8c1 	bl	8000150 <CPU_IntEn>
                if (OSRunning == OS_TRUE) {
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <OSTaskResume+0xe4>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d107      	bne.n	8007fe6 <OSTaskResume+0xc6>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8007fd6:	f7ff f9a7 	bl	8007328 <OS_Sched>
 8007fda:	e004      	b.n	8007fe6 <OSTaskResume+0xc6>
                }
            } else {
                OS_EXIT_CRITICAL();
 8007fdc:	f7f8 f8b8 	bl	8000150 <CPU_IntEn>
 8007fe0:	e001      	b.n	8007fe6 <OSTaskResume+0xc6>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8007fe2:	f7f8 f8b5 	bl	8000150 <CPU_IntEn>
        }
        return (OS_ERR_NONE);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e002      	b.n	8007ff0 <OSTaskResume+0xd0>
    }
    OS_EXIT_CRITICAL();
 8007fea:	f7f8 f8b1 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8007fee:	2344      	movs	r3, #68	@ 0x44
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20002000 	.word	0x20002000
 8007ffc:	20001ddc 	.word	0x20001ddc
 8008000:	20001de0 	.word	0x20001de0
 8008004:	20001de8 	.word	0x20001de8

08008008 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b3f      	cmp	r3, #63	@ 0x3f
 800801c:	d904      	bls.n	8008028 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	2bff      	cmp	r3, #255	@ 0xff
 8008022:	d001      	beq.n	8008028 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8008024:	232a      	movs	r3, #42	@ 0x2a
 8008026:	e04e      	b.n	80080c6 <OSTaskStkChk+0xbe>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 800802e:	2309      	movs	r3, #9
 8008030:	e049      	b.n	80080c6 <OSTaskStkChk+0xbe>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 800803e:	f7f8 f885 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	2bff      	cmp	r3, #255	@ 0xff
 8008046:	d104      	bne.n	8008052 <OSTaskStkChk+0x4a>
        prio = OSTCBCur->OSTCBPrio;
 8008048:	4b21      	ldr	r3, [pc, #132]	@ (80080d0 <OSTaskStkChk+0xc8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008050:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	4a1f      	ldr	r2, [pc, #124]	@ (80080d4 <OSTaskStkChk+0xcc>)
 8008056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800805a:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <OSTaskStkChk+0x62>
        OS_EXIT_CRITICAL();
 8008062:	f7f8 f875 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008066:	2343      	movs	r3, #67	@ 0x43
 8008068:	e02d      	b.n	80080c6 <OSTaskStkChk+0xbe>
    }
    if (ptcb == OS_TCB_RESERVED) {
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d103      	bne.n	8008078 <OSTaskStkChk+0x70>
        OS_EXIT_CRITICAL();
 8008070:	f7f8 f86e 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008074:	2343      	movs	r3, #67	@ 0x43
 8008076:	e026      	b.n	80080c6 <OSTaskStkChk+0xbe>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	8a1b      	ldrh	r3, [r3, #16]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <OSTaskStkChk+0x84>
        OS_EXIT_CRITICAL();
 8008084:	f7f8 f864 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_OPT);
 8008088:	2345      	movs	r3, #69	@ 0x45
 800808a:	e01c      	b.n	80080c6 <OSTaskStkChk+0xbe>
    }
    nfree = 0u;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 800809c:	f7f8 f858 	bl	8000150 <CPU_IntEn>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80080a0:	e002      	b.n	80080a8 <OSTaskStkChk+0xa0>
        nfree++;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	3301      	adds	r3, #1
 80080a6:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	1d1a      	adds	r2, r3, #4
 80080ac:	61fa      	str	r2, [r7, #28]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0f6      	beq.n	80080a2 <OSTaskStkChk+0x9a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20001ff0 	.word	0x20001ff0
 80080d4:	20002000 	.word	0x20002000

080080d8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80080ea:	d101      	bne.n	80080f0 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 80080ec:	2347      	movs	r3, #71	@ 0x47
 80080ee:	e065      	b.n	80081bc <OSTaskSuspend+0xe4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80080f4:	d904      	bls.n	8008100 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	2bff      	cmp	r3, #255	@ 0xff
 80080fa:	d001      	beq.n	8008100 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 80080fc:	232a      	movs	r3, #42	@ 0x2a
 80080fe:	e05d      	b.n	80081bc <OSTaskSuspend+0xe4>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8008100:	f7f8 f824 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2bff      	cmp	r3, #255	@ 0xff
 8008108:	d107      	bne.n	800811a <OSTaskSuspend+0x42>
        prio = OSTCBCur->OSTCBPrio;
 800810a:	4b2e      	ldr	r3, [pc, #184]	@ (80081c4 <OSTaskSuspend+0xec>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008112:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
 8008118:	e00b      	b.n	8008132 <OSTaskSuspend+0x5a>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800811a:	4b2a      	ldr	r3, [pc, #168]	@ (80081c4 <OSTaskSuspend+0xec>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008122:	79fa      	ldrb	r2, [r7, #7]
 8008124:	429a      	cmp	r2, r3
 8008126:	d102      	bne.n	800812e <OSTaskSuspend+0x56>
        self = OS_TRUE;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
 800812c:	e001      	b.n	8008132 <OSTaskSuspend+0x5a>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	4a24      	ldr	r2, [pc, #144]	@ (80081c8 <OSTaskSuspend+0xf0>)
 8008136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813a:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <OSTaskSuspend+0x72>
        OS_EXIT_CRITICAL();
 8008142:	f7f8 f805 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8008146:	2348      	movs	r3, #72	@ 0x48
 8008148:	e038      	b.n	80081bc <OSTaskSuspend+0xe4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d103      	bne.n	8008158 <OSTaskSuspend+0x80>
        OS_EXIT_CRITICAL();
 8008150:	f7f7 fffe 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008154:	2343      	movs	r3, #67	@ 0x43
 8008156:	e031      	b.n	80081bc <OSTaskSuspend+0xe4>
    }
    y            = ptcb->OSTCBY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800815e:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <OSTaskSuspend+0xf4>)
 8008164:	5cd1      	ldrb	r1, [r2, r3]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800816c:	43db      	mvns	r3, r3
 800816e:	b2da      	uxtb	r2, r3
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	400a      	ands	r2, r1
 8008174:	b2d1      	uxtb	r1, r2
 8008176:	4a15      	ldr	r2, [pc, #84]	@ (80081cc <OSTaskSuspend+0xf4>)
 8008178:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	4a13      	ldr	r2, [pc, #76]	@ (80081cc <OSTaskSuspend+0xf4>)
 800817e:	5cd3      	ldrb	r3, [r2, r3]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10a      	bne.n	800819a <OSTaskSuspend+0xc2>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800818a:	43db      	mvns	r3, r3
 800818c:	b2da      	uxtb	r2, r3
 800818e:	4b10      	ldr	r3, [pc, #64]	@ (80081d0 <OSTaskSuspend+0xf8>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4013      	ands	r3, r2
 8008194:	b2da      	uxtb	r2, r3
 8008196:	4b0e      	ldr	r3, [pc, #56]	@ (80081d0 <OSTaskSuspend+0xf8>)
 8008198:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081a0:	f043 0308 	orr.w	r3, r3, #8
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OS_EXIT_CRITICAL();
 80081ac:	f7f7 ffd0 	bl	8000150 <CPU_IntEn>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <OSTaskSuspend+0xe2>
        OS_Sched();                                             /* Find new highest priority task      */
 80081b6:	f7ff f8b7 	bl	8007328 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20001ff0 	.word	0x20001ff0
 80081c8:	20002000 	.word	0x20002000
 80081cc:	20001de0 	.word	0x20001de0
 80081d0:	20001ddc 	.word	0x20001ddc

080081d4 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <OS_TaskReturn+0x18>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fabf 	bl	8006760 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 80081e2:	20ff      	movs	r0, #255	@ 0xff
 80081e4:	f7ff fd58 	bl	8007c98 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20001ff0 	.word	0x20001ff0

080081f0 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008212:	e007      	b.n	8008224 <OS_TaskStkClr+0x34>
                size--;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3b01      	subs	r3, #1
 8008218:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	60fa      	str	r2, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f4      	bne.n	8008214 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8008240:	4b1f      	ldr	r3, [pc, #124]	@ (80082c0 <OSTimeDly+0x8c>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d135      	bne.n	80082b4 <OSTimeDly+0x80>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8008248:	4b1e      	ldr	r3, [pc, #120]	@ (80082c4 <OSTimeDly+0x90>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d133      	bne.n	80082b8 <OSTimeDly+0x84>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d031      	beq.n	80082ba <OSTimeDly+0x86>
        OS_ENTER_CRITICAL();
 8008256:	f7f7 ff79 	bl	800014c <CPU_IntDis>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 800825a:	4b1b      	ldr	r3, [pc, #108]	@ (80082c8 <OSTimeDly+0x94>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008262:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	4a19      	ldr	r2, [pc, #100]	@ (80082cc <OSTimeDly+0x98>)
 8008268:	5cd1      	ldrb	r1, [r2, r3]
 800826a:	4b17      	ldr	r3, [pc, #92]	@ (80082c8 <OSTimeDly+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008272:	43db      	mvns	r3, r3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	400a      	ands	r2, r1
 800827a:	b2d1      	uxtb	r1, r2
 800827c:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <OSTimeDly+0x98>)
 800827e:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	4a12      	ldr	r2, [pc, #72]	@ (80082cc <OSTimeDly+0x98>)
 8008284:	5cd3      	ldrb	r3, [r2, r3]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <OSTimeDly+0x6e>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <OSTimeDly+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008292:	43db      	mvns	r3, r3
 8008294:	b2da      	uxtb	r2, r3
 8008296:	4b0e      	ldr	r3, [pc, #56]	@ (80082d0 <OSTimeDly+0x9c>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	4013      	ands	r3, r2
 800829c:	b2da      	uxtb	r2, r3
 800829e:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <OSTimeDly+0x9c>)
 80082a0:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 80082a2:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <OSTimeDly+0x94>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	631a      	str	r2, [r3, #48]	@ 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 80082aa:	f7f7 ff51 	bl	8000150 <CPU_IntEn>
        OS_Sched();                              /* Find next task to run!                             */
 80082ae:	f7ff f83b 	bl	8007328 <OS_Sched>
 80082b2:	e002      	b.n	80082ba <OSTimeDly+0x86>
        return;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <OSTimeDly+0x86>
        return;
 80082b8:	bf00      	nop
    }
}
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20001dd8 	.word	0x20001dd8
 80082c4:	20001dd9 	.word	0x20001dd9
 80082c8:	20001ff0 	.word	0x20001ff0
 80082cc:	20001de0 	.word	0x20001de0
 80082d0:	20001ddc 	.word	0x20001ddc

080082d4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80082de:	f7f7 ff35 	bl	800014c <CPU_IntDis>
    ticks = OSTime;
 80082e2:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <OSTimeGet+0x24>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 80082e8:	f7f7 ff32 	bl	8000150 <CPU_IntEn>
    return (ticks);
 80082ec:	683b      	ldr	r3, [r7, #0]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20002978 	.word	0x20002978

080082fc <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8008302:	4b06      	ldr	r3, [pc, #24]	@ (800831c <OSTmrSignal+0x20>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fbcc 	bl	8007aa4 <OSSemPost>
 800830c:	4603      	mov	r3, r0
 800830e:	71fb      	strb	r3, [r7, #7]
    return (err);
 8008310:	79fb      	ldrb	r3, [r7, #7]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20002988 	.word	0x20002988

08008320 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8008326:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800832a:	4838      	ldr	r0, [pc, #224]	@ (800840c <OSTmr_Init+0xec>)
 800832c:	f7fe ffe4 	bl	80072f8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8008330:	2138      	movs	r1, #56	@ 0x38
 8008332:	4837      	ldr	r0, [pc, #220]	@ (8008410 <OSTmr_Init+0xf0>)
 8008334:	f7fe ffe0 	bl	80072f8 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8008338:	2300      	movs	r3, #0
 800833a:	82fb      	strh	r3, [r7, #22]
 800833c:	e022      	b.n	8008384 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 800833e:	8afb      	ldrh	r3, [r7, #22]
 8008340:	3301      	adds	r3, #1
 8008342:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8008344:	8afa      	ldrh	r2, [r7, #22]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4a2f      	ldr	r2, [pc, #188]	@ (800840c <OSTmr_Init+0xec>)
 8008350:	4413      	add	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8008354:	89fa      	ldrh	r2, [r7, #14]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <OSTmr_Init+0xec>)
 8008360:	4413      	add	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2264      	movs	r2, #100	@ 0x64
 8008368:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4a26      	ldr	r2, [pc, #152]	@ (8008414 <OSTmr_Init+0xf4>)
 800837c:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800837e:	8afb      	ldrh	r3, [r7, #22]
 8008380:	3301      	adds	r3, #1
 8008382:	82fb      	strh	r3, [r7, #22]
 8008384:	8afb      	ldrh	r3, [r7, #22]
 8008386:	2b0e      	cmp	r3, #14
 8008388:	d9d9      	bls.n	800833e <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800838a:	8afa      	ldrh	r2, [r7, #22]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4a1d      	ldr	r2, [pc, #116]	@ (800840c <OSTmr_Init+0xec>)
 8008396:	4413      	add	r3, r2
 8008398:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2264      	movs	r2, #100	@ 0x64
 800839e:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <OSTmr_Init+0xf4>)
 80083b2:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80083b4:	4b18      	ldr	r3, [pc, #96]	@ (8008418 <OSTmr_Init+0xf8>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 80083ba:	4b18      	ldr	r3, [pc, #96]	@ (800841c <OSTmr_Init+0xfc>)
 80083bc:	2200      	movs	r2, #0
 80083be:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80083c0:	4b17      	ldr	r3, [pc, #92]	@ (8008420 <OSTmr_Init+0x100>)
 80083c2:	2210      	movs	r2, #16
 80083c4:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80083c6:	4b17      	ldr	r3, [pc, #92]	@ (8008424 <OSTmr_Init+0x104>)
 80083c8:	4a10      	ldr	r2, [pc, #64]	@ (800840c <OSTmr_Init+0xec>)
 80083ca:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80083cc:	2001      	movs	r0, #1
 80083ce:	f7ff faa1 	bl	8007914 <OSSemCreate>
 80083d2:	4603      	mov	r3, r0
 80083d4:	4a14      	ldr	r2, [pc, #80]	@ (8008428 <OSTmr_Init+0x108>)
 80083d6:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80083d8:	2000      	movs	r0, #0
 80083da:	f7ff fa9b 	bl	8007914 <OSSemCreate>
 80083de:	4603      	mov	r3, r0
 80083e0:	4a12      	ldr	r2, [pc, #72]	@ (800842c <OSTmr_Init+0x10c>)
 80083e2:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80083e4:	4b10      	ldr	r3, [pc, #64]	@ (8008428 <OSTmr_Init+0x108>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	1dfa      	adds	r2, r7, #7
 80083ea:	4911      	ldr	r1, [pc, #68]	@ (8008430 <OSTmr_Init+0x110>)
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe facf 	bl	8006990 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80083f2:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <OSTmr_Init+0x10c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	1dfa      	adds	r2, r7, #7
 80083f8:	490e      	ldr	r1, [pc, #56]	@ (8008434 <OSTmr_Init+0x114>)
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fac8 	bl	8006990 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8008400:	f000 f81a 	bl	8008438 <OSTmr_InitTask>
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	2000298c 	.word	0x2000298c
 8008410:	20002e10 	.word	0x20002e10
 8008414:	0800b168 	.word	0x0800b168
 8008418:	20002980 	.word	0x20002980
 800841c:	2000297e 	.word	0x2000297e
 8008420:	2000297c 	.word	0x2000297c
 8008424:	20002c0c 	.word	0x20002c0c
 8008428:	20002984 	.word	0x20002984
 800842c:	20002988 	.word	0x20002988
 8008430:	0800b16c 	.word	0x0800b16c
 8008434:	0800b180 	.word	0x0800b180

08008438 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 800843e:	2303      	movs	r3, #3
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	2300      	movs	r3, #0
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	4b0a      	ldr	r3, [pc, #40]	@ (8008474 <OSTmr_InitTask+0x3c>)
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	233d      	movs	r3, #61	@ 0x3d
 8008456:	4a08      	ldr	r2, [pc, #32]	@ (8008478 <OSTmr_InitTask+0x40>)
 8008458:	2100      	movs	r1, #0
 800845a:	4808      	ldr	r0, [pc, #32]	@ (800847c <OSTmr_InitTask+0x44>)
 800845c:	f7ff fbb8 	bl	8007bd0 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8008460:	1dfb      	adds	r3, r7, #7
 8008462:	461a      	mov	r2, r3
 8008464:	4906      	ldr	r1, [pc, #24]	@ (8008480 <OSTmr_InitTask+0x48>)
 8008466:	203d      	movs	r0, #61	@ 0x3d
 8008468:	f7ff fd06 	bl	8007e78 <OSTaskNameSet>
#endif
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20002c10 	.word	0x20002c10
 8008478:	20002e0c 	.word	0x20002e0c
 800847c:	080085fd 	.word	0x080085fd
 8008480:	0800b194 	.word	0x0800b194

08008484 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69da      	ldr	r2, [r3, #28]
 80084a2:	4b2a      	ldr	r3, [pc, #168]	@ (800854c <OSTmr_Link+0xc8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	441a      	add	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	615a      	str	r2, [r3, #20]
 80084ac:	e012      	b.n	80084d4 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d107      	bne.n	80084c6 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69da      	ldr	r2, [r3, #28]
 80084ba:	4b24      	ldr	r3, [pc, #144]	@ (800854c <OSTmr_Link+0xc8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	441a      	add	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	615a      	str	r2, [r3, #20]
 80084c4:	e006      	b.n	80084d4 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	4b20      	ldr	r3, [pc, #128]	@ (800854c <OSTmr_Link+0xc8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	441a      	add	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695a      	ldr	r2, [r3, #20]
 80084d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008550 <OSTmr_Link+0xcc>)
 80084da:	fba3 1302 	umull	r1, r3, r3, r2
 80084de:	1ad1      	subs	r1, r2, r3
 80084e0:	0849      	lsrs	r1, r1, #1
 80084e2:	440b      	add	r3, r1
 80084e4:	0899      	lsrs	r1, r3, #2
 80084e6:	460b      	mov	r3, r1
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	1ad1      	subs	r1, r2, r3
 80084ee:	460b      	mov	r3, r1
 80084f0:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80084f2:	8afb      	ldrh	r3, [r7, #22]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <OSTmr_Link+0xd0>)
 80084f8:	4413      	add	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2201      	movs	r2, #1
 8008514:	809a      	strh	r2, [r3, #4]
 8008516:	e011      	b.n	800853c <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	889b      	ldrh	r3, [r3, #4]
 8008534:	3301      	adds	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	611a      	str	r2, [r3, #16]
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	20002980 	.word	0x20002980
 8008550:	24924925 	.word	0x24924925
 8008554:	20002e10 	.word	0x20002e10

08008558 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	695a      	ldr	r2, [r3, #20]
 8008564:	4b23      	ldr	r3, [pc, #140]	@ (80085f4 <OSTmr_Unlink+0x9c>)
 8008566:	fba3 1302 	umull	r1, r3, r3, r2
 800856a:	1ad1      	subs	r1, r2, r3
 800856c:	0849      	lsrs	r1, r1, #1
 800856e:	440b      	add	r3, r1
 8008570:	0899      	lsrs	r1, r3, #2
 8008572:	460b      	mov	r3, r1
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	1a5b      	subs	r3, r3, r1
 8008578:	1ad1      	subs	r1, r2, r3
 800857a:	460b      	mov	r3, r1
 800857c:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800857e:	8afb      	ldrh	r3, [r7, #22]
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <OSTmr_Unlink+0xa0>)
 8008584:	4413      	add	r3, r2
 8008586:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d10c      	bne.n	80085ac <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d012      	beq.n	80085ca <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	611a      	str	r2, [r3, #16]
 80085aa:	e00e      	b.n	80085ca <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	809a      	strh	r2, [r3, #4]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	24924925 	.word	0x24924925
 80085f8:	20002e10 	.word	0x20002e10

080085fc <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8008604:	4b2a      	ldr	r3, [pc, #168]	@ (80086b0 <OSTmr_Task+0xb4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f107 020b 	add.w	r2, r7, #11
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f9ba 	bl	8007988 <OSSemPend>
        OSSchedLock();
 8008614:	f7fe fa7a 	bl	8006b0c <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8008618:	4b26      	ldr	r3, [pc, #152]	@ (80086b4 <OSTmr_Task+0xb8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	4a25      	ldr	r2, [pc, #148]	@ (80086b4 <OSTmr_Task+0xb8>)
 8008620:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8008622:	4b24      	ldr	r3, [pc, #144]	@ (80086b4 <OSTmr_Task+0xb8>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b24      	ldr	r3, [pc, #144]	@ (80086b8 <OSTmr_Task+0xbc>)
 8008628:	fba3 1302 	umull	r1, r3, r3, r2
 800862c:	1ad1      	subs	r1, r2, r3
 800862e:	0849      	lsrs	r1, r1, #1
 8008630:	440b      	add	r3, r1
 8008632:	0899      	lsrs	r1, r3, #2
 8008634:	460b      	mov	r3, r1
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	1a5b      	subs	r3, r3, r1
 800863a:	1ad1      	subs	r1, r2, r3
 800863c:	460b      	mov	r3, r1
 800863e:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8008640:	8b7b      	ldrh	r3, [r7, #26]
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4a1d      	ldr	r2, [pc, #116]	@ (80086bc <OSTmr_Task+0xc0>)
 8008646:	4413      	add	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8008650:	e027      	b.n	80086a2 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	4b15      	ldr	r3, [pc, #84]	@ (80086b4 <OSTmr_Task+0xb8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d11c      	bne.n	800869e <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8008664:	69f8      	ldr	r0, [r7, #28]
 8008666:	f7ff ff77 	bl	8008558 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008670:	2b02      	cmp	r3, #2
 8008672:	d104      	bne.n	800867e <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8008674:	2101      	movs	r1, #1
 8008676:	69f8      	ldr	r0, [r7, #28]
 8008678:	f7ff ff04 	bl	8008484 <OSTmr_Link>
 800867c:	e003      	b.n	8008686 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	2202      	movs	r2, #2
 8008682:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4611      	mov	r1, r2
 800869a:	69f8      	ldr	r0, [r7, #28]
 800869c:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1d4      	bne.n	8008652 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 80086a8:	f7fe fa56 	bl	8006b58 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80086ac:	e7aa      	b.n	8008604 <OSTmr_Task+0x8>
 80086ae:	bf00      	nop
 80086b0:	20002988 	.word	0x20002988
 80086b4:	20002980 	.word	0x20002980
 80086b8:	24924925 	.word	0x24924925
 80086bc:	20002e10 	.word	0x20002e10

080086c0 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr

080086d2 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
}
 80086f4:	bf00      	nop
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 800870e:	b480      	push	{r7}
 8008710:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 8008712:	bf00      	nop
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8008730:	bf00      	nop
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7c1b      	ldrb	r3, [r3, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d115      	bne.n	800877c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008754:	2202      	movs	r2, #2
 8008756:	2181      	movs	r1, #129	@ 0x81
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fe82 	bl	800a462 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008768:	2202      	movs	r2, #2
 800876a:	2101      	movs	r1, #1
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 fe78 	bl	800a462 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800877a:	e012      	b.n	80087a2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800877c:	2340      	movs	r3, #64	@ 0x40
 800877e:	2202      	movs	r2, #2
 8008780:	2181      	movs	r1, #129	@ 0x81
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fe6d 	bl	800a462 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	2202      	movs	r2, #2
 8008792:	2101      	movs	r1, #1
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fe64 	bl	800a462 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087a2:	2308      	movs	r3, #8
 80087a4:	2203      	movs	r2, #3
 80087a6:	2182      	movs	r1, #130	@ 0x82
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fe5a 	bl	800a462 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80087b8:	f001 ff7a 	bl	800a6b0 <USBD_static_malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80087ce:	2301      	movs	r3, #1
 80087d0:	73fb      	strb	r3, [r7, #15]
 80087d2:	e026      	b.n	8008822 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087da:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	7c1b      	ldrb	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008808:	2101      	movs	r1, #1
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 ff1a 	bl	800a644 <USBD_LL_PrepareReceive>
 8008810:	e007      	b.n	8008822 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008818:	2340      	movs	r3, #64	@ 0x40
 800881a:	2101      	movs	r1, #1
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 ff11 	bl	800a644 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800883c:	2181      	movs	r1, #129	@ 0x81
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 fe35 	bl	800a4ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fe2e 	bl	800a4ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800885a:	2182      	movs	r1, #130	@ 0x82
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fe26 	bl	800a4ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008882:	4618      	mov	r0, r3
 8008884:	f001 ff20 	bl	800a6c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b086      	sub	sp, #24
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088aa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d039      	beq.n	8008938 <USBD_CDC_Setup+0x9e>
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d17f      	bne.n	80089c8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	88db      	ldrh	r3, [r3, #6]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d029      	beq.n	8008924 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	da11      	bge.n	80088fe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80088e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	88d2      	ldrh	r2, [r2, #6]
 80088ec:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088ee:	6939      	ldr	r1, [r7, #16]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fa06 	bl	8009d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80088fc:	e06b      	b.n	80089d6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	785a      	ldrb	r2, [r3, #1]
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008914:	6939      	ldr	r1, [r7, #16]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	461a      	mov	r2, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fa21 	bl	8009d64 <USBD_CtlPrepareRx>
      break;
 8008922:	e058      	b.n	80089d6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	7850      	ldrb	r0, [r2, #1]
 8008930:	2200      	movs	r2, #0
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	4798      	blx	r3
      break;
 8008936:	e04e      	b.n	80089d6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b0b      	cmp	r3, #11
 800893e:	d02e      	beq.n	800899e <USBD_CDC_Setup+0x104>
 8008940:	2b0b      	cmp	r3, #11
 8008942:	dc38      	bgt.n	80089b6 <USBD_CDC_Setup+0x11c>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <USBD_CDC_Setup+0xb4>
 8008948:	2b0a      	cmp	r3, #10
 800894a:	d014      	beq.n	8008976 <USBD_CDC_Setup+0xdc>
 800894c:	e033      	b.n	80089b6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008954:	2b03      	cmp	r3, #3
 8008956:	d107      	bne.n	8008968 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	2202      	movs	r2, #2
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f9d1 	bl	8009d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008966:	e02e      	b.n	80089c6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 f962 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008970:	2302      	movs	r3, #2
 8008972:	75fb      	strb	r3, [r7, #23]
          break;
 8008974:	e027      	b.n	80089c6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800897c:	2b03      	cmp	r3, #3
 800897e:	d107      	bne.n	8008990 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008980:	f107 030f 	add.w	r3, r7, #15
 8008984:	2201      	movs	r2, #1
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f9bd 	bl	8009d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800898e:	e01a      	b.n	80089c6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 f94e 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008998:	2302      	movs	r3, #2
 800899a:	75fb      	strb	r3, [r7, #23]
          break;
 800899c:	e013      	b.n	80089c6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d00d      	beq.n	80089c4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f942 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 80089b0:	2302      	movs	r3, #2
 80089b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089b4:	e006      	b.n	80089c4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f93b 	bl	8009c34 <USBD_CtlError>
          ret = USBD_FAIL;
 80089be:	2302      	movs	r3, #2
 80089c0:	75fb      	strb	r3, [r7, #23]
          break;
 80089c2:	e000      	b.n	80089c6 <USBD_CDC_Setup+0x12c>
          break;
 80089c4:	bf00      	nop
      }
      break;
 80089c6:	e006      	b.n	80089d6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f932 	bl	8009c34 <USBD_CtlError>
      ret = USBD_FAIL;
 80089d0:	2302      	movs	r3, #2
 80089d2:	75fb      	strb	r3, [r7, #23]
      break;
 80089d4:	bf00      	nop
  }

  return ret;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d03a      	beq.n	8008a7c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	331c      	adds	r3, #28
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d029      	beq.n	8008a70 <USBD_CDC_DataIn+0x90>
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	331c      	adds	r3, #28
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	78f9      	ldrb	r1, [r7, #3]
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	460b      	mov	r3, r1
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	4403      	add	r3, r0
 8008a3c:	3338      	adds	r3, #56	@ 0x38
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d110      	bne.n	8008a70 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	331c      	adds	r3, #28
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a62:	78f9      	ldrb	r1, [r7, #3]
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 fdc8 	bl	800a5fe <USBD_LL_Transmit>
 8008a6e:	e003      	b.n	8008a78 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e000      	b.n	8008a7e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a7c:	2302      	movs	r3, #2
  }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fdf3 	bl	800a68a <USBD_LL_GetRxDataSize>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008aca:	4611      	mov	r1, r2
 8008acc:	4798      	blx	r3

    return USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
  }
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d014      	beq.n	8008b20 <USBD_CDC_EP0_RxReady+0x44>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008afc:	2bff      	cmp	r3, #255	@ 0xff
 8008afe:	d00f      	beq.n	8008b20 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	22ff      	movs	r2, #255	@ 0xff
 8008b1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2243      	movs	r2, #67	@ 0x43
 8008b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008b3a:	4b03      	ldr	r3, [pc, #12]	@ (8008b48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	20000170 	.word	0x20000170

08008b4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2243      	movs	r2, #67	@ 0x43
 8008b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	2000012c 	.word	0x2000012c

08008b6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2243      	movs	r2, #67	@ 0x43
 8008b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b7a:	4b03      	ldr	r3, [pc, #12]	@ (8008b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bc80      	pop	{r7}
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	200001b4 	.word	0x200001b4

08008b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	220a      	movs	r2, #10
 8008b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b9a:	4b03      	ldr	r3, [pc, #12]	@ (8008ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	200000e8 	.word	0x200000e8

08008bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008bf6:	88fa      	ldrh	r2, [r7, #6]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr

08008c0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c1a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr

08008c30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01c      	beq.n	8008c84 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d115      	bne.n	8008c80 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	2181      	movs	r1, #129	@ 0x81
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 fcc1 	bl	800a5fe <USBD_LL_Transmit>

      return USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e002      	b.n	8008c86 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008c84:	2302      	movs	r3, #2
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d017      	beq.n	8008cd8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7c1b      	ldrb	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d109      	bne.n	8008cc4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cba:	2101      	movs	r1, #1
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fcc1 	bl	800a644 <USBD_LL_PrepareReceive>
 8008cc2:	e007      	b.n	8008cd4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cca:	2340      	movs	r3, #64	@ 0x40
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fcb8 	bl	800a644 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e000      	b.n	8008cda <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008cd8:	2302      	movs	r3, #2
  }
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	4613      	mov	r3, r2
 8008cee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e01a      	b.n	8008d30 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	79fa      	ldrb	r2, [r7, #7]
 8008d26:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 fb25 	bl	800a378 <USBD_LL_Init>

  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e001      	b.n	8008d5e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr

08008d6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fb5a 	bl	800a42c <USBD_LL_Start>

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008da2:	2302      	movs	r3, #2
 8008da4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00c      	beq.n	8008dca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4611      	mov	r1, r2
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fed8 	bl	8009bc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e20:	461a      	mov	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d016      	beq.n	8008e64 <USBD_LL_SetupStage+0x6a>
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d81c      	bhi.n	8008e74 <USBD_LL_SetupStage+0x7a>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <USBD_LL_SetupStage+0x4a>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d008      	beq.n	8008e54 <USBD_LL_SetupStage+0x5a>
 8008e42:	e017      	b.n	8008e74 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f9cb 	bl	80091e8 <USBD_StdDevReq>
      break;
 8008e52:	e01a      	b.n	8008e8a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fa2d 	bl	80092bc <USBD_StdItfReq>
      break;
 8008e62:	e012      	b.n	8008e8a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa6d 	bl	800934c <USBD_StdEPReq>
      break;
 8008e72:	e00a      	b.n	8008e8a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008e7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fb32 	bl	800a4ec <USBD_LL_StallEP>
      break;
 8008e88:	bf00      	nop
  }

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d14b      	bne.n	8008f40 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008eae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d134      	bne.n	8008f24 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d919      	bls.n	8008efa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d203      	bcs.n	8008ee8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	e002      	b.n	8008eee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 ff54 	bl	8009da0 <USBD_CtlContinueRx>
 8008ef8:	e038      	b.n	8008f6c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d105      	bne.n	8008f1c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 ff51 	bl	8009dc4 <USBD_CtlSendStatus>
 8008f22:	e023      	b.n	8008f6c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d11e      	bne.n	8008f6c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f36:	2100      	movs	r1, #0
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f001 fad7 	bl	800a4ec <USBD_LL_StallEP>
 8008f3e:	e015      	b.n	8008f6c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d108      	bne.n	8008f68 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	7afa      	ldrb	r2, [r7, #11]
 8008f60:	4611      	mov	r1, r2
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
 8008f66:	e001      	b.n	8008f6c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e000      	b.n	8008f6e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	607a      	str	r2, [r7, #4]
 8008f82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d17f      	bne.n	800908a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d15c      	bne.n	8009054 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d915      	bls.n	8008fd2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 febe 	bl	8009d40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f001 fb3a 	bl	800a644 <USBD_LL_PrepareReceive>
 8008fd0:	e04e      	b.n	8009070 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	6912      	ldr	r2, [r2, #16]
 8008fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fde:	fb01 f202 	mul.w	r2, r1, r2
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11c      	bne.n	8009022 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d316      	bcc.n	8009022 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d20f      	bcs.n	8009022 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009002:	2200      	movs	r2, #0
 8009004:	2100      	movs	r1, #0
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fe9a 	bl	8009d40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009014:	2300      	movs	r3, #0
 8009016:	2200      	movs	r2, #0
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f001 fb12 	bl	800a644 <USBD_LL_PrepareReceive>
 8009020:	e026      	b.n	8009070 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009034:	2b03      	cmp	r3, #3
 8009036:	d105      	bne.n	8009044 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009044:	2180      	movs	r1, #128	@ 0x80
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f001 fa50 	bl	800a4ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fecc 	bl	8009dea <USBD_CtlReceiveStatus>
 8009052:	e00d      	b.n	8009070 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800905a:	2b04      	cmp	r3, #4
 800905c:	d004      	beq.n	8009068 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009068:	2180      	movs	r1, #128	@ 0x80
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 fa3e 	bl	800a4ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009076:	2b01      	cmp	r3, #1
 8009078:	d11d      	bne.n	80090b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7ff fe81 	bl	8008d82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009088:	e015      	b.n	80090b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800909c:	2b03      	cmp	r3, #3
 800909e:	d108      	bne.n	80090b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	7afa      	ldrb	r2, [r7, #11]
 80090aa:	4611      	mov	r1, r2
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	4798      	blx	r3
 80090b0:	e001      	b.n	80090b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090b2:	2302      	movs	r3, #2
 80090b4:	e000      	b.n	80090b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 f9c7 	bl	800a462 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2240      	movs	r2, #64	@ 0x40
 80090e0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090e4:	2340      	movs	r3, #64	@ 0x40
 80090e6:	2200      	movs	r2, #0
 80090e8:	2180      	movs	r1, #128	@ 0x80
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f9b9 	bl	800a462 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2240      	movs	r2, #64	@ 0x40
 80090fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6852      	ldr	r2, [r2, #4]
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	4611      	mov	r1, r2
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
  }

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2204      	movs	r2, #4
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009196:	2b04      	cmp	r3, #4
 8009198:	d105      	bne.n	80091a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d10b      	bne.n	80091dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091fe:	2b40      	cmp	r3, #64	@ 0x40
 8009200:	d005      	beq.n	800920e <USBD_StdDevReq+0x26>
 8009202:	2b40      	cmp	r3, #64	@ 0x40
 8009204:	d84f      	bhi.n	80092a6 <USBD_StdDevReq+0xbe>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <USBD_StdDevReq+0x36>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d14b      	bne.n	80092a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
      break;
 800921c:	e048      	b.n	80092b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b09      	cmp	r3, #9
 8009224:	d839      	bhi.n	800929a <USBD_StdDevReq+0xb2>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <USBD_StdDevReq+0x44>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	0800927d 	.word	0x0800927d
 8009230:	08009291 	.word	0x08009291
 8009234:	0800929b 	.word	0x0800929b
 8009238:	08009287 	.word	0x08009287
 800923c:	0800929b 	.word	0x0800929b
 8009240:	0800925f 	.word	0x0800925f
 8009244:	08009255 	.word	0x08009255
 8009248:	0800929b 	.word	0x0800929b
 800924c:	08009273 	.word	0x08009273
 8009250:	08009269 	.word	0x08009269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9dc 	bl	8009614 <USBD_GetDescriptor>
          break;
 800925c:	e022      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fb3f 	bl	80098e4 <USBD_SetAddress>
          break;
 8009266:	e01d      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fb7e 	bl	800996c <USBD_SetConfig>
          break;
 8009270:	e018      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc07 	bl	8009a88 <USBD_GetConfig>
          break;
 800927a:	e013      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc37 	bl	8009af2 <USBD_GetStatus>
          break;
 8009284:	e00e      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fc65 	bl	8009b58 <USBD_SetFeature>
          break;
 800928e:	e009      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fc74 	bl	8009b80 <USBD_ClrFeature>
          break;
 8009298:	e004      	b.n	80092a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fcc9 	bl	8009c34 <USBD_CtlError>
          break;
 80092a2:	bf00      	nop
      }
      break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fcc3 	bl	8009c34 <USBD_CtlError>
      break;
 80092ae:	bf00      	nop
  }

  return ret;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop

080092bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092d2:	2b40      	cmp	r3, #64	@ 0x40
 80092d4:	d005      	beq.n	80092e2 <USBD_StdItfReq+0x26>
 80092d6:	2b40      	cmp	r3, #64	@ 0x40
 80092d8:	d82e      	bhi.n	8009338 <USBD_StdItfReq+0x7c>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <USBD_StdItfReq+0x26>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d12a      	bne.n	8009338 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e8:	3b01      	subs	r3, #1
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d81d      	bhi.n	800932a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	889b      	ldrh	r3, [r3, #4]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d813      	bhi.n	8009320 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	88db      	ldrh	r3, [r3, #6]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d110      	bne.n	8009334 <USBD_StdItfReq+0x78>
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10d      	bne.n	8009334 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fd53 	bl	8009dc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800931e:	e009      	b.n	8009334 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc86 	bl	8009c34 <USBD_CtlError>
          break;
 8009328:	e004      	b.n	8009334 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc81 	bl	8009c34 <USBD_CtlError>
          break;
 8009332:	e000      	b.n	8009336 <USBD_StdItfReq+0x7a>
          break;
 8009334:	bf00      	nop
      }
      break;
 8009336:	e004      	b.n	8009342 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fc7a 	bl	8009c34 <USBD_CtlError>
      break;
 8009340:	bf00      	nop
  }

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	889b      	ldrh	r3, [r3, #4]
 800935e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009368:	2b40      	cmp	r3, #64	@ 0x40
 800936a:	d007      	beq.n	800937c <USBD_StdEPReq+0x30>
 800936c:	2b40      	cmp	r3, #64	@ 0x40
 800936e:	f200 8146 	bhi.w	80095fe <USBD_StdEPReq+0x2b2>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <USBD_StdEPReq+0x40>
 8009376:	2b20      	cmp	r3, #32
 8009378:	f040 8141 	bne.w	80095fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
      break;
 800938a:	e13d      	b.n	8009608 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009394:	2b20      	cmp	r3, #32
 8009396:	d10a      	bne.n	80093ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	e12d      	b.n	800960a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d007      	beq.n	80093c6 <USBD_StdEPReq+0x7a>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	f300 811b 	bgt.w	80095f2 <USBD_StdEPReq+0x2a6>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d072      	beq.n	80094a6 <USBD_StdEPReq+0x15a>
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d03a      	beq.n	800943a <USBD_StdEPReq+0xee>
 80093c4:	e115      	b.n	80095f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d002      	beq.n	80093d6 <USBD_StdEPReq+0x8a>
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d015      	beq.n	8009400 <USBD_StdEPReq+0xb4>
 80093d4:	e02b      	b.n	800942e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00c      	beq.n	80093f6 <USBD_StdEPReq+0xaa>
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b80      	cmp	r3, #128	@ 0x80
 80093e0:	d009      	beq.n	80093f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 f880 	bl	800a4ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093ec:	2180      	movs	r1, #128	@ 0x80
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 f87c 	bl	800a4ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f4:	e020      	b.n	8009438 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fc1b 	bl	8009c34 <USBD_CtlError>
              break;
 80093fe:	e01b      	b.n	8009438 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	885b      	ldrh	r3, [r3, #2]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10e      	bne.n	8009426 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <USBD_StdEPReq+0xda>
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b80      	cmp	r3, #128	@ 0x80
 8009412:	d008      	beq.n	8009426 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	88db      	ldrh	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f863 	bl	800a4ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fccc 	bl	8009dc4 <USBD_CtlSendStatus>

              break;
 800942c:	e004      	b.n	8009438 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fbff 	bl	8009c34 <USBD_CtlError>
              break;
 8009436:	bf00      	nop
          }
          break;
 8009438:	e0e0      	b.n	80095fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009440:	2b02      	cmp	r3, #2
 8009442:	d002      	beq.n	800944a <USBD_StdEPReq+0xfe>
 8009444:	2b03      	cmp	r3, #3
 8009446:	d015      	beq.n	8009474 <USBD_StdEPReq+0x128>
 8009448:	e026      	b.n	8009498 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00c      	beq.n	800946a <USBD_StdEPReq+0x11e>
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b80      	cmp	r3, #128	@ 0x80
 8009454:	d009      	beq.n	800946a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 f846 	bl	800a4ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009460:	2180      	movs	r1, #128	@ 0x80
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 f842 	bl	800a4ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009468:	e01c      	b.n	80094a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fbe1 	bl	8009c34 <USBD_CtlError>
              break;
 8009472:	e017      	b.n	80094a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d112      	bne.n	80094a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 f84d 	bl	800a52a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc97 	bl	8009dc4 <USBD_CtlSendStatus>
              }
              break;
 8009496:	e004      	b.n	80094a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fbca 	bl	8009c34 <USBD_CtlError>
              break;
 80094a0:	e000      	b.n	80094a4 <USBD_StdEPReq+0x158>
              break;
 80094a2:	bf00      	nop
          }
          break;
 80094a4:	e0aa      	b.n	80095fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d002      	beq.n	80094b6 <USBD_StdEPReq+0x16a>
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d032      	beq.n	800951a <USBD_StdEPReq+0x1ce>
 80094b4:	e097      	b.n	80095e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <USBD_StdEPReq+0x180>
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	d004      	beq.n	80094cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fbb5 	bl	8009c34 <USBD_CtlError>
                break;
 80094ca:	e091      	b.n	80095f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	da0b      	bge.n	80094ec <USBD_StdEPReq+0x1a0>
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	3310      	adds	r3, #16
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	4413      	add	r3, r2
 80094e8:	3304      	adds	r3, #4
 80094ea:	e00b      	b.n	8009504 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	4413      	add	r3, r2
 8009502:	3304      	adds	r3, #4
 8009504:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2202      	movs	r2, #2
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fbf8 	bl	8009d08 <USBD_CtlSendData>
              break;
 8009518:	e06a      	b.n	80095f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800951a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	da11      	bge.n	8009546 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	3318      	adds	r3, #24
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d117      	bne.n	800956c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fb78 	bl	8009c34 <USBD_CtlError>
                  break;
 8009544:	e054      	b.n	80095f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	f003 020f 	and.w	r2, r3, #15
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d104      	bne.n	800956c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb65 	bl	8009c34 <USBD_CtlError>
                  break;
 800956a:	e041      	b.n	80095f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da0b      	bge.n	800958c <USBD_StdEPReq+0x240>
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	3310      	adds	r3, #16
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	3304      	adds	r3, #4
 800958a:	e00b      	b.n	80095a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <USBD_StdEPReq+0x266>
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b80      	cmp	r3, #128	@ 0x80
 80095b0:	d103      	bne.n	80095ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	e00e      	b.n	80095d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 ffd2 	bl	800a568 <USBD_LL_IsStallEP>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2201      	movs	r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	e002      	b.n	80095d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2202      	movs	r2, #2
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb92 	bl	8009d08 <USBD_CtlSendData>
              break;
 80095e4:	e004      	b.n	80095f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb23 	bl	8009c34 <USBD_CtlError>
              break;
 80095ee:	bf00      	nop
          }
          break;
 80095f0:	e004      	b.n	80095fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb1d 	bl	8009c34 <USBD_CtlError>
          break;
 80095fa:	bf00      	nop
      }
      break;
 80095fc:	e004      	b.n	8009608 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fb17 	bl	8009c34 <USBD_CtlError>
      break;
 8009606:	bf00      	nop
  }

  return ret;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	2b06      	cmp	r3, #6
 8009636:	f200 8128 	bhi.w	800988a <USBD_GetDescriptor+0x276>
 800963a:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <USBD_GetDescriptor+0x2c>)
 800963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009640:	0800965d 	.word	0x0800965d
 8009644:	08009675 	.word	0x08009675
 8009648:	080096b5 	.word	0x080096b5
 800964c:	0800988b 	.word	0x0800988b
 8009650:	0800988b 	.word	0x0800988b
 8009654:	0800982b 	.word	0x0800982b
 8009658:	08009857 	.word	0x08009857
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7c12      	ldrb	r2, [r2, #16]
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	4610      	mov	r0, r2
 800966e:	4798      	blx	r3
 8009670:	60f8      	str	r0, [r7, #12]
      break;
 8009672:	e112      	b.n	800989a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7c1b      	ldrb	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10d      	bne.n	8009698 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	f107 0208 	add.w	r2, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3301      	adds	r3, #1
 8009692:	2202      	movs	r2, #2
 8009694:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009696:	e100      	b.n	800989a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	f107 0208 	add.w	r2, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	2202      	movs	r2, #2
 80096b0:	701a      	strb	r2, [r3, #0]
      break;
 80096b2:	e0f2      	b.n	800989a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	885b      	ldrh	r3, [r3, #2]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b05      	cmp	r3, #5
 80096bc:	f200 80ac 	bhi.w	8009818 <USBD_GetDescriptor+0x204>
 80096c0:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <USBD_GetDescriptor+0xb4>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	08009715 	.word	0x08009715
 80096d0:	08009749 	.word	0x08009749
 80096d4:	0800977d 	.word	0x0800977d
 80096d8:	080097b1 	.word	0x080097b1
 80096dc:	080097e5 	.word	0x080097e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e091      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa94 	bl	8009c34 <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e089      	b.n	8009828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e077      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa7a 	bl	8009c34 <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e06f      	b.n	8009828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7c12      	ldrb	r2, [r2, #16]
 8009760:	f107 0108 	add.w	r1, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976a:	e05d      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa60 	bl	8009c34 <USBD_CtlError>
            err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
          break;
 800977a:	e055      	b.n	8009828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	7c12      	ldrb	r2, [r2, #16]
 8009794:	f107 0108 	add.w	r1, r7, #8
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800979e:	e043      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa46 	bl	8009c34 <USBD_CtlError>
            err++;
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	3301      	adds	r3, #1
 80097ac:	72fb      	strb	r3, [r7, #11]
          break;
 80097ae:	e03b      	b.n	8009828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	7c12      	ldrb	r2, [r2, #16]
 80097c8:	f107 0108 	add.w	r1, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d2:	e029      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa2c 	bl	8009c34 <USBD_CtlError>
            err++;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	3301      	adds	r3, #1
 80097e0:	72fb      	strb	r3, [r7, #11]
          break;
 80097e2:	e021      	b.n	8009828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009806:	e00f      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa12 	bl	8009c34 <USBD_CtlError>
            err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
          break;
 8009816:	e007      	b.n	8009828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa0a 	bl	8009c34 <USBD_CtlError>
          err++;
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	3301      	adds	r3, #1
 8009824:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009826:	e038      	b.n	800989a <USBD_GetDescriptor+0x286>
 8009828:	e037      	b.n	800989a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7c1b      	ldrb	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983a:	f107 0208 	add.w	r2, r7, #8
 800983e:	4610      	mov	r0, r2
 8009840:	4798      	blx	r3
 8009842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009844:	e029      	b.n	800989a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9f3 	bl	8009c34 <USBD_CtlError>
        err++;
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	3301      	adds	r3, #1
 8009852:	72fb      	strb	r3, [r7, #11]
      break;
 8009854:	e021      	b.n	800989a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7c1b      	ldrb	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10d      	bne.n	800987a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009866:	f107 0208 	add.w	r2, r7, #8
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
 800986e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3301      	adds	r3, #1
 8009874:	2207      	movs	r2, #7
 8009876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009878:	e00f      	b.n	800989a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f9d9 	bl	8009c34 <USBD_CtlError>
        err++;
 8009882:	7afb      	ldrb	r3, [r7, #11]
 8009884:	3301      	adds	r3, #1
 8009886:	72fb      	strb	r3, [r7, #11]
      break;
 8009888:	e007      	b.n	800989a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9d1 	bl	8009c34 <USBD_CtlError>
      err++;
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	3301      	adds	r3, #1
 8009896:	72fb      	strb	r3, [r7, #11]
      break;
 8009898:	bf00      	nop
  }

  if (err != 0U)
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d11c      	bne.n	80098da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80098a0:	893b      	ldrh	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d011      	beq.n	80098ca <USBD_GetDescriptor+0x2b6>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	88db      	ldrh	r3, [r3, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00d      	beq.n	80098ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	88da      	ldrh	r2, [r3, #6]
 80098b2:	893b      	ldrh	r3, [r7, #8]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bf28      	it	cs
 80098b8:	4613      	movcs	r3, r2
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098be:	893b      	ldrh	r3, [r7, #8]
 80098c0:	461a      	mov	r2, r3
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fa1f 	bl	8009d08 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88db      	ldrh	r3, [r3, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d104      	bne.n	80098dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa76 	bl	8009dc4 <USBD_CtlSendStatus>
 80098d8:	e000      	b.n	80098dc <USBD_GetDescriptor+0x2c8>
    return;
 80098da:	bf00      	nop
    }
  }
}
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop

080098e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	889b      	ldrh	r3, [r3, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d130      	bne.n	8009958 <USBD_SetAddress+0x74>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d12c      	bne.n	8009958 <USBD_SetAddress+0x74>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	885b      	ldrh	r3, [r3, #2]
 8009902:	2b7f      	cmp	r3, #127	@ 0x7f
 8009904:	d828      	bhi.n	8009958 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009910:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009918:	2b03      	cmp	r3, #3
 800991a:	d104      	bne.n	8009926 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f988 	bl	8009c34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009924:	e01d      	b.n	8009962 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7bfa      	ldrb	r2, [r7, #15]
 800992a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fe44 	bl	800a5c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fa43 	bl	8009dc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994c:	e009      	b.n	8009962 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	e004      	b.n	8009962 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f96a 	bl	8009c34 <USBD_CtlError>
  }
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	885b      	ldrh	r3, [r3, #2]
 800997a:	b2da      	uxtb	r2, r3
 800997c:	4b41      	ldr	r3, [pc, #260]	@ (8009a84 <USBD_SetConfig+0x118>)
 800997e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009980:	4b40      	ldr	r3, [pc, #256]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d904      	bls.n	8009992 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f952 	bl	8009c34 <USBD_CtlError>
 8009990:	e075      	b.n	8009a7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009998:	2b02      	cmp	r3, #2
 800999a:	d002      	beq.n	80099a2 <USBD_SetConfig+0x36>
 800999c:	2b03      	cmp	r3, #3
 800999e:	d023      	beq.n	80099e8 <USBD_SetConfig+0x7c>
 80099a0:	e062      	b.n	8009a68 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80099a2:	4b38      	ldr	r3, [pc, #224]	@ (8009a84 <USBD_SetConfig+0x118>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01a      	beq.n	80099e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80099aa:	4b36      	ldr	r3, [pc, #216]	@ (8009a84 <USBD_SetConfig+0x118>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2203      	movs	r2, #3
 80099b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099bc:	4b31      	ldr	r3, [pc, #196]	@ (8009a84 <USBD_SetConfig+0x118>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff f9e7 	bl	8008d96 <USBD_SetClassConfig>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d104      	bne.n	80099d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f92f 	bl	8009c34 <USBD_CtlError>
            return;
 80099d6:	e052      	b.n	8009a7e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9f3 	bl	8009dc4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099de:	e04e      	b.n	8009a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9ef 	bl	8009dc4 <USBD_CtlSendStatus>
        break;
 80099e6:	e04a      	b.n	8009a7e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099e8:	4b26      	ldr	r3, [pc, #152]	@ (8009a84 <USBD_SetConfig+0x118>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d112      	bne.n	8009a16 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80099f8:	4b22      	ldr	r3, [pc, #136]	@ (8009a84 <USBD_SetConfig+0x118>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a02:	4b20      	ldr	r3, [pc, #128]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff f9e3 	bl	8008dd4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9d8 	bl	8009dc4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a14:	e033      	b.n	8009a7e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a16:	4b1b      	ldr	r3, [pc, #108]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d01d      	beq.n	8009a60 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff f9d1 	bl	8008dd4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a3c:	4b11      	ldr	r3, [pc, #68]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff f9a7 	bl	8008d96 <USBD_SetClassConfig>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d104      	bne.n	8009a58 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f8ef 	bl	8009c34 <USBD_CtlError>
            return;
 8009a56:	e012      	b.n	8009a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f9b3 	bl	8009dc4 <USBD_CtlSendStatus>
        break;
 8009a5e:	e00e      	b.n	8009a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9af 	bl	8009dc4 <USBD_CtlSendStatus>
        break;
 8009a66:	e00a      	b.n	8009a7e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8e2 	bl	8009c34 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a70:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <USBD_SetConfig+0x118>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff f9ac 	bl	8008dd4 <USBD_ClrClassConfig>
        break;
 8009a7c:	bf00      	nop
    }
  }
}
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20002e48 	.word	0x20002e48

08009a88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	88db      	ldrh	r3, [r3, #6]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d004      	beq.n	8009aa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8c9 	bl	8009c34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aa2:	e022      	b.n	8009aea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	dc02      	bgt.n	8009ab4 <USBD_GetConfig+0x2c>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dc03      	bgt.n	8009aba <USBD_GetConfig+0x32>
 8009ab2:	e015      	b.n	8009ae0 <USBD_GetConfig+0x58>
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d00b      	beq.n	8009ad0 <USBD_GetConfig+0x48>
 8009ab8:	e012      	b.n	8009ae0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f91d 	bl	8009d08 <USBD_CtlSendData>
        break;
 8009ace:	e00c      	b.n	8009aea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f915 	bl	8009d08 <USBD_CtlSendData>
        break;
 8009ade:	e004      	b.n	8009aea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f8a6 	bl	8009c34 <USBD_CtlError>
        break;
 8009ae8:	bf00      	nop
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b02:	3b01      	subs	r3, #1
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d81e      	bhi.n	8009b46 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	88db      	ldrh	r3, [r3, #6]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d004      	beq.n	8009b1a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f88e 	bl	8009c34 <USBD_CtlError>
        break;
 8009b18:	e01a      	b.n	8009b50 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f043 0202 	orr.w	r2, r3, #2
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8e2 	bl	8009d08 <USBD_CtlSendData>
      break;
 8009b44:	e004      	b.n	8009b50 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f873 	bl	8009c34 <USBD_CtlError>
      break;
 8009b4e:	bf00      	nop
  }
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	885b      	ldrh	r3, [r3, #2]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d106      	bne.n	8009b78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f926 	bl	8009dc4 <USBD_CtlSendStatus>
  }
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b90:	3b01      	subs	r3, #1
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d80b      	bhi.n	8009bae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	885b      	ldrh	r3, [r3, #2]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d10c      	bne.n	8009bb8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f90c 	bl	8009dc4 <USBD_CtlSendStatus>
      }
      break;
 8009bac:	e004      	b.n	8009bb8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f83f 	bl	8009c34 <USBD_CtlError>
      break;
 8009bb6:	e000      	b.n	8009bba <USBD_ClrFeature+0x3a>
      break;
 8009bb8:	bf00      	nop
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	785a      	ldrb	r2, [r3, #1]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3302      	adds	r3, #2
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	3303      	adds	r3, #3
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4413      	add	r3, r2
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	3305      	adds	r3, #5
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4413      	add	r3, r2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	3306      	adds	r3, #6
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	3307      	adds	r3, #7
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4413      	add	r3, r2
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	80da      	strh	r2, [r3, #6]

}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr

08009c34 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c3e:	2180      	movs	r1, #128	@ 0x80
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fc53 	bl	800a4ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c46:	2100      	movs	r1, #0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc4f 	bl	800a4ec <USBD_LL_StallEP>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d032      	beq.n	8009cd2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 f834 	bl	8009cda <USBD_GetLen>
 8009c72:	4603      	mov	r3, r0
 8009c74:	3301      	adds	r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	75fa      	strb	r2, [r7, #23]
 8009c86:	461a      	mov	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7812      	ldrb	r2, [r2, #0]
 8009c90:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	75fa      	strb	r2, [r7, #23]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	2203      	movs	r2, #3
 8009ca0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ca2:	e012      	b.n	8009cca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	60fa      	str	r2, [r7, #12]
 8009caa:	7dfa      	ldrb	r2, [r7, #23]
 8009cac:	1c51      	adds	r1, r2, #1
 8009cae:	75f9      	strb	r1, [r7, #23]
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	75fa      	strb	r2, [r7, #23]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e8      	bne.n	8009ca4 <USBD_GetString+0x4e>
    }
  }
}
 8009cd2:	bf00      	nop
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b085      	sub	sp, #20
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009ce6:	e005      	b.n	8009cf4 <USBD_GetLen+0x1a>
  {
    len++;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	3301      	adds	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f5      	bne.n	8009ce8 <USBD_GetLen+0xe>
  }

  return len;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d24:	88fa      	ldrh	r2, [r7, #6]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d2a:	88fb      	ldrh	r3, [r7, #6]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	2100      	movs	r1, #0
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fc64 	bl	800a5fe <USBD_LL_Transmit>

  return USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	2100      	movs	r1, #0
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fc52 	bl	800a5fe <USBD_LL_Transmit>

  return USBD_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2203      	movs	r2, #3
 8009d76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d7a:	88fa      	ldrh	r2, [r7, #6]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d82:	88fa      	ldrh	r2, [r7, #6]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 fc57 	bl	800a644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	4613      	mov	r3, r2
 8009dac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dae:	88fb      	ldrh	r3, [r7, #6]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	2100      	movs	r1, #0
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fc45 	bl	800a644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc0f 	bl	800a5fe <USBD_LL_Transmit>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2205      	movs	r2, #5
 8009df6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fc1f 	bl	800a644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e14:	2200      	movs	r2, #0
 8009e16:	4912      	ldr	r1, [pc, #72]	@ (8009e60 <MX_USB_DEVICE_Init+0x50>)
 8009e18:	4812      	ldr	r0, [pc, #72]	@ (8009e64 <MX_USB_DEVICE_Init+0x54>)
 8009e1a:	f7fe ff62 	bl	8008ce2 <USBD_Init>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e24:	f7f7 f8df 	bl	8000fe6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e28:	490f      	ldr	r1, [pc, #60]	@ (8009e68 <MX_USB_DEVICE_Init+0x58>)
 8009e2a:	480e      	ldr	r0, [pc, #56]	@ (8009e64 <MX_USB_DEVICE_Init+0x54>)
 8009e2c:	f7fe ff84 	bl	8008d38 <USBD_RegisterClass>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e36:	f7f7 f8d6 	bl	8000fe6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e3a:	490c      	ldr	r1, [pc, #48]	@ (8009e6c <MX_USB_DEVICE_Init+0x5c>)
 8009e3c:	4809      	ldr	r0, [pc, #36]	@ (8009e64 <MX_USB_DEVICE_Init+0x54>)
 8009e3e:	f7fe feb5 	bl	8008bac <USBD_CDC_RegisterInterface>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e48:	f7f7 f8cd 	bl	8000fe6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e4c:	4805      	ldr	r0, [pc, #20]	@ (8009e64 <MX_USB_DEVICE_Init+0x54>)
 8009e4e:	f7fe ff8c 	bl	8008d6a <USBD_Start>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e58:	f7f7 f8c5 	bl	8000fe6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e5c:	bf00      	nop
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000208 	.word	0x20000208
 8009e64:	20002e4c 	.word	0x20002e4c
 8009e68:	200000f4 	.word	0x200000f4
 8009e6c:	200001f8 	.word	0x200001f8

08009e70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e74:	2200      	movs	r2, #0
 8009e76:	4905      	ldr	r1, [pc, #20]	@ (8009e8c <CDC_Init_FS+0x1c>)
 8009e78:	4805      	ldr	r0, [pc, #20]	@ (8009e90 <CDC_Init_FS+0x20>)
 8009e7a:	f7fe fead 	bl	8008bd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e7e:	4905      	ldr	r1, [pc, #20]	@ (8009e94 <CDC_Init_FS+0x24>)
 8009e80:	4803      	ldr	r0, [pc, #12]	@ (8009e90 <CDC_Init_FS+0x20>)
 8009e82:	f7fe fec2 	bl	8008c0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	200034f8 	.word	0x200034f8
 8009e90:	20002e4c 	.word	0x20002e4c
 8009e94:	20003110 	.word	0x20003110

08009e98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr
	...

08009ea8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	2b23      	cmp	r3, #35	@ 0x23
 8009ebc:	d84a      	bhi.n	8009f54 <CDC_Control_FS+0xac>
 8009ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec4 <CDC_Control_FS+0x1c>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009f55 	.word	0x08009f55
 8009ec8:	08009f55 	.word	0x08009f55
 8009ecc:	08009f55 	.word	0x08009f55
 8009ed0:	08009f55 	.word	0x08009f55
 8009ed4:	08009f55 	.word	0x08009f55
 8009ed8:	08009f55 	.word	0x08009f55
 8009edc:	08009f55 	.word	0x08009f55
 8009ee0:	08009f55 	.word	0x08009f55
 8009ee4:	08009f55 	.word	0x08009f55
 8009ee8:	08009f55 	.word	0x08009f55
 8009eec:	08009f55 	.word	0x08009f55
 8009ef0:	08009f55 	.word	0x08009f55
 8009ef4:	08009f55 	.word	0x08009f55
 8009ef8:	08009f55 	.word	0x08009f55
 8009efc:	08009f55 	.word	0x08009f55
 8009f00:	08009f55 	.word	0x08009f55
 8009f04:	08009f55 	.word	0x08009f55
 8009f08:	08009f55 	.word	0x08009f55
 8009f0c:	08009f55 	.word	0x08009f55
 8009f10:	08009f55 	.word	0x08009f55
 8009f14:	08009f55 	.word	0x08009f55
 8009f18:	08009f55 	.word	0x08009f55
 8009f1c:	08009f55 	.word	0x08009f55
 8009f20:	08009f55 	.word	0x08009f55
 8009f24:	08009f55 	.word	0x08009f55
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	08009f55 	.word	0x08009f55
 8009f34:	08009f55 	.word	0x08009f55
 8009f38:	08009f55 	.word	0x08009f55
 8009f3c:	08009f55 	.word	0x08009f55
 8009f40:	08009f55 	.word	0x08009f55
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f55 	.word	0x08009f55
 8009f4c:	08009f55 	.word	0x08009f55
 8009f50:	08009f55 	.word	0x08009f55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f54:	bf00      	nop
  }

  return (USBD_OK);
 8009f56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop

08009f64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4805      	ldr	r0, [pc, #20]	@ (8009f88 <CDC_Receive_FS+0x24>)
 8009f72:	f7fe fe4a 	bl	8008c0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f76:	4804      	ldr	r0, [pc, #16]	@ (8009f88 <CDC_Receive_FS+0x24>)
 8009f78:	f7fe fe89 	bl	8008c8e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20002e4c 	.word	0x20002e4c

08009f8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd4 <CDC_Transmit_FS+0x48>)
 8009f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fa2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e00b      	b.n	8009fca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fb2:	887b      	ldrh	r3, [r7, #2]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4806      	ldr	r0, [pc, #24]	@ (8009fd4 <CDC_Transmit_FS+0x48>)
 8009fba:	f7fe fe0d 	bl	8008bd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fbe:	4805      	ldr	r0, [pc, #20]	@ (8009fd4 <CDC_Transmit_FS+0x48>)
 8009fc0:	f7fe fe36 	bl	8008c30 <USBD_CDC_TransmitPacket>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20002e4c 	.word	0x20002e4c

08009fd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	6039      	str	r1, [r7, #0]
 8009fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2212      	movs	r2, #18
 8009fe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fea:	4b03      	ldr	r3, [pc, #12]	@ (8009ff8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000224 	.word	0x20000224

08009ffc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2204      	movs	r2, #4
 800a00c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a00e:	4b03      	ldr	r3, [pc, #12]	@ (800a01c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20000238 	.word	0x20000238

0800a020 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4907      	ldr	r1, [pc, #28]	@ (800a054 <USBD_FS_ProductStrDescriptor+0x34>)
 800a036:	4808      	ldr	r0, [pc, #32]	@ (800a058 <USBD_FS_ProductStrDescriptor+0x38>)
 800a038:	f7ff fe0d 	bl	8009c56 <USBD_GetString>
 800a03c:	e004      	b.n	800a048 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4904      	ldr	r1, [pc, #16]	@ (800a054 <USBD_FS_ProductStrDescriptor+0x34>)
 800a042:	4805      	ldr	r0, [pc, #20]	@ (800a058 <USBD_FS_ProductStrDescriptor+0x38>)
 800a044:	f7ff fe07 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a048:	4b02      	ldr	r3, [pc, #8]	@ (800a054 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200038e0 	.word	0x200038e0
 800a058:	0800b1a4 	.word	0x0800b1a4

0800a05c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	4904      	ldr	r1, [pc, #16]	@ (800a07c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a06c:	4804      	ldr	r0, [pc, #16]	@ (800a080 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a06e:	f7ff fdf2 	bl	8009c56 <USBD_GetString>
  return USBD_StrDesc;
 800a072:	4b02      	ldr	r3, [pc, #8]	@ (800a07c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200038e0 	.word	0x200038e0
 800a080:	0800b1bc 	.word	0x0800b1bc

0800a084 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	6039      	str	r1, [r7, #0]
 800a08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	221a      	movs	r2, #26
 800a094:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a096:	f000 f843 	bl	800a120 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a09a:	4b02      	ldr	r3, [pc, #8]	@ (800a0a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	2000023c 	.word	0x2000023c

0800a0a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4907      	ldr	r1, [pc, #28]	@ (800a0dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0be:	4808      	ldr	r0, [pc, #32]	@ (800a0e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0c0:	f7ff fdc9 	bl	8009c56 <USBD_GetString>
 800a0c4:	e004      	b.n	800a0d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4904      	ldr	r1, [pc, #16]	@ (800a0dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ca:	4805      	ldr	r0, [pc, #20]	@ (800a0e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0cc:	f7ff fdc3 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d0:	4b02      	ldr	r3, [pc, #8]	@ (800a0dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	200038e0 	.word	0x200038e0
 800a0e0:	0800b1d0 	.word	0x0800b1d0

0800a0e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d105      	bne.n	800a102 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4907      	ldr	r1, [pc, #28]	@ (800a118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0fa:	4808      	ldr	r0, [pc, #32]	@ (800a11c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0fc:	f7ff fdab 	bl	8009c56 <USBD_GetString>
 800a100:	e004      	b.n	800a10c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4904      	ldr	r1, [pc, #16]	@ (800a118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a106:	4805      	ldr	r0, [pc, #20]	@ (800a11c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a108:	f7ff fda5 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a10c:	4b02      	ldr	r3, [pc, #8]	@ (800a118 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	200038e0 	.word	0x200038e0
 800a11c:	0800b1dc 	.word	0x0800b1dc

0800a120 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a126:	4b0f      	ldr	r3, [pc, #60]	@ (800a164 <Get_SerialNum+0x44>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a12c:	4b0e      	ldr	r3, [pc, #56]	@ (800a168 <Get_SerialNum+0x48>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a132:	4b0e      	ldr	r3, [pc, #56]	@ (800a16c <Get_SerialNum+0x4c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a146:	2208      	movs	r2, #8
 800a148:	4909      	ldr	r1, [pc, #36]	@ (800a170 <Get_SerialNum+0x50>)
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 f814 	bl	800a178 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a150:	2204      	movs	r2, #4
 800a152:	4908      	ldr	r1, [pc, #32]	@ (800a174 <Get_SerialNum+0x54>)
 800a154:	68b8      	ldr	r0, [r7, #8]
 800a156:	f000 f80f 	bl	800a178 <IntToUnicode>
  }
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	1ffff7e8 	.word	0x1ffff7e8
 800a168:	1ffff7ec 	.word	0x1ffff7ec
 800a16c:	1ffff7f0 	.word	0x1ffff7f0
 800a170:	2000023e 	.word	0x2000023e
 800a174:	2000024e 	.word	0x2000024e

0800a178 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]
 800a18e:	e027      	b.n	800a1e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	0f1b      	lsrs	r3, r3, #28
 800a194:	2b09      	cmp	r3, #9
 800a196:	d80b      	bhi.n	800a1b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	0f1b      	lsrs	r3, r3, #28
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3230      	adds	r2, #48	@ 0x30
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	e00a      	b.n	800a1c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0f1b      	lsrs	r3, r3, #28
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	440b      	add	r3, r1
 800a1c0:	3237      	adds	r2, #55	@ 0x37
 800a1c2:	b2d2      	uxtb	r2, r2
 800a1c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	75fb      	strb	r3, [r7, #23]
 800a1e0:	7dfa      	ldrb	r2, [r7, #23]
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d3d3      	bcc.n	800a190 <IntToUnicode+0x18>
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0d      	ldr	r2, [pc, #52]	@ (800a238 <HAL_PCD_MspInit+0x44>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d113      	bne.n	800a22e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a206:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <HAL_PCD_MspInit+0x48>)
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	4a0c      	ldr	r2, [pc, #48]	@ (800a23c <HAL_PCD_MspInit+0x48>)
 800a20c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a210:	61d3      	str	r3, [r2, #28]
 800a212:	4b0a      	ldr	r3, [pc, #40]	@ (800a23c <HAL_PCD_MspInit+0x48>)
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	2014      	movs	r0, #20
 800a224:	f7f7 f895 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a228:	2014      	movs	r0, #20
 800a22a:	f7f7 f8ae 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	40005c00 	.word	0x40005c00
 800a23c:	40021000 	.word	0x40021000

0800a240 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a254:	4619      	mov	r1, r3
 800a256:	4610      	mov	r0, r2
 800a258:	f7fe fdcf 	bl	8008dfa <USBD_LL_SetupStage>
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a276:	78fa      	ldrb	r2, [r7, #3]
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	440b      	add	r3, r1
 800a284:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	4619      	mov	r1, r3
 800a28e:	f7fe fe01 	bl	8008e94 <USBD_LL_DataOutStage>
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	440b      	add	r3, r1
 800a2ba:	333c      	adds	r3, #60	@ 0x3c
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f7fe fe58 	bl	8008f76 <USBD_LL_DataInStage>
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b082      	sub	sp, #8
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe ff68 	bl	80091b2 <USBD_LL_SOF>
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d001      	beq.n	800a302 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2fe:	f7f6 fe72 	bl	8000fe6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a308:	7bfa      	ldrb	r2, [r7, #15]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe ff18 	bl	8009142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fed1 	bl	80090c0 <USBD_LL_Reset>
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe ff12 	bl	8009160 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <HAL_PCD_SuspendCallback+0x30>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	4a03      	ldr	r2, [pc, #12]	@ (800a358 <HAL_PCD_SuspendCallback+0x30>)
 800a34a:	f043 0306 	orr.w	r3, r3, #6
 800a34e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	e000ed00 	.word	0xe000ed00

0800a35c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe ff0c 	bl	8009188 <USBD_LL_Resume>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a380:	4a28      	ldr	r2, [pc, #160]	@ (800a424 <USBD_LL_Init+0xac>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a26      	ldr	r2, [pc, #152]	@ (800a424 <USBD_LL_Init+0xac>)
 800a38c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a390:	4b24      	ldr	r3, [pc, #144]	@ (800a424 <USBD_LL_Init+0xac>)
 800a392:	4a25      	ldr	r2, [pc, #148]	@ (800a428 <USBD_LL_Init+0xb0>)
 800a394:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a396:	4b23      	ldr	r3, [pc, #140]	@ (800a424 <USBD_LL_Init+0xac>)
 800a398:	2208      	movs	r2, #8
 800a39a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a39c:	4b21      	ldr	r3, [pc, #132]	@ (800a424 <USBD_LL_Init+0xac>)
 800a39e:	2202      	movs	r2, #2
 800a3a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3a2:	4b20      	ldr	r3, [pc, #128]	@ (800a424 <USBD_LL_Init+0xac>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a424 <USBD_LL_Init+0xac>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a424 <USBD_LL_Init+0xac>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3b4:	481b      	ldr	r0, [pc, #108]	@ (800a424 <USBD_LL_Init+0xac>)
 800a3b6:	f7f7 f9aa 	bl	800170e <HAL_PCD_Init>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a3c0:	f7f6 fe11 	bl	8000fe6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3ca:	2318      	movs	r3, #24
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	f7f8 fec8 	bl	8003164 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3da:	2358      	movs	r3, #88	@ 0x58
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2180      	movs	r1, #128	@ 0x80
 800a3e0:	f7f8 fec0 	bl	8003164 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3ea:	23c0      	movs	r3, #192	@ 0xc0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2181      	movs	r1, #129	@ 0x81
 800a3f0:	f7f8 feb8 	bl	8003164 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a3fe:	2200      	movs	r2, #0
 800a400:	2101      	movs	r1, #1
 800a402:	f7f8 feaf 	bl	8003164 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a40c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a410:	2200      	movs	r2, #0
 800a412:	2182      	movs	r1, #130	@ 0x82
 800a414:	f7f8 fea6 	bl	8003164 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20003ae0 	.word	0x20003ae0
 800a428:	40005c00 	.word	0x40005c00

0800a42c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a442:	4618      	mov	r0, r3
 800a444:	f7f7 fa62 	bl	800190c <HAL_PCD_Start>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f94e 	bl	800a6f0 <USBD_Get_USB_Status>
 800a454:	4603      	mov	r3, r0
 800a456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a458:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	4608      	mov	r0, r1
 800a46c:	4611      	mov	r1, r2
 800a46e:	461a      	mov	r2, r3
 800a470:	4603      	mov	r3, r0
 800a472:	70fb      	strb	r3, [r7, #3]
 800a474:	460b      	mov	r3, r1
 800a476:	70bb      	strb	r3, [r7, #2]
 800a478:	4613      	mov	r3, r2
 800a47a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a48a:	78bb      	ldrb	r3, [r7, #2]
 800a48c:	883a      	ldrh	r2, [r7, #0]
 800a48e:	78f9      	ldrb	r1, [r7, #3]
 800a490:	f7f7 fbb7 	bl	8001c02 <HAL_PCD_EP_Open>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f928 	bl	800a6f0 <USBD_Get_USB_Status>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f7 fbf5 	bl	8001cbc <HAL_PCD_EP_Close>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f909 	bl	800a6f0 <USBD_Get_USB_Status>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f7 fc9d 	bl	8001e4a <HAL_PCD_EP_SetStall>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f8ea 	bl	800a6f0 <USBD_Get_USB_Status>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a520:	7bbb      	ldrb	r3, [r7, #14]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7f7 fcde 	bl	8001f0a <HAL_PCD_EP_ClrStall>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f8cb 	bl	800a6f0 <USBD_Get_USB_Status>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a57a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a57c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a580:	2b00      	cmp	r3, #0
 800a582:	da0c      	bge.n	800a59e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a58a:	68f9      	ldr	r1, [r7, #12]
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	440b      	add	r3, r1
 800a598:	3302      	adds	r3, #2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	e00b      	b.n	800a5b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	440b      	add	r3, r1
 800a5b0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a5b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f7 faea 	bl	8001bb8 <HAL_PCD_SetAddress>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f880 	bl	800a6f0 <USBD_Get_USB_Status>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	461a      	mov	r2, r3
 800a60a:	460b      	mov	r3, r1
 800a60c:	72fb      	strb	r3, [r7, #11]
 800a60e:	4613      	mov	r3, r2
 800a610:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a620:	893b      	ldrh	r3, [r7, #8]
 800a622:	7af9      	ldrb	r1, [r7, #11]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	f7f7 fbd9 	bl	8001ddc <HAL_PCD_EP_Transmit>
 800a62a:	4603      	mov	r3, r0
 800a62c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	4618      	mov	r0, r3
 800a632:	f000 f85d 	bl	800a6f0 <USBD_Get_USB_Status>
 800a636:	4603      	mov	r3, r0
 800a638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a63a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	607a      	str	r2, [r7, #4]
 800a64e:	461a      	mov	r2, r3
 800a650:	460b      	mov	r3, r1
 800a652:	72fb      	strb	r3, [r7, #11]
 800a654:	4613      	mov	r3, r2
 800a656:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a666:	893b      	ldrh	r3, [r7, #8]
 800a668:	7af9      	ldrb	r1, [r7, #11]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	f7f7 fb6e 	bl	8001d4c <HAL_PCD_EP_Receive>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f83a 	bl	800a6f0 <USBD_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a680:	7dbb      	ldrb	r3, [r7, #22]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a69c:	78fa      	ldrb	r2, [r7, #3]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f7 fb84 	bl	8001dae <HAL_PCD_EP_GetRxCount>
 800a6a6:	4603      	mov	r3, r0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6b8:	4b02      	ldr	r3, [pc, #8]	@ (800a6c4 <USBD_static_malloc+0x14>)
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr
 800a6c4:	20003dd0 	.word	0x20003dd0

0800a6c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]

}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc80      	pop	{r7}
 800a6d8:	4770      	bx	lr

0800a6da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bc80      	pop	{r7}
 800a6ee:	4770      	bx	lr

0800a6f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d817      	bhi.n	800a734 <USBD_Get_USB_Status+0x44>
 800a704:	a201      	add	r2, pc, #4	@ (adr r2, 800a70c <USBD_Get_USB_Status+0x1c>)
 800a706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70a:	bf00      	nop
 800a70c:	0800a71d 	.word	0x0800a71d
 800a710:	0800a723 	.word	0x0800a723
 800a714:	0800a729 	.word	0x0800a729
 800a718:	0800a72f 	.word	0x0800a72f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]
    break;
 800a720:	e00b      	b.n	800a73a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a722:	2302      	movs	r3, #2
 800a724:	73fb      	strb	r3, [r7, #15]
    break;
 800a726:	e008      	b.n	800a73a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a728:	2301      	movs	r3, #1
 800a72a:	73fb      	strb	r3, [r7, #15]
    break;
 800a72c:	e005      	b.n	800a73a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a72e:	2302      	movs	r3, #2
 800a730:	73fb      	strb	r3, [r7, #15]
    break;
 800a732:	e002      	b.n	800a73a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a734:	2302      	movs	r3, #2
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	bf00      	nop
  }
  return usb_status;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	bc80      	pop	{r7}
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop

0800a748 <_vsiprintf_r>:
 800a748:	b500      	push	{lr}
 800a74a:	b09b      	sub	sp, #108	@ 0x6c
 800a74c:	9100      	str	r1, [sp, #0]
 800a74e:	9104      	str	r1, [sp, #16]
 800a750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a754:	9105      	str	r1, [sp, #20]
 800a756:	9102      	str	r1, [sp, #8]
 800a758:	4905      	ldr	r1, [pc, #20]	@ (800a770 <_vsiprintf_r+0x28>)
 800a75a:	9103      	str	r1, [sp, #12]
 800a75c:	4669      	mov	r1, sp
 800a75e:	f000 f999 	bl	800aa94 <_svfiprintf_r>
 800a762:	2200      	movs	r2, #0
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	b01b      	add	sp, #108	@ 0x6c
 800a76a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a76e:	bf00      	nop
 800a770:	ffff0208 	.word	0xffff0208

0800a774 <vsiprintf>:
 800a774:	4613      	mov	r3, r2
 800a776:	460a      	mov	r2, r1
 800a778:	4601      	mov	r1, r0
 800a77a:	4802      	ldr	r0, [pc, #8]	@ (800a784 <vsiprintf+0x10>)
 800a77c:	6800      	ldr	r0, [r0, #0]
 800a77e:	f7ff bfe3 	b.w	800a748 <_vsiprintf_r>
 800a782:	bf00      	nop
 800a784:	20000258 	.word	0x20000258

0800a788 <memset>:
 800a788:	4603      	mov	r3, r0
 800a78a:	4402      	add	r2, r0
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d100      	bne.n	800a792 <memset+0xa>
 800a790:	4770      	bx	lr
 800a792:	f803 1b01 	strb.w	r1, [r3], #1
 800a796:	e7f9      	b.n	800a78c <memset+0x4>

0800a798 <__errno>:
 800a798:	4b01      	ldr	r3, [pc, #4]	@ (800a7a0 <__errno+0x8>)
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	20000258 	.word	0x20000258

0800a7a4 <__libc_init_array>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	4d0c      	ldr	r5, [pc, #48]	@ (800a7dc <__libc_init_array+0x38>)
 800a7aa:	4c0d      	ldr	r4, [pc, #52]	@ (800a7e0 <__libc_init_array+0x3c>)
 800a7ac:	1b64      	subs	r4, r4, r5
 800a7ae:	10a4      	asrs	r4, r4, #2
 800a7b0:	42a6      	cmp	r6, r4
 800a7b2:	d109      	bne.n	800a7c8 <__libc_init_array+0x24>
 800a7b4:	f000 fc78 	bl	800b0a8 <_init>
 800a7b8:	2600      	movs	r6, #0
 800a7ba:	4d0a      	ldr	r5, [pc, #40]	@ (800a7e4 <__libc_init_array+0x40>)
 800a7bc:	4c0a      	ldr	r4, [pc, #40]	@ (800a7e8 <__libc_init_array+0x44>)
 800a7be:	1b64      	subs	r4, r4, r5
 800a7c0:	10a4      	asrs	r4, r4, #2
 800a7c2:	42a6      	cmp	r6, r4
 800a7c4:	d105      	bne.n	800a7d2 <__libc_init_array+0x2e>
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7cc:	4798      	blx	r3
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	e7ee      	b.n	800a7b0 <__libc_init_array+0xc>
 800a7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d6:	4798      	blx	r3
 800a7d8:	3601      	adds	r6, #1
 800a7da:	e7f2      	b.n	800a7c2 <__libc_init_array+0x1e>
 800a7dc:	0800b3bc 	.word	0x0800b3bc
 800a7e0:	0800b3bc 	.word	0x0800b3bc
 800a7e4:	0800b3bc 	.word	0x0800b3bc
 800a7e8:	0800b3c0 	.word	0x0800b3c0

0800a7ec <__retarget_lock_acquire_recursive>:
 800a7ec:	4770      	bx	lr

0800a7ee <__retarget_lock_release_recursive>:
 800a7ee:	4770      	bx	lr

0800a7f0 <_free_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d040      	beq.n	800a87a <_free_r+0x8a>
 800a7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7fc:	1f0c      	subs	r4, r1, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfb8      	it	lt
 800a802:	18e4      	addlt	r4, r4, r3
 800a804:	f000 f8de 	bl	800a9c4 <__malloc_lock>
 800a808:	4a1c      	ldr	r2, [pc, #112]	@ (800a87c <_free_r+0x8c>)
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	b933      	cbnz	r3, 800a81c <_free_r+0x2c>
 800a80e:	6063      	str	r3, [r4, #4]
 800a810:	6014      	str	r4, [r2, #0]
 800a812:	4628      	mov	r0, r5
 800a814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a818:	f000 b8da 	b.w	800a9d0 <__malloc_unlock>
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	d908      	bls.n	800a832 <_free_r+0x42>
 800a820:	6820      	ldr	r0, [r4, #0]
 800a822:	1821      	adds	r1, r4, r0
 800a824:	428b      	cmp	r3, r1
 800a826:	bf01      	itttt	eq
 800a828:	6819      	ldreq	r1, [r3, #0]
 800a82a:	685b      	ldreq	r3, [r3, #4]
 800a82c:	1809      	addeq	r1, r1, r0
 800a82e:	6021      	streq	r1, [r4, #0]
 800a830:	e7ed      	b.n	800a80e <_free_r+0x1e>
 800a832:	461a      	mov	r2, r3
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	b10b      	cbz	r3, 800a83c <_free_r+0x4c>
 800a838:	42a3      	cmp	r3, r4
 800a83a:	d9fa      	bls.n	800a832 <_free_r+0x42>
 800a83c:	6811      	ldr	r1, [r2, #0]
 800a83e:	1850      	adds	r0, r2, r1
 800a840:	42a0      	cmp	r0, r4
 800a842:	d10b      	bne.n	800a85c <_free_r+0x6c>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	4401      	add	r1, r0
 800a848:	1850      	adds	r0, r2, r1
 800a84a:	4283      	cmp	r3, r0
 800a84c:	6011      	str	r1, [r2, #0]
 800a84e:	d1e0      	bne.n	800a812 <_free_r+0x22>
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4408      	add	r0, r1
 800a856:	6010      	str	r0, [r2, #0]
 800a858:	6053      	str	r3, [r2, #4]
 800a85a:	e7da      	b.n	800a812 <_free_r+0x22>
 800a85c:	d902      	bls.n	800a864 <_free_r+0x74>
 800a85e:	230c      	movs	r3, #12
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	e7d6      	b.n	800a812 <_free_r+0x22>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	1821      	adds	r1, r4, r0
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf01      	itttt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	1809      	addeq	r1, r1, r0
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	6063      	str	r3, [r4, #4]
 800a876:	6054      	str	r4, [r2, #4]
 800a878:	e7cb      	b.n	800a812 <_free_r+0x22>
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20004134 	.word	0x20004134

0800a880 <sbrk_aligned>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	4e0f      	ldr	r6, [pc, #60]	@ (800a8c0 <sbrk_aligned+0x40>)
 800a884:	460c      	mov	r4, r1
 800a886:	6831      	ldr	r1, [r6, #0]
 800a888:	4605      	mov	r5, r0
 800a88a:	b911      	cbnz	r1, 800a892 <sbrk_aligned+0x12>
 800a88c:	f000 fbaa 	bl	800afe4 <_sbrk_r>
 800a890:	6030      	str	r0, [r6, #0]
 800a892:	4621      	mov	r1, r4
 800a894:	4628      	mov	r0, r5
 800a896:	f000 fba5 	bl	800afe4 <_sbrk_r>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d103      	bne.n	800a8a6 <sbrk_aligned+0x26>
 800a89e:	f04f 34ff 	mov.w	r4, #4294967295
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	bd70      	pop	{r4, r5, r6, pc}
 800a8a6:	1cc4      	adds	r4, r0, #3
 800a8a8:	f024 0403 	bic.w	r4, r4, #3
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d0f8      	beq.n	800a8a2 <sbrk_aligned+0x22>
 800a8b0:	1a21      	subs	r1, r4, r0
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 fb96 	bl	800afe4 <_sbrk_r>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d1f2      	bne.n	800a8a2 <sbrk_aligned+0x22>
 800a8bc:	e7ef      	b.n	800a89e <sbrk_aligned+0x1e>
 800a8be:	bf00      	nop
 800a8c0:	20004130 	.word	0x20004130

0800a8c4 <_malloc_r>:
 800a8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	1ccd      	adds	r5, r1, #3
 800a8ca:	f025 0503 	bic.w	r5, r5, #3
 800a8ce:	3508      	adds	r5, #8
 800a8d0:	2d0c      	cmp	r5, #12
 800a8d2:	bf38      	it	cc
 800a8d4:	250c      	movcc	r5, #12
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	4606      	mov	r6, r0
 800a8da:	db01      	blt.n	800a8e0 <_malloc_r+0x1c>
 800a8dc:	42a9      	cmp	r1, r5
 800a8de:	d904      	bls.n	800a8ea <_malloc_r+0x26>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	6033      	str	r3, [r6, #0]
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9c0 <_malloc_r+0xfc>
 800a8ee:	f000 f869 	bl	800a9c4 <__malloc_lock>
 800a8f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	bb44      	cbnz	r4, 800a94c <_malloc_r+0x88>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff ffbf 	bl	800a880 <sbrk_aligned>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	4604      	mov	r4, r0
 800a906:	d158      	bne.n	800a9ba <_malloc_r+0xf6>
 800a908:	f8d8 4000 	ldr.w	r4, [r8]
 800a90c:	4627      	mov	r7, r4
 800a90e:	2f00      	cmp	r7, #0
 800a910:	d143      	bne.n	800a99a <_malloc_r+0xd6>
 800a912:	2c00      	cmp	r4, #0
 800a914:	d04b      	beq.n	800a9ae <_malloc_r+0xea>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	4639      	mov	r1, r7
 800a91a:	4630      	mov	r0, r6
 800a91c:	eb04 0903 	add.w	r9, r4, r3
 800a920:	f000 fb60 	bl	800afe4 <_sbrk_r>
 800a924:	4581      	cmp	r9, r0
 800a926:	d142      	bne.n	800a9ae <_malloc_r+0xea>
 800a928:	6821      	ldr	r1, [r4, #0]
 800a92a:	4630      	mov	r0, r6
 800a92c:	1a6d      	subs	r5, r5, r1
 800a92e:	4629      	mov	r1, r5
 800a930:	f7ff ffa6 	bl	800a880 <sbrk_aligned>
 800a934:	3001      	adds	r0, #1
 800a936:	d03a      	beq.n	800a9ae <_malloc_r+0xea>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	442b      	add	r3, r5
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	f8d8 3000 	ldr.w	r3, [r8]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	bb62      	cbnz	r2, 800a9a0 <_malloc_r+0xdc>
 800a946:	f8c8 7000 	str.w	r7, [r8]
 800a94a:	e00f      	b.n	800a96c <_malloc_r+0xa8>
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	1b52      	subs	r2, r2, r5
 800a950:	d420      	bmi.n	800a994 <_malloc_r+0xd0>
 800a952:	2a0b      	cmp	r2, #11
 800a954:	d917      	bls.n	800a986 <_malloc_r+0xc2>
 800a956:	1961      	adds	r1, r4, r5
 800a958:	42a3      	cmp	r3, r4
 800a95a:	6025      	str	r5, [r4, #0]
 800a95c:	bf18      	it	ne
 800a95e:	6059      	strne	r1, [r3, #4]
 800a960:	6863      	ldr	r3, [r4, #4]
 800a962:	bf08      	it	eq
 800a964:	f8c8 1000 	streq.w	r1, [r8]
 800a968:	5162      	str	r2, [r4, r5]
 800a96a:	604b      	str	r3, [r1, #4]
 800a96c:	4630      	mov	r0, r6
 800a96e:	f000 f82f 	bl	800a9d0 <__malloc_unlock>
 800a972:	f104 000b 	add.w	r0, r4, #11
 800a976:	1d23      	adds	r3, r4, #4
 800a978:	f020 0007 	bic.w	r0, r0, #7
 800a97c:	1ac2      	subs	r2, r0, r3
 800a97e:	bf1c      	itt	ne
 800a980:	1a1b      	subne	r3, r3, r0
 800a982:	50a3      	strne	r3, [r4, r2]
 800a984:	e7af      	b.n	800a8e6 <_malloc_r+0x22>
 800a986:	6862      	ldr	r2, [r4, #4]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	bf0c      	ite	eq
 800a98c:	f8c8 2000 	streq.w	r2, [r8]
 800a990:	605a      	strne	r2, [r3, #4]
 800a992:	e7eb      	b.n	800a96c <_malloc_r+0xa8>
 800a994:	4623      	mov	r3, r4
 800a996:	6864      	ldr	r4, [r4, #4]
 800a998:	e7ae      	b.n	800a8f8 <_malloc_r+0x34>
 800a99a:	463c      	mov	r4, r7
 800a99c:	687f      	ldr	r7, [r7, #4]
 800a99e:	e7b6      	b.n	800a90e <_malloc_r+0x4a>
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d1fb      	bne.n	800a9a0 <_malloc_r+0xdc>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6053      	str	r3, [r2, #4]
 800a9ac:	e7de      	b.n	800a96c <_malloc_r+0xa8>
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	6033      	str	r3, [r6, #0]
 800a9b4:	f000 f80c 	bl	800a9d0 <__malloc_unlock>
 800a9b8:	e794      	b.n	800a8e4 <_malloc_r+0x20>
 800a9ba:	6005      	str	r5, [r0, #0]
 800a9bc:	e7d6      	b.n	800a96c <_malloc_r+0xa8>
 800a9be:	bf00      	nop
 800a9c0:	20004134 	.word	0x20004134

0800a9c4 <__malloc_lock>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	@ (800a9cc <__malloc_lock+0x8>)
 800a9c6:	f7ff bf11 	b.w	800a7ec <__retarget_lock_acquire_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	2000412c 	.word	0x2000412c

0800a9d0 <__malloc_unlock>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	@ (800a9d8 <__malloc_unlock+0x8>)
 800a9d2:	f7ff bf0c 	b.w	800a7ee <__retarget_lock_release_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	2000412c 	.word	0x2000412c

0800a9dc <__ssputs_r>:
 800a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	461f      	mov	r7, r3
 800a9e2:	688e      	ldr	r6, [r1, #8]
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	42be      	cmp	r6, r7
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4690      	mov	r8, r2
 800a9ec:	680b      	ldr	r3, [r1, #0]
 800a9ee:	d82d      	bhi.n	800aa4c <__ssputs_r+0x70>
 800a9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9f8:	d026      	beq.n	800aa48 <__ssputs_r+0x6c>
 800a9fa:	6965      	ldr	r5, [r4, #20]
 800a9fc:	6909      	ldr	r1, [r1, #16]
 800a9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa02:	eba3 0901 	sub.w	r9, r3, r1
 800aa06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa0a:	1c7b      	adds	r3, r7, #1
 800aa0c:	444b      	add	r3, r9
 800aa0e:	106d      	asrs	r5, r5, #1
 800aa10:	429d      	cmp	r5, r3
 800aa12:	bf38      	it	cc
 800aa14:	461d      	movcc	r5, r3
 800aa16:	0553      	lsls	r3, r2, #21
 800aa18:	d527      	bpl.n	800aa6a <__ssputs_r+0x8e>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7ff ff52 	bl	800a8c4 <_malloc_r>
 800aa20:	4606      	mov	r6, r0
 800aa22:	b360      	cbz	r0, 800aa7e <__ssputs_r+0xa2>
 800aa24:	464a      	mov	r2, r9
 800aa26:	6921      	ldr	r1, [r4, #16]
 800aa28:	f000 fafa 	bl	800b020 <memcpy>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	6126      	str	r6, [r4, #16]
 800aa3a:	444e      	add	r6, r9
 800aa3c:	6026      	str	r6, [r4, #0]
 800aa3e:	463e      	mov	r6, r7
 800aa40:	6165      	str	r5, [r4, #20]
 800aa42:	eba5 0509 	sub.w	r5, r5, r9
 800aa46:	60a5      	str	r5, [r4, #8]
 800aa48:	42be      	cmp	r6, r7
 800aa4a:	d900      	bls.n	800aa4e <__ssputs_r+0x72>
 800aa4c:	463e      	mov	r6, r7
 800aa4e:	4632      	mov	r2, r6
 800aa50:	4641      	mov	r1, r8
 800aa52:	6820      	ldr	r0, [r4, #0]
 800aa54:	f000 faac 	bl	800afb0 <memmove>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	1b9b      	subs	r3, r3, r6
 800aa5e:	60a3      	str	r3, [r4, #8]
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	4433      	add	r3, r6
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	f000 fae6 	bl	800b03c <_realloc_r>
 800aa70:	4606      	mov	r6, r0
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d1e0      	bne.n	800aa38 <__ssputs_r+0x5c>
 800aa76:	4650      	mov	r0, sl
 800aa78:	6921      	ldr	r1, [r4, #16]
 800aa7a:	f7ff feb9 	bl	800a7f0 <_free_r>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	f8ca 3000 	str.w	r3, [sl]
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa8e:	81a3      	strh	r3, [r4, #12]
 800aa90:	e7e9      	b.n	800aa66 <__ssputs_r+0x8a>
	...

0800aa94 <_svfiprintf_r>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	4698      	mov	r8, r3
 800aa9a:	898b      	ldrh	r3, [r1, #12]
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	061b      	lsls	r3, r3, #24
 800aaa0:	460d      	mov	r5, r1
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	b09d      	sub	sp, #116	@ 0x74
 800aaa6:	d510      	bpl.n	800aaca <_svfiprintf_r+0x36>
 800aaa8:	690b      	ldr	r3, [r1, #16]
 800aaaa:	b973      	cbnz	r3, 800aaca <_svfiprintf_r+0x36>
 800aaac:	2140      	movs	r1, #64	@ 0x40
 800aaae:	f7ff ff09 	bl	800a8c4 <_malloc_r>
 800aab2:	6028      	str	r0, [r5, #0]
 800aab4:	6128      	str	r0, [r5, #16]
 800aab6:	b930      	cbnz	r0, 800aac6 <_svfiprintf_r+0x32>
 800aab8:	230c      	movs	r3, #12
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	b01d      	add	sp, #116	@ 0x74
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	2340      	movs	r3, #64	@ 0x40
 800aac8:	616b      	str	r3, [r5, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aace:	2320      	movs	r3, #32
 800aad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aad4:	2330      	movs	r3, #48	@ 0x30
 800aad6:	f04f 0901 	mov.w	r9, #1
 800aada:	f8cd 800c 	str.w	r8, [sp, #12]
 800aade:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ac78 <_svfiprintf_r+0x1e4>
 800aae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aae6:	4623      	mov	r3, r4
 800aae8:	469a      	mov	sl, r3
 800aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaee:	b10a      	cbz	r2, 800aaf4 <_svfiprintf_r+0x60>
 800aaf0:	2a25      	cmp	r2, #37	@ 0x25
 800aaf2:	d1f9      	bne.n	800aae8 <_svfiprintf_r+0x54>
 800aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf8:	d00b      	beq.n	800ab12 <_svfiprintf_r+0x7e>
 800aafa:	465b      	mov	r3, fp
 800aafc:	4622      	mov	r2, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ff6b 	bl	800a9dc <__ssputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	f000 80a7 	beq.w	800ac5a <_svfiprintf_r+0x1c6>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab0e:	445a      	add	r2, fp
 800ab10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 809f 	beq.w	800ac5a <_svfiprintf_r+0x1c6>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab26:	f10a 0a01 	add.w	sl, sl, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab34:	4654      	mov	r4, sl
 800ab36:	2205      	movs	r2, #5
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	484e      	ldr	r0, [pc, #312]	@ (800ac78 <_svfiprintf_r+0x1e4>)
 800ab3e:	f000 fa61 	bl	800b004 <memchr>
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_svfiprintf_r+0xea>
 800ab46:	06d0      	lsls	r0, r2, #27
 800ab48:	bf44      	itt	mi
 800ab4a:	2320      	movmi	r3, #32
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab50:	0711      	lsls	r1, r2, #28
 800ab52:	bf44      	itt	mi
 800ab54:	232b      	movmi	r3, #43	@ 0x2b
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab60:	d015      	beq.n	800ab8e <_svfiprintf_r+0xfa>
 800ab62:	4654      	mov	r4, sl
 800ab64:	2000      	movs	r0, #0
 800ab66:	f04f 0c0a 	mov.w	ip, #10
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab72:	3b30      	subs	r3, #48	@ 0x30
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d94b      	bls.n	800ac10 <_svfiprintf_r+0x17c>
 800ab78:	b1b0      	cbz	r0, 800aba8 <_svfiprintf_r+0x114>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e014      	b.n	800aba8 <_svfiprintf_r+0x114>
 800ab7e:	eba0 0308 	sub.w	r3, r0, r8
 800ab82:	fa09 f303 	lsl.w	r3, r9, r3
 800ab86:	4313      	orrs	r3, r2
 800ab88:	46a2      	mov	sl, r4
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	e7d2      	b.n	800ab34 <_svfiprintf_r+0xa0>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbb      	ittet	lt
 800ab9a:	425b      	neglt	r3, r3
 800ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aba0:	9307      	strge	r3, [sp, #28]
 800aba2:	9307      	strlt	r3, [sp, #28]
 800aba4:	bfb8      	it	lt
 800aba6:	9204      	strlt	r2, [sp, #16]
 800aba8:	7823      	ldrb	r3, [r4, #0]
 800abaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800abac:	d10a      	bne.n	800abc4 <_svfiprintf_r+0x130>
 800abae:	7863      	ldrb	r3, [r4, #1]
 800abb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb2:	d132      	bne.n	800ac1a <_svfiprintf_r+0x186>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	3402      	adds	r4, #2
 800abb8:	1d1a      	adds	r2, r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	9203      	str	r2, [sp, #12]
 800abbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ac7c <_svfiprintf_r+0x1e8>
 800abc8:	2203      	movs	r2, #3
 800abca:	4650      	mov	r0, sl
 800abcc:	7821      	ldrb	r1, [r4, #0]
 800abce:	f000 fa19 	bl	800b004 <memchr>
 800abd2:	b138      	cbz	r0, 800abe4 <_svfiprintf_r+0x150>
 800abd4:	2240      	movs	r2, #64	@ 0x40
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	eba0 000a 	sub.w	r0, r0, sl
 800abdc:	4082      	lsls	r2, r0
 800abde:	4313      	orrs	r3, r2
 800abe0:	3401      	adds	r4, #1
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe8:	2206      	movs	r2, #6
 800abea:	4825      	ldr	r0, [pc, #148]	@ (800ac80 <_svfiprintf_r+0x1ec>)
 800abec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abf0:	f000 fa08 	bl	800b004 <memchr>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d036      	beq.n	800ac66 <_svfiprintf_r+0x1d2>
 800abf8:	4b22      	ldr	r3, [pc, #136]	@ (800ac84 <_svfiprintf_r+0x1f0>)
 800abfa:	bb1b      	cbnz	r3, 800ac44 <_svfiprintf_r+0x1b0>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	3307      	adds	r3, #7
 800ac00:	f023 0307 	bic.w	r3, r3, #7
 800ac04:	3308      	adds	r3, #8
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0a:	4433      	add	r3, r6
 800ac0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0e:	e76a      	b.n	800aae6 <_svfiprintf_r+0x52>
 800ac10:	460c      	mov	r4, r1
 800ac12:	2001      	movs	r0, #1
 800ac14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac18:	e7a8      	b.n	800ab6c <_svfiprintf_r+0xd8>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f04f 0c0a 	mov.w	ip, #10
 800ac20:	4619      	mov	r1, r3
 800ac22:	3401      	adds	r4, #1
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	4620      	mov	r0, r4
 800ac28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac2c:	3a30      	subs	r2, #48	@ 0x30
 800ac2e:	2a09      	cmp	r2, #9
 800ac30:	d903      	bls.n	800ac3a <_svfiprintf_r+0x1a6>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0c6      	beq.n	800abc4 <_svfiprintf_r+0x130>
 800ac36:	9105      	str	r1, [sp, #20]
 800ac38:	e7c4      	b.n	800abc4 <_svfiprintf_r+0x130>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac42:	e7f0      	b.n	800ac26 <_svfiprintf_r+0x192>
 800ac44:	ab03      	add	r3, sp, #12
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ac88 <_svfiprintf_r+0x1f4>)
 800ac4e:	a904      	add	r1, sp, #16
 800ac50:	f3af 8000 	nop.w
 800ac54:	1c42      	adds	r2, r0, #1
 800ac56:	4606      	mov	r6, r0
 800ac58:	d1d6      	bne.n	800ac08 <_svfiprintf_r+0x174>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	065b      	lsls	r3, r3, #25
 800ac5e:	f53f af2d 	bmi.w	800aabc <_svfiprintf_r+0x28>
 800ac62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac64:	e72c      	b.n	800aac0 <_svfiprintf_r+0x2c>
 800ac66:	ab03      	add	r3, sp, #12
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	4b06      	ldr	r3, [pc, #24]	@ (800ac88 <_svfiprintf_r+0x1f4>)
 800ac70:	a904      	add	r1, sp, #16
 800ac72:	f000 f87d 	bl	800ad70 <_printf_i>
 800ac76:	e7ed      	b.n	800ac54 <_svfiprintf_r+0x1c0>
 800ac78:	0800b380 	.word	0x0800b380
 800ac7c:	0800b386 	.word	0x0800b386
 800ac80:	0800b38a 	.word	0x0800b38a
 800ac84:	00000000 	.word	0x00000000
 800ac88:	0800a9dd 	.word	0x0800a9dd

0800ac8c <_printf_common>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	4616      	mov	r6, r2
 800ac92:	4698      	mov	r8, r3
 800ac94:	688a      	ldr	r2, [r1, #8]
 800ac96:	690b      	ldr	r3, [r1, #16]
 800ac98:	4607      	mov	r7, r0
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	bfb8      	it	lt
 800ac9e:	4613      	movlt	r3, r2
 800aca0:	6033      	str	r3, [r6, #0]
 800aca2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aca6:	460c      	mov	r4, r1
 800aca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acac:	b10a      	cbz	r2, 800acb2 <_printf_common+0x26>
 800acae:	3301      	adds	r3, #1
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	0699      	lsls	r1, r3, #26
 800acb6:	bf42      	ittt	mi
 800acb8:	6833      	ldrmi	r3, [r6, #0]
 800acba:	3302      	addmi	r3, #2
 800acbc:	6033      	strmi	r3, [r6, #0]
 800acbe:	6825      	ldr	r5, [r4, #0]
 800acc0:	f015 0506 	ands.w	r5, r5, #6
 800acc4:	d106      	bne.n	800acd4 <_printf_common+0x48>
 800acc6:	f104 0a19 	add.w	sl, r4, #25
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	6832      	ldr	r2, [r6, #0]
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc2b      	bgt.n	800ad2c <_printf_common+0xa0>
 800acd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acd8:	6822      	ldr	r2, [r4, #0]
 800acda:	3b00      	subs	r3, #0
 800acdc:	bf18      	it	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	0692      	lsls	r2, r2, #26
 800ace2:	d430      	bmi.n	800ad46 <_printf_common+0xba>
 800ace4:	4641      	mov	r1, r8
 800ace6:	4638      	mov	r0, r7
 800ace8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acec:	47c8      	blx	r9
 800acee:	3001      	adds	r0, #1
 800acf0:	d023      	beq.n	800ad3a <_printf_common+0xae>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	6922      	ldr	r2, [r4, #16]
 800acf6:	f003 0306 	and.w	r3, r3, #6
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	bf14      	ite	ne
 800acfe:	2500      	movne	r5, #0
 800ad00:	6833      	ldreq	r3, [r6, #0]
 800ad02:	f04f 0600 	mov.w	r6, #0
 800ad06:	bf08      	it	eq
 800ad08:	68e5      	ldreq	r5, [r4, #12]
 800ad0a:	f104 041a 	add.w	r4, r4, #26
 800ad0e:	bf08      	it	eq
 800ad10:	1aed      	subeq	r5, r5, r3
 800ad12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad16:	bf08      	it	eq
 800ad18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	bfc4      	itt	gt
 800ad20:	1a9b      	subgt	r3, r3, r2
 800ad22:	18ed      	addgt	r5, r5, r3
 800ad24:	42b5      	cmp	r5, r6
 800ad26:	d11a      	bne.n	800ad5e <_printf_common+0xd2>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e008      	b.n	800ad3e <_printf_common+0xb2>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4652      	mov	r2, sl
 800ad30:	4641      	mov	r1, r8
 800ad32:	4638      	mov	r0, r7
 800ad34:	47c8      	blx	r9
 800ad36:	3001      	adds	r0, #1
 800ad38:	d103      	bne.n	800ad42 <_printf_common+0xb6>
 800ad3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad42:	3501      	adds	r5, #1
 800ad44:	e7c1      	b.n	800acca <_printf_common+0x3e>
 800ad46:	2030      	movs	r0, #48	@ 0x30
 800ad48:	18e1      	adds	r1, r4, r3
 800ad4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad54:	4422      	add	r2, r4
 800ad56:	3302      	adds	r3, #2
 800ad58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad5c:	e7c2      	b.n	800ace4 <_printf_common+0x58>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4622      	mov	r2, r4
 800ad62:	4641      	mov	r1, r8
 800ad64:	4638      	mov	r0, r7
 800ad66:	47c8      	blx	r9
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d0e6      	beq.n	800ad3a <_printf_common+0xae>
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	e7d9      	b.n	800ad24 <_printf_common+0x98>

0800ad70 <_printf_i>:
 800ad70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad74:	7e0f      	ldrb	r7, [r1, #24]
 800ad76:	4691      	mov	r9, r2
 800ad78:	2f78      	cmp	r7, #120	@ 0x78
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	469a      	mov	sl, r3
 800ad80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad86:	d807      	bhi.n	800ad98 <_printf_i+0x28>
 800ad88:	2f62      	cmp	r7, #98	@ 0x62
 800ad8a:	d80a      	bhi.n	800ada2 <_printf_i+0x32>
 800ad8c:	2f00      	cmp	r7, #0
 800ad8e:	f000 80d3 	beq.w	800af38 <_printf_i+0x1c8>
 800ad92:	2f58      	cmp	r7, #88	@ 0x58
 800ad94:	f000 80ba 	beq.w	800af0c <_printf_i+0x19c>
 800ad98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ada0:	e03a      	b.n	800ae18 <_printf_i+0xa8>
 800ada2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ada6:	2b15      	cmp	r3, #21
 800ada8:	d8f6      	bhi.n	800ad98 <_printf_i+0x28>
 800adaa:	a101      	add	r1, pc, #4	@ (adr r1, 800adb0 <_printf_i+0x40>)
 800adac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adb0:	0800ae09 	.word	0x0800ae09
 800adb4:	0800ae1d 	.word	0x0800ae1d
 800adb8:	0800ad99 	.word	0x0800ad99
 800adbc:	0800ad99 	.word	0x0800ad99
 800adc0:	0800ad99 	.word	0x0800ad99
 800adc4:	0800ad99 	.word	0x0800ad99
 800adc8:	0800ae1d 	.word	0x0800ae1d
 800adcc:	0800ad99 	.word	0x0800ad99
 800add0:	0800ad99 	.word	0x0800ad99
 800add4:	0800ad99 	.word	0x0800ad99
 800add8:	0800ad99 	.word	0x0800ad99
 800addc:	0800af1f 	.word	0x0800af1f
 800ade0:	0800ae47 	.word	0x0800ae47
 800ade4:	0800aed9 	.word	0x0800aed9
 800ade8:	0800ad99 	.word	0x0800ad99
 800adec:	0800ad99 	.word	0x0800ad99
 800adf0:	0800af41 	.word	0x0800af41
 800adf4:	0800ad99 	.word	0x0800ad99
 800adf8:	0800ae47 	.word	0x0800ae47
 800adfc:	0800ad99 	.word	0x0800ad99
 800ae00:	0800ad99 	.word	0x0800ad99
 800ae04:	0800aee1 	.word	0x0800aee1
 800ae08:	6833      	ldr	r3, [r6, #0]
 800ae0a:	1d1a      	adds	r2, r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6032      	str	r2, [r6, #0]
 800ae10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e09e      	b.n	800af5a <_printf_i+0x1ea>
 800ae1c:	6833      	ldr	r3, [r6, #0]
 800ae1e:	6820      	ldr	r0, [r4, #0]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	6031      	str	r1, [r6, #0]
 800ae24:	0606      	lsls	r6, r0, #24
 800ae26:	d501      	bpl.n	800ae2c <_printf_i+0xbc>
 800ae28:	681d      	ldr	r5, [r3, #0]
 800ae2a:	e003      	b.n	800ae34 <_printf_i+0xc4>
 800ae2c:	0645      	lsls	r5, r0, #25
 800ae2e:	d5fb      	bpl.n	800ae28 <_printf_i+0xb8>
 800ae30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae34:	2d00      	cmp	r5, #0
 800ae36:	da03      	bge.n	800ae40 <_printf_i+0xd0>
 800ae38:	232d      	movs	r3, #45	@ 0x2d
 800ae3a:	426d      	negs	r5, r5
 800ae3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae40:	230a      	movs	r3, #10
 800ae42:	4859      	ldr	r0, [pc, #356]	@ (800afa8 <_printf_i+0x238>)
 800ae44:	e011      	b.n	800ae6a <_printf_i+0xfa>
 800ae46:	6821      	ldr	r1, [r4, #0]
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	0608      	lsls	r0, r1, #24
 800ae4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae50:	d402      	bmi.n	800ae58 <_printf_i+0xe8>
 800ae52:	0649      	lsls	r1, r1, #25
 800ae54:	bf48      	it	mi
 800ae56:	b2ad      	uxthmi	r5, r5
 800ae58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae5a:	6033      	str	r3, [r6, #0]
 800ae5c:	bf14      	ite	ne
 800ae5e:	230a      	movne	r3, #10
 800ae60:	2308      	moveq	r3, #8
 800ae62:	4851      	ldr	r0, [pc, #324]	@ (800afa8 <_printf_i+0x238>)
 800ae64:	2100      	movs	r1, #0
 800ae66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae6a:	6866      	ldr	r6, [r4, #4]
 800ae6c:	2e00      	cmp	r6, #0
 800ae6e:	bfa8      	it	ge
 800ae70:	6821      	ldrge	r1, [r4, #0]
 800ae72:	60a6      	str	r6, [r4, #8]
 800ae74:	bfa4      	itt	ge
 800ae76:	f021 0104 	bicge.w	r1, r1, #4
 800ae7a:	6021      	strge	r1, [r4, #0]
 800ae7c:	b90d      	cbnz	r5, 800ae82 <_printf_i+0x112>
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	d04b      	beq.n	800af1a <_printf_i+0x1aa>
 800ae82:	4616      	mov	r6, r2
 800ae84:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae88:	fb03 5711 	mls	r7, r3, r1, r5
 800ae8c:	5dc7      	ldrb	r7, [r0, r7]
 800ae8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae92:	462f      	mov	r7, r5
 800ae94:	42bb      	cmp	r3, r7
 800ae96:	460d      	mov	r5, r1
 800ae98:	d9f4      	bls.n	800ae84 <_printf_i+0x114>
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d10b      	bne.n	800aeb6 <_printf_i+0x146>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	07df      	lsls	r7, r3, #31
 800aea2:	d508      	bpl.n	800aeb6 <_printf_i+0x146>
 800aea4:	6923      	ldr	r3, [r4, #16]
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	4299      	cmp	r1, r3
 800aeaa:	bfde      	ittt	le
 800aeac:	2330      	movle	r3, #48	@ 0x30
 800aeae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aeb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeb6:	1b92      	subs	r2, r2, r6
 800aeb8:	6122      	str	r2, [r4, #16]
 800aeba:	464b      	mov	r3, r9
 800aebc:	4621      	mov	r1, r4
 800aebe:	4640      	mov	r0, r8
 800aec0:	f8cd a000 	str.w	sl, [sp]
 800aec4:	aa03      	add	r2, sp, #12
 800aec6:	f7ff fee1 	bl	800ac8c <_printf_common>
 800aeca:	3001      	adds	r0, #1
 800aecc:	d14a      	bne.n	800af64 <_printf_i+0x1f4>
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	b004      	add	sp, #16
 800aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	f043 0320 	orr.w	r3, r3, #32
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	2778      	movs	r7, #120	@ 0x78
 800aee2:	4832      	ldr	r0, [pc, #200]	@ (800afac <_printf_i+0x23c>)
 800aee4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	6831      	ldr	r1, [r6, #0]
 800aeec:	061f      	lsls	r7, r3, #24
 800aeee:	f851 5b04 	ldr.w	r5, [r1], #4
 800aef2:	d402      	bmi.n	800aefa <_printf_i+0x18a>
 800aef4:	065f      	lsls	r7, r3, #25
 800aef6:	bf48      	it	mi
 800aef8:	b2ad      	uxthmi	r5, r5
 800aefa:	6031      	str	r1, [r6, #0]
 800aefc:	07d9      	lsls	r1, r3, #31
 800aefe:	bf44      	itt	mi
 800af00:	f043 0320 	orrmi.w	r3, r3, #32
 800af04:	6023      	strmi	r3, [r4, #0]
 800af06:	b11d      	cbz	r5, 800af10 <_printf_i+0x1a0>
 800af08:	2310      	movs	r3, #16
 800af0a:	e7ab      	b.n	800ae64 <_printf_i+0xf4>
 800af0c:	4826      	ldr	r0, [pc, #152]	@ (800afa8 <_printf_i+0x238>)
 800af0e:	e7e9      	b.n	800aee4 <_printf_i+0x174>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	f023 0320 	bic.w	r3, r3, #32
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	e7f6      	b.n	800af08 <_printf_i+0x198>
 800af1a:	4616      	mov	r6, r2
 800af1c:	e7bd      	b.n	800ae9a <_printf_i+0x12a>
 800af1e:	6833      	ldr	r3, [r6, #0]
 800af20:	6825      	ldr	r5, [r4, #0]
 800af22:	1d18      	adds	r0, r3, #4
 800af24:	6961      	ldr	r1, [r4, #20]
 800af26:	6030      	str	r0, [r6, #0]
 800af28:	062e      	lsls	r6, r5, #24
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	d501      	bpl.n	800af32 <_printf_i+0x1c2>
 800af2e:	6019      	str	r1, [r3, #0]
 800af30:	e002      	b.n	800af38 <_printf_i+0x1c8>
 800af32:	0668      	lsls	r0, r5, #25
 800af34:	d5fb      	bpl.n	800af2e <_printf_i+0x1be>
 800af36:	8019      	strh	r1, [r3, #0]
 800af38:	2300      	movs	r3, #0
 800af3a:	4616      	mov	r6, r2
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	e7bc      	b.n	800aeba <_printf_i+0x14a>
 800af40:	6833      	ldr	r3, [r6, #0]
 800af42:	2100      	movs	r1, #0
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	6032      	str	r2, [r6, #0]
 800af48:	681e      	ldr	r6, [r3, #0]
 800af4a:	6862      	ldr	r2, [r4, #4]
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 f859 	bl	800b004 <memchr>
 800af52:	b108      	cbz	r0, 800af58 <_printf_i+0x1e8>
 800af54:	1b80      	subs	r0, r0, r6
 800af56:	6060      	str	r0, [r4, #4]
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	2300      	movs	r3, #0
 800af5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af62:	e7aa      	b.n	800aeba <_printf_i+0x14a>
 800af64:	4632      	mov	r2, r6
 800af66:	4649      	mov	r1, r9
 800af68:	4640      	mov	r0, r8
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	47d0      	blx	sl
 800af6e:	3001      	adds	r0, #1
 800af70:	d0ad      	beq.n	800aece <_printf_i+0x15e>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	079b      	lsls	r3, r3, #30
 800af76:	d413      	bmi.n	800afa0 <_printf_i+0x230>
 800af78:	68e0      	ldr	r0, [r4, #12]
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	4298      	cmp	r0, r3
 800af7e:	bfb8      	it	lt
 800af80:	4618      	movlt	r0, r3
 800af82:	e7a6      	b.n	800aed2 <_printf_i+0x162>
 800af84:	2301      	movs	r3, #1
 800af86:	4632      	mov	r2, r6
 800af88:	4649      	mov	r1, r9
 800af8a:	4640      	mov	r0, r8
 800af8c:	47d0      	blx	sl
 800af8e:	3001      	adds	r0, #1
 800af90:	d09d      	beq.n	800aece <_printf_i+0x15e>
 800af92:	3501      	adds	r5, #1
 800af94:	68e3      	ldr	r3, [r4, #12]
 800af96:	9903      	ldr	r1, [sp, #12]
 800af98:	1a5b      	subs	r3, r3, r1
 800af9a:	42ab      	cmp	r3, r5
 800af9c:	dcf2      	bgt.n	800af84 <_printf_i+0x214>
 800af9e:	e7eb      	b.n	800af78 <_printf_i+0x208>
 800afa0:	2500      	movs	r5, #0
 800afa2:	f104 0619 	add.w	r6, r4, #25
 800afa6:	e7f5      	b.n	800af94 <_printf_i+0x224>
 800afa8:	0800b391 	.word	0x0800b391
 800afac:	0800b3a2 	.word	0x0800b3a2

0800afb0 <memmove>:
 800afb0:	4288      	cmp	r0, r1
 800afb2:	b510      	push	{r4, lr}
 800afb4:	eb01 0402 	add.w	r4, r1, r2
 800afb8:	d902      	bls.n	800afc0 <memmove+0x10>
 800afba:	4284      	cmp	r4, r0
 800afbc:	4623      	mov	r3, r4
 800afbe:	d807      	bhi.n	800afd0 <memmove+0x20>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	42a1      	cmp	r1, r4
 800afc4:	d008      	beq.n	800afd8 <memmove+0x28>
 800afc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afce:	e7f8      	b.n	800afc2 <memmove+0x12>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4402      	add	r2, r0
 800afd4:	428a      	cmp	r2, r1
 800afd6:	d100      	bne.n	800afda <memmove+0x2a>
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afe2:	e7f7      	b.n	800afd4 <memmove+0x24>

0800afe4 <_sbrk_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	2300      	movs	r3, #0
 800afe8:	4d05      	ldr	r5, [pc, #20]	@ (800b000 <_sbrk_r+0x1c>)
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7f6 f85e 	bl	80010b0 <_sbrk>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_sbrk_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_sbrk_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	20004128 	.word	0x20004128

0800b004 <memchr>:
 800b004:	4603      	mov	r3, r0
 800b006:	b510      	push	{r4, lr}
 800b008:	b2c9      	uxtb	r1, r1
 800b00a:	4402      	add	r2, r0
 800b00c:	4293      	cmp	r3, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	d101      	bne.n	800b016 <memchr+0x12>
 800b012:	2000      	movs	r0, #0
 800b014:	e003      	b.n	800b01e <memchr+0x1a>
 800b016:	7804      	ldrb	r4, [r0, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	428c      	cmp	r4, r1
 800b01c:	d1f6      	bne.n	800b00c <memchr+0x8>
 800b01e:	bd10      	pop	{r4, pc}

0800b020 <memcpy>:
 800b020:	440a      	add	r2, r1
 800b022:	4291      	cmp	r1, r2
 800b024:	f100 33ff 	add.w	r3, r0, #4294967295
 800b028:	d100      	bne.n	800b02c <memcpy+0xc>
 800b02a:	4770      	bx	lr
 800b02c:	b510      	push	{r4, lr}
 800b02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b032:	4291      	cmp	r1, r2
 800b034:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b038:	d1f9      	bne.n	800b02e <memcpy+0xe>
 800b03a:	bd10      	pop	{r4, pc}

0800b03c <_realloc_r>:
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	4680      	mov	r8, r0
 800b042:	4615      	mov	r5, r2
 800b044:	460c      	mov	r4, r1
 800b046:	b921      	cbnz	r1, 800b052 <_realloc_r+0x16>
 800b048:	4611      	mov	r1, r2
 800b04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	f7ff bc39 	b.w	800a8c4 <_malloc_r>
 800b052:	b92a      	cbnz	r2, 800b060 <_realloc_r+0x24>
 800b054:	f7ff fbcc 	bl	800a7f0 <_free_r>
 800b058:	2400      	movs	r4, #0
 800b05a:	4620      	mov	r0, r4
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b060:	f000 f81a 	bl	800b098 <_malloc_usable_size_r>
 800b064:	4285      	cmp	r5, r0
 800b066:	4606      	mov	r6, r0
 800b068:	d802      	bhi.n	800b070 <_realloc_r+0x34>
 800b06a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b06e:	d8f4      	bhi.n	800b05a <_realloc_r+0x1e>
 800b070:	4629      	mov	r1, r5
 800b072:	4640      	mov	r0, r8
 800b074:	f7ff fc26 	bl	800a8c4 <_malloc_r>
 800b078:	4607      	mov	r7, r0
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d0ec      	beq.n	800b058 <_realloc_r+0x1c>
 800b07e:	42b5      	cmp	r5, r6
 800b080:	462a      	mov	r2, r5
 800b082:	4621      	mov	r1, r4
 800b084:	bf28      	it	cs
 800b086:	4632      	movcs	r2, r6
 800b088:	f7ff ffca 	bl	800b020 <memcpy>
 800b08c:	4621      	mov	r1, r4
 800b08e:	4640      	mov	r0, r8
 800b090:	f7ff fbae 	bl	800a7f0 <_free_r>
 800b094:	463c      	mov	r4, r7
 800b096:	e7e0      	b.n	800b05a <_realloc_r+0x1e>

0800b098 <_malloc_usable_size_r>:
 800b098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09c:	1f18      	subs	r0, r3, #4
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bfbc      	itt	lt
 800b0a2:	580b      	ldrlt	r3, [r1, r0]
 800b0a4:	18c0      	addlt	r0, r0, r3
 800b0a6:	4770      	bx	lr

0800b0a8 <_init>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr

0800b0b4 <_fini>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr
