
uCOSII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfb0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d0c0  0800d0c0  0000e0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a8  0800d5a8  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a8  0800d5a8  0000e5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b0  0800d5b0  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b0  0800d5b0  0000e5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5b4  0800d5b4  0000e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d5b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000410c  200001f0  0800d7a8  0000f1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042fc  0800d7a8  0000f2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018159  00000000  00000000  0000f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc3  00000000  00000000  00027372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb6f  00000000  00000000  0002e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1fd  00000000  00000000  0004ae92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091185  00000000  00000000  0006508f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  000f6258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  000fb888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d0a8 	.word	0x0800d0a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d0a8 	.word	0x0800d0a8

08000150 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 8000150:	b672      	cpsid	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000154:	b662      	cpsie	i
        BX      LR
 8000156:	4770      	bx	lr

08000158 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000158:	b672      	cpsid	i
        PUSH   {R1}
 800015a:	b402      	push	{r1}
        MRS     R1, BASEPRI
 800015c:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 8000160:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000164:	f3bf 8f4f 	dsb	sy
        ISB
 8000168:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 800016c:	4608      	mov	r0, r1
        POP    {R1}
 800016e:	bc02      	pop	{r1}
        CPSIE   I
 8000170:	b662      	cpsie	i
        BX      LR
 8000172:	4770      	bx	lr

08000174 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000174:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000176:	f380 8811 	msr	BASEPRI, r0
        DSB
 800017a:	f3bf 8f4f 	dsb	sy
        ISB
 800017e:	f3bf 8f6f 	isb	sy
        CPSIE   I
 8000182:	b662      	cpsie	i
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000186:	bf30      	wfi
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 800018a:	bf20      	wfe
        BX      LR
 800018c:	4770      	bx	lr

0800018e <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018e:	fab0 f080 	clz	r0, r0
        BX      LR
 8000192:	4770      	bx	lr

08000194 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000194:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000198:	fab0 f080 	clz	r0, r0
        BX      LR
 800019c:	4770      	bx	lr

0800019e <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019e:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 80001a2:	4770      	bx	lr

080001a4 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a4:	b672      	cpsid	i
    PUSH   {R1}
 80001a6:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a8:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001ac:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001b0:	f3bf 8f4f 	dsb	sy
    ISB
 80001b4:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b8:	4608      	mov	r0, r1
    POP    {R1}
 80001ba:	bc02      	pop	{r1}
    CPSIE   I
 80001bc:	b662      	cpsie	i
    BX      LR
 80001be:	4770      	bx	lr

080001c0 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001c0:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001c2:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c6:	f3bf 8f4f 	dsb	sy
    ISB
 80001ca:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ce:	b662      	cpsie	i
    BX      LR
 80001d0:	4770      	bx	lr

080001d2 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001d2:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d4:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d8:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001dc:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001e0:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e4:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e6:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001ec:	f641 4034 	movw	r0, #7220	@ 0x1c34
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001f0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 80001f4:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f6:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001fa:	f007 faf3 	bl	80077e4 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fe:	4832      	ldr	r0, [pc, #200]	@ (80002c8 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 8000200:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000202:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000204:	f641 709e 	movw	r0, #8094	@ 0x1f9e
    MOVT    R0, #:upper16:OSPrioCur
 8000208:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800020c:	f641 719f 	movw	r1, #8095	@ 0x1f9f
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000210:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000214:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000216:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000218:	f242 10b4 	movw	r0, #8628	@ 0x21b4
    MOVT    R0, #:upper16:OSTCBCur
 800021c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000220:	f242 11bc 	movw	r1, #8636	@ 0x21bc
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000224:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000228:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800022a:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800022c:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022e:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000232:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000236:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800023a:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023e:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000246:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000248:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800024c:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024e:	b662      	cpsie	i
    BX       R1
 8000250:	4708      	bx	r1

08000252 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000252:	481e      	ldr	r0, [pc, #120]	@ (80002cc <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000254:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 8000258:	6001      	str	r1, [r0, #0]
    BX      LR
 800025a:	4770      	bx	lr

0800025c <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800025c:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025e:	f641 423c 	movw	r2, #7228	@ 0x1c3c
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 8000262:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 8000266:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000268:	f381 8811 	msr	BASEPRI, r1
    DSB
 800026c:	f3bf 8f4f 	dsb	sy
    ISB
 8000270:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000274:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000276:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 800027a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027e:	f242 15b4 	movw	r5, #8628	@ 0x21b4
    MOVT    R5, #:upper16:OSTCBCur
 8000282:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 8000286:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000288:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800028a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800028c:	f007 faaa 	bl	80077e4 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000290:	f641 709e 	movw	r0, #8094	@ 0x1f9e
    MOVT    R0, #:upper16:OSPrioCur
 8000294:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000298:	f641 719f 	movw	r1, #8095	@ 0x1f9f
    MOVT    R1, #:upper16:OSPrioHighRdy
 800029c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002a0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002a2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a4:	f242 11bc 	movw	r1, #8636	@ 0x21bc
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002ac:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002ae:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002b0:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ba:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002be:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002c2:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c6:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c8:	20001fac 	.word	0x20001fac
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002cc:	e000ed04 	.word	0xe000ed04

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <DIGet>:
*               > 0   if edges have been detected
*********************************************************************************************************
*/
//PINES DE ENTRADA
uint16_t  DIGet (uint16_t n)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
    uint16_t  val;

    if (n < DIO_MAX_DI) {
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80b      	bhi.n	8000c44 <DIGet+0x28>
        OS_ENTER_CRITICAL();
 8000c2c:	f7ff fa90 	bl	8000150 <CPU_IntDis>
        val = DITbl[n].DIVal;                              /* Get state of DI channel                  */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <DIGet+0x34>)
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	4413      	add	r3, r2
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	81fb      	strh	r3, [r7, #14]
        OS_EXIT_CRITICAL();
 8000c3c:	f7ff fa8a 	bl	8000154 <CPU_IntEn>
        return (val);
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	e000      	b.n	8000c46 <DIGet+0x2a>
    } else {
        return (0);                                        /* Return negated for invalid channel       */
 8000c44:	2300      	movs	r3, #0
    }
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000020c 	.word	0x2000020c

08000c54 <DIUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIUpdate (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
    uint16_t    i;
    DIO_DI  *pdi;

    pdi = &DITbl[0];
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d58 <DIUpdate+0x104>)
 8000c5c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	e070      	b.n	8000d46 <DIUpdate+0xf2>
        if (pdi->DIBypassEn == FALSE) {          /* See if discrete input channel is bypassed          */
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	795b      	ldrb	r3, [r3, #5]
 8000c68:	f083 0301 	eor.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d063      	beq.n	8000d3a <DIUpdate+0xe6>
            switch (pdi->DIModeSel) {            /* No, process channel                                */
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	88db      	ldrh	r3, [r3, #6]
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d85f      	bhi.n	8000d3a <DIUpdate+0xe6>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <DIUpdate+0x2c>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cb5 	.word	0x08000cb5
 8000c8c:	08000cc1 	.word	0x08000cc1
 8000c90:	08000d3b 	.word	0x08000d3b
 8000c94:	08000d3b 	.word	0x08000d3b
 8000c98:	08000d3b 	.word	0x08000d3b
 8000c9c:	08000cd3 	.word	0x08000cd3
 8000ca0:	08000d07 	.word	0x08000d07
                case DI_MODE_LOW:                /* Input is forced low                                */
                     pdi->DIVal = 0;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	805a      	strh	r2, [r3, #2]
                     break;
 8000caa:	e046      	b.n	8000d3a <DIUpdate+0xe6>

                case DI_MODE_HIGH:               /* Input is forced high                               */
                     pdi->DIVal = 1;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	805a      	strh	r2, [r3, #2]
                     break;
 8000cb2:	e042      	b.n	8000d3a <DIUpdate+0xe6>

                case DI_MODE_DIRECT:                  /* Input is based on state of physical input     */
                     pdi->DIVal = (uint16_t)pdi->DIIn;   /* Obtain the state of the sensor                */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	805a      	strh	r2, [r3, #2]
                     break;
 8000cbe:	e03c      	b.n	8000d3a <DIUpdate+0xe6>

                case DI_MODE_INV:                /* Input is based on the complement state of input    */
                     pdi->DIVal = (uint16_t)(pdi->DIIn ? 0 : 1);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	805a      	strh	r2, [r3, #2]
                     break;
 8000cd0:	e033      	b.n	8000d3a <DIUpdate+0xe6>
                     DIIsTrig(pdi);              /* Handle edge triggered mode                         */
                     break;
#endif
/*$PAGE*/
                case DI_MODE_TOGGLE_LOW_GOING:
                     if (pdi->DIPrev == 1 && pdi->DIIn == 0) {
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d010      	beq.n	8000cfc <DIUpdate+0xa8>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <DIUpdate+0xa8>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	885b      	ldrh	r3, [r3, #2]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	711a      	strb	r2, [r3, #4]
                     break;
 8000d04:	e019      	b.n	8000d3a <DIUpdate+0xe6>

                case DI_MODE_TOGGLE_HIGH_GOING:
                     if (pdi->DIPrev == 0 && pdi->DIIn == 1) {
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00d      	beq.n	8000d30 <DIUpdate+0xdc>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d009      	beq.n	8000d30 <DIUpdate+0xdc>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	885b      	ldrh	r3, [r3, #2]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	711a      	strb	r2, [r3, #4]
                     break;
 8000d38:	bf00      	nop
            }
        }
        pdi++;                                   /* Point to next DIO_DO element                       */
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	3301      	adds	r3, #1
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d98b      	bls.n	8000c64 <DIUpdate+0x10>
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	2000020c 	.word	0x2000020c

08000d5c <DIOInit>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIOInit (void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
	uint16_t   err;
	uint16_t   i;
    DIO_DI  *pdi;
    DIO_DO  *pdo;

    pdi = &DITbl[0];
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <DIOInit+0xa0>)
 8000d64:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	81fb      	strh	r3, [r7, #14]
 8000d6a:	e00e      	b.n	8000d8a <DIOInit+0x2e>
        pdi->DIVal         = 0;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	805a      	strh	r2, [r3, #2]
        pdi->DIBypassEn    = FALSE;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2200      	movs	r2, #0
 8000d76:	715a      	strb	r2, [r3, #5]
        pdi->DIModeSel     = DI_MODE_DIRECT;     /* Set the default mode to direct input               */
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	80da      	strh	r2, [r3, #6]
#if DI_EDGE_EN
        pdi->DITrigFnct    = (void *)0;          /* No function to execute when transition detected    */
        pdi->DITrigFnctArg = (void *)0;
#endif
        pdi++;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3308      	adds	r3, #8
 8000d82:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000d84:	89fb      	ldrh	r3, [r7, #14]
 8000d86:	3301      	adds	r3, #1
 8000d88:	81fb      	strh	r3, [r7, #14]
 8000d8a:	89fb      	ldrh	r3, [r7, #14]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d9ed      	bls.n	8000d6c <DIOInit+0x10>
    }
    pdo = &DOTbl[0];
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <DIOInit+0xa4>)
 8000d92:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	81fb      	strh	r3, [r7, #14]
 8000d98:	e01d      	b.n	8000dd6 <DIOInit+0x7a>
        pdo->DOOut        = 0;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
        pdo->DOBypassEn   = FALSE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	70da      	strb	r2, [r3, #3]
        pdo->DOModeSel    = DO_MODE_DIRECT;      /* Set the default mode to direct output              */
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2202      	movs	r2, #2
 8000daa:	809a      	strh	r2, [r3, #4]
        pdo->DOInv        = FALSE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	721a      	strb	r2, [r3, #8]
#if DO_BLINK_MODE_EN
        pdo->DOBlinkEnSel = DO_BLINK_EN_NORMAL;  /* Blinking is enabled by direct user request         */
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = 1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = 2;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 2;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	81da      	strh	r2, [r3, #14]
#endif
        pdo++;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3310      	adds	r3, #16
 8000dce:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	81fb      	strh	r3, [r7, #14]
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d9de      	bls.n	8000d9a <DIOInit+0x3e>
    }
#if DO_BLINK_MODE_EN
    DOSyncCtrMax = 100;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <DIOInit+0xa8>)
 8000dde:	2264      	movs	r2, #100	@ 0x64
 8000de0:	701a      	strb	r2, [r3, #0]
#endif
    DIOInitIO();
 8000de2:	f000 f945 	bl	8001070 <DIOInitIO>
    OSTaskCreate(DIOTask, (void *)0, &DIOTaskStk[DIO_TASK_STK_SIZE], DIO_TASK_PRIO);
 8000de6:	2328      	movs	r3, #40	@ 0x28
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <DIOInit+0xac>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <DIOInit+0xb0>)
 8000dee:	f007 fe39 	bl	8008a64 <OSTaskCreate>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000020c 	.word	0x2000020c
 8000e00:	2000028c 	.word	0x2000028c
 8000e04:	2000038d 	.word	0x2000038d
 8000e08:	20000b90 	.word	0x20000b90
 8000e0c:	08000e11 	.word	0x08000e11

08000e10 <DIOTask>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIOTask (void *data)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    data = data;                                      /* Avoid compiler warning (uC/OS requirement)    */
    for (;;) {
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f008 f9b1 	bl	8009180 <OSTimeDly>

        DIRd();                                       /* Read physical inputs and map to DI channels   */
 8000e1e:	f000 f92d 	bl	800107c <DIRd>
        DIUpdate();                                   /* Update all DI channels                        */
 8000e22:	f7ff ff17 	bl	8000c54 <DIUpdate>
        DOUpdate();                                   /* Update all DO channels                        */
 8000e26:	f000 f895 	bl	8000f54 <DOUpdate>
        DOWr();                                       /* Map DO channels to physical outputs           */
 8000e2a:	f000 f98b 	bl	8001144 <DOWr>
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 8000e2e:	bf00      	nop
 8000e30:	e7f2      	b.n	8000e18 <DIOTask+0x8>
	...

08000e34 <DOCfgBlink>:
*********************************************************************************************************
*/

#if  DO_BLINK_MODE_EN
void  DOCfgBlink (uint16_t n, uint16_t mode, uint16_t a, uint16_t b)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	4603      	mov	r3, r0
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	803b      	strh	r3, [r7, #0]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d814      	bhi.n	8000e82 <DOCfgBlink+0x4e>
        pdo               = &DOTbl[n];
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <DOCfgBlink+0x58>)
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000e62:	f7ff f975 	bl	8000150 <CPU_IntDis>
        pdo->DOBlinkEnSel = mode;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	88ba      	ldrh	r2, [r7, #4]
 8000e6a:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = a;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = b;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	883a      	ldrh	r2, [r7, #0]
 8000e76:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 0;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	81da      	strh	r2, [r3, #14]
        OS_EXIT_CRITICAL();
 8000e7e:	f7ff f969 	bl	8000154 <CPU_IntEn>
    }
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000028c 	.word	0x2000028c

08000e90 <DOCfgMode>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOCfgMode (uint16_t n, uint16_t mode, bool inv)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	70fb      	strb	r3, [r7, #3]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80e      	bhi.n	8000ec6 <DOCfgMode+0x36>
        pdo            = &DOTbl[n];
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <DOCfgMode+0x40>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000eb2:	f7ff f94d 	bl	8000150 <CPU_IntDis>
        pdo->DOModeSel = mode;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	88ba      	ldrh	r2, [r7, #4]
 8000eba:	809a      	strh	r2, [r3, #4]
        pdo->DOInv     = inv;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	721a      	strb	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8000ec2:	f7ff f947 	bl	8000154 <CPU_IntEn>
    }
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000028c 	.word	0x2000028c

08000ed4 <DOIsBlinkEn>:
*********************************************************************************************************
*/

#if DO_BLINK_MODE_EN
static  bool  DOIsBlinkEn (DIO_DO *pdo)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    bool  en;

    en = FALSE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
    switch (pdo->DOBlinkEnSel) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	88db      	ldrh	r3, [r3, #6]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d00d      	beq.n	8000f04 <DOIsBlinkEn+0x30>
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	dc11      	bgt.n	8000f10 <DOIsBlinkEn+0x3c>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <DOIsBlinkEn+0x22>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d003      	beq.n	8000efc <DOIsBlinkEn+0x28>
 8000ef4:	e00c      	b.n	8000f10 <DOIsBlinkEn+0x3c>
        case DO_BLINK_EN:                   /* Blink is always enabled                                 */
             en = TRUE;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
             break;
 8000efa:	e009      	b.n	8000f10 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_NORMAL:            /* Blink depends on user request's state                   */
             en = pdo->DOBypass;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	73fb      	strb	r3, [r7, #15]
             break;
 8000f02:	e005      	b.n	8000f10 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_INV:               /* Blink depends on the complemented user request's state  */
             en = pdo->DOBypass ? FALSE : TRUE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	789b      	ldrb	r3, [r3, #2]
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
             break;
 8000f0e:	bf00      	nop
    }
    return (en);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <DOSet>:
* Notes       : The actual output will be complemented if 'DIInv' is set to TRUE.
*********************************************************************************************************
*/

void  DOSet (uint16_t n, bool state)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	717b      	strb	r3, [r7, #5]
if (n < DIO_MAX_DO) {
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	d80a      	bhi.n	8000f48 <DOSet+0x2c>
	  OS_ENTER_CRITICAL();
 8000f32:	f7ff f90d 	bl	8000150 <CPU_IntDis>
	  DOTbl[n].DOCtrl = state;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <DOSet+0x34>)
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3301      	adds	r3, #1
 8000f40:	797a      	ldrb	r2, [r7, #5]
 8000f42:	701a      	strb	r2, [r3, #0]
	  OS_EXIT_CRITICAL();
 8000f44:	f7ff f906 	bl	8000154 <CPU_IntEn>
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000028c 	.word	0x2000028c

08000f54 <DOUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DOUpdate (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
    uint16_t     i;
    bool  out;
    DIO_DO   *pdo;

    pdo = &DOTbl[0];
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <DOUpdate+0x110>)
 8000f5c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 8000f5e:	2300      	movs	r3, #0
 8000f60:	80fb      	strh	r3, [r7, #6]
 8000f62:	e067      	b.n	8001034 <DOUpdate+0xe0>
        if (pdo->DOBypassEn == FALSE) {          /* See if DO channel is enabled                       */
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	78db      	ldrb	r3, [r3, #3]
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <DOUpdate+0x26>
            pdo->DOBypass = pdo->DOCtrl;         /* Obtain control state from application              */
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	785a      	ldrb	r2, [r3, #1]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	709a      	strb	r2, [r3, #2]
        }
        out = FALSE;                             /* Assume that the output will be low unless changed  */
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	717b      	strb	r3, [r7, #5]
        switch (pdo->DOModeSel) {
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	889b      	ldrh	r3, [r3, #4]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d842      	bhi.n	800100c <DOUpdate+0xb8>
 8000f86:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <DOUpdate+0x38>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	0800100d 	.word	0x0800100d
 8000f90:	08000fa1 	.word	0x08000fa1
 8000f94:	08000fa7 	.word	0x08000fa7
 8000f98:	08000faf 	.word	0x08000faf
 8000f9c:	08000fcd 	.word	0x08000fcd
            case DO_MODE_LOW:                    /* Output will in fact be low                         */
                 break;

            case DO_MODE_HIGH:                   /* Output will be high                                */
                 out = TRUE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	717b      	strb	r3, [r7, #5]
                 break;
 8000fa4:	e032      	b.n	800100c <DOUpdate+0xb8>

            case DO_MODE_DIRECT:                 /* Output is based on state of user supplied state    */
                 out = pdo->DOBypass;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	717b      	strb	r3, [r7, #5]
                 break;
 8000fac:	e02e      	b.n	800100c <DOUpdate+0xb8>
/*$PAGE*/
#if DO_BLINK_MODE_EN
            case DO_MODE_BLINK_SYNC:                       /* Sync. Blink mode                         */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f7ff ff90 	bl	8000ed4 <DOIsBlinkEn>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d027      	beq.n	800100a <DOUpdate+0xb6>
                     if (pdo->DOA >= DOSyncCtr) {          /* ... yes, High when below threshold       */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	895b      	ldrh	r3, [r3, #10]
 8000fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001068 <DOUpdate+0x114>)
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d321      	bcc.n	800100a <DOUpdate+0xb6>
                         out = TRUE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 break;
 8000fca:	e01e      	b.n	800100a <DOUpdate+0xb6>

            case DO_MODE_BLINK_ASYNC:                      /* Async. Blink mode                        */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f7ff ff81 	bl	8000ed4 <DOIsBlinkEn>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <DOUpdate+0x94>
                     if (pdo->DOA >= pdo->DOBCtr) {        /* ... yes, High when below threshold       */
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	895a      	ldrh	r2, [r3, #10]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	89db      	ldrh	r3, [r3, #14]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d301      	bcc.n	8000fe8 <DOUpdate+0x94>
                         out = TRUE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 if (pdo->DOBCtr < pdo->DOB) {             /* Update the threshold counter             */
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	89da      	ldrh	r2, [r3, #14]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	899b      	ldrh	r3, [r3, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d206      	bcs.n	8001002 <DOUpdate+0xae>
                     pdo->DOBCtr++;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	89db      	ldrh	r3, [r3, #14]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	81da      	strh	r2, [r3, #14]
                 } else {
                     pdo->DOBCtr = 0;
                 }
                 break;
 8001000:	e004      	b.n	800100c <DOUpdate+0xb8>
                     pdo->DOBCtr = 0;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	81da      	strh	r2, [r3, #14]
                 break;
 8001008:	e000      	b.n	800100c <DOUpdate+0xb8>
                 break;
 800100a:	bf00      	nop
#endif
        }
        if (pdo->DOInv == TRUE) {                          /* See if output needs to be inverted ...   */
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <DOUpdate+0xce>
            pdo->DOOut = out ? FALSE : TRUE;               /* ... yes, complement output               */
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e002      	b.n	8001028 <DOUpdate+0xd4>
        } else {
            pdo->DOOut = out;                              /* ... no,  no inversion!                   */
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	797a      	ldrb	r2, [r7, #5]
 8001026:	701a      	strb	r2, [r3, #0]
        }
        pdo++;                                             /* Point to next DIO_DO element             */
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3310      	adds	r3, #16
 800102c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	3301      	adds	r3, #1
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d994      	bls.n	8000f64 <DOUpdate+0x10>
    }
#if DO_BLINK_MODE_EN
    if (DOSyncCtr < DOSyncCtrMax) {                        /* Update the synchronous free running ctr  */
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <DOUpdate+0x114>)
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <DOUpdate+0x118>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d206      	bcs.n	8001054 <DOUpdate+0x100>
        DOSyncCtr++;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <DOUpdate+0x114>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <DOUpdate+0x114>)
 8001050:	701a      	strb	r2, [r3, #0]
    } else {
        DOSyncCtr = 0;
    }
#endif
}
 8001052:	e002      	b.n	800105a <DOUpdate+0x106>
        DOSyncCtr = 0;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <DOUpdate+0x114>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000028c 	.word	0x2000028c
 8001068:	2000038c 	.word	0x2000038c
 800106c:	2000038d 	.word	0x2000038d

08001070 <DIOInitIO>:
*                   Port C = OUT  (not used)
*********************************************************************************************************
*/

void  DIOInitIO (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0


}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <DIRd>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIRd (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    uint16_t    i;
    uint16_t    in;
    uint16_t    msk;


    pdi = &DITbl[0];                                    /* Point at beginning of discrete inputs    */
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <DIRd+0x54>)
 8001084:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                                       /* Set mask to extract bit 0                */
 8001086:	2301      	movs	r3, #1
 8001088:	813b      	strh	r3, [r7, #8]
    in  = inp();                                     	/* Read the physical port (8 bits)          */
 800108a:	f000 f823 	bl	80010d4 <inp>
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 8001092:	2300      	movs	r3, #0
 8001094:	817b      	strh	r3, [r7, #10]
 8001096:	e013      	b.n	80010c0 <DIRd+0x44>
        pdi->DIIn   = (bool)(in & msk) ? 1 : 0;
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	893b      	ldrh	r3, [r7, #8]
 800109c:	4013      	ands	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	701a      	strb	r2, [r3, #0]
        msk       	<<= 1;
 80010ae:	893b      	ldrh	r3, [r7, #8]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	813b      	strh	r3, [r7, #8]
        pdi++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3308      	adds	r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	3301      	adds	r3, #1
 80010be:	817b      	strh	r3, [r7, #10]
 80010c0:	897b      	ldrh	r3, [r7, #10]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d9e8      	bls.n	8001098 <DIRd+0x1c>
    }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000020c 	.word	0x2000020c

080010d4 <inp>:
static uint16_t inp(){
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
	uint16_t estado = 0; // Lee el estado de los 8 pines
 80010da:	2300      	movs	r3, #0
 80010dc:	80fb      	strh	r3, [r7, #6]

	estado = (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)<<4)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)<<3)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)<<2)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)<<1)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0));
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <inp+0x6c>)
 80010e2:	f001 f893 	bl	800220c <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	b21c      	sxth	r4, r3
 80010ec:	2140      	movs	r1, #64	@ 0x40
 80010ee:	4814      	ldr	r0, [pc, #80]	@ (8001140 <inp+0x6c>)
 80010f0:	f001 f88c 	bl	800220c <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4323      	orrs	r3, r4
 80010fc:	b21c      	sxth	r4, r3
 80010fe:	2110      	movs	r1, #16
 8001100:	480f      	ldr	r0, [pc, #60]	@ (8001140 <inp+0x6c>)
 8001102:	f001 f883 	bl	800220c <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	b21b      	sxth	r3, r3
 800110c:	4323      	orrs	r3, r4
 800110e:	b21c      	sxth	r4, r3
 8001110:	2102      	movs	r1, #2
 8001112:	480b      	ldr	r0, [pc, #44]	@ (8001140 <inp+0x6c>)
 8001114:	f001 f87a 	bl	800220c <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b21b      	sxth	r3, r3
 800111e:	4323      	orrs	r3, r4
 8001120:	b21c      	sxth	r4, r3
 8001122:	2101      	movs	r1, #1
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <inp+0x6c>)
 8001126:	f001 f871 	bl	800220c <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	b21b      	sxth	r3, r3
 800112e:	4323      	orrs	r3, r4
 8001130:	b21b      	sxth	r3, r3
 8001132:	80fb      	strh	r3, [r7, #6]

	return estado;
 8001134:	88fb      	ldrh	r3, [r7, #6]
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	40010c00 	.word	0x40010c00

08001144 <DOWr>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOWr (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
    DIO_DO  *pdo;
    uint16_t    i;
    uint16_t    out;
    uint16_t    msk;

    pdo = &DOTbl[0];						/* Point at first discrete output channel                  */
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <DOWr+0x54>)
 800114c:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                           /* First DO will be mapped to bit 0                        */
 800114e:	2301      	movs	r3, #1
 8001150:	80fb      	strh	r3, [r7, #6]
    out = 0x0000;                           /* Local 8 bit port image                                  */
 8001152:	2300      	movs	r3, #0
 8001154:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8001156:	2300      	movs	r3, #0
 8001158:	817b      	strh	r3, [r7, #10]
 800115a:	e010      	b.n	800117e <DOWr+0x3a>
        if (pdo->DOOut == TRUE) {
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <DOWr+0x28>
            out |= msk;
 8001164:	893a      	ldrh	r2, [r7, #8]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4313      	orrs	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
        }
        msk <<= 1;
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	80fb      	strh	r3, [r7, #6]
        pdo++;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3310      	adds	r3, #16
 8001176:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8001178:	897b      	ldrh	r3, [r7, #10]
 800117a:	3301      	adds	r3, #1
 800117c:	817b      	strh	r3, [r7, #10]
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d9eb      	bls.n	800115c <DOWr+0x18>
    }
    outp(GPIOA, out);                      /* Output port image to physical port                      */
 8001184:	893b      	ldrh	r3, [r7, #8]
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <DOWr+0x58>)
 800118a:	f000 f809 	bl	80011a0 <outp>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000028c 	.word	0x2000028c
 800119c:	40010800 	.word	0x40010800

080011a0 <outp>:
#endif

static void outp(GPIO_TypeDef *GPIOx, uint16_t estado){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = estado;
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 fda9 	bl	8001d18 <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 80011c6:	f7fe ffc3 	bl	8000150 <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 80011ca:	2310      	movs	r3, #16
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	e009      	b.n	80011e4 <main+0x28>
  {
	  /* Set all external intr. to KA interrupt priority boundary */
	  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 ffe5 	bl	80071a8 <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	3301      	adds	r3, #1
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d9f2      	bls.n	80011d0 <main+0x14>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f8c3 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f945 	bl	800147c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011f2:	f009 fe17 	bl	800ae24 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80011f6:	f000 f917 	bl	8001428 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OSInit();
 80011fa:	f006 fba7 	bl	800794c <OSInit>

	OSTaskCreateExt( StartupTask,
 80011fe:	2303      	movs	r3, #3
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	2300      	movs	r3, #0
 8001204:	9303      	str	r3, [sp, #12]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <main+0x158>)
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	2301      	movs	r3, #1
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	4a40      	ldr	r2, [pc, #256]	@ (8001318 <main+0x15c>)
 8001216:	2100      	movs	r1, #0
 8001218:	4840      	ldr	r0, [pc, #256]	@ (800131c <main+0x160>)
 800121a:	f007 fc7f 	bl	8008b1c <OSTaskCreateExt>
					 &StartupTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800121e:	1d7b      	adds	r3, r7, #5
 8001220:	461a      	mov	r2, r3
 8001222:	493f      	ldr	r1, [pc, #252]	@ (8001320 <main+0x164>)
 8001224:	2003      	movs	r0, #3
 8001226:	f007 fdcd 	bl	8008dc4 <OSTaskNameSet>
		(INT8U *)"Startup task",
		&os_err);
	#endif

	OSTaskCreateExt( SenoTsk,
 800122a:	2303      	movs	r3, #3
 800122c:	9304      	str	r3, [sp, #16]
 800122e:	2300      	movs	r3, #0
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <main+0x168>)
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2302      	movs	r3, #2
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	4a39      	ldr	r2, [pc, #228]	@ (8001328 <main+0x16c>)
 8001242:	2100      	movs	r1, #0
 8001244:	4839      	ldr	r0, [pc, #228]	@ (800132c <main+0x170>)
 8001246:	f007 fc69 	bl	8008b1c <OSTaskCreateExt>
					 &SenoTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800124a:	1d7b      	adds	r3, r7, #5
 800124c:	461a      	mov	r2, r3
 800124e:	4938      	ldr	r1, [pc, #224]	@ (8001330 <main+0x174>)
 8001250:	2003      	movs	r0, #3
 8001252:	f007 fdb7 	bl	8008dc4 <OSTaskNameSet>
		(INT8U *)"Seno Task",
		&os_err);
	#endif


	OSTaskCreateExt( PrimerSecuencia,
 8001256:	2303      	movs	r3, #3
 8001258:	9304      	str	r3, [sp, #16]
 800125a:	2300      	movs	r3, #0
 800125c:	9303      	str	r3, [sp, #12]
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <main+0x178>)
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2303      	movs	r3, #3
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2303      	movs	r3, #3
 800126c:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <main+0x17c>)
 800126e:	2100      	movs	r1, #0
 8001270:	4832      	ldr	r0, [pc, #200]	@ (800133c <main+0x180>)
 8001272:	f007 fc53 	bl	8008b1c <OSTaskCreateExt>
					 &PrimerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8001276:	1d7b      	adds	r3, r7, #5
 8001278:	461a      	mov	r2, r3
 800127a:	4931      	ldr	r1, [pc, #196]	@ (8001340 <main+0x184>)
 800127c:	2003      	movs	r0, #3
 800127e:	f007 fda1 	bl	8008dc4 <OSTaskNameSet>
		(INT8U *)"Primer Secuencia",
		&os_err);
	#endif


	OSTaskCreateExt( SegundaSecuencia,
 8001282:	2303      	movs	r3, #3
 8001284:	9304      	str	r3, [sp, #16]
 8001286:	2300      	movs	r3, #0
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <main+0x188>)
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	2304      	movs	r3, #4
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2304      	movs	r3, #4
 8001298:	4a2b      	ldr	r2, [pc, #172]	@ (8001348 <main+0x18c>)
 800129a:	2100      	movs	r1, #0
 800129c:	482b      	ldr	r0, [pc, #172]	@ (800134c <main+0x190>)
 800129e:	f007 fc3d 	bl	8008b1c <OSTaskCreateExt>
					 &SegundaSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		 OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80012a2:	1d7b      	adds	r3, r7, #5
 80012a4:	461a      	mov	r2, r3
 80012a6:	492a      	ldr	r1, [pc, #168]	@ (8001350 <main+0x194>)
 80012a8:	2003      	movs	r0, #3
 80012aa:	f007 fd8b 	bl	8008dc4 <OSTaskNameSet>
		 (INT8U *)"Segunda Secuencia",
		 &os_err);
	#endif


	OSTaskCreateExt( TercerSecuencia,
 80012ae:	2303      	movs	r3, #3
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <main+0x198>)
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2305      	movs	r3, #5
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2305      	movs	r3, #5
 80012c4:	4a24      	ldr	r2, [pc, #144]	@ (8001358 <main+0x19c>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4824      	ldr	r0, [pc, #144]	@ (800135c <main+0x1a0>)
 80012ca:	f007 fc27 	bl	8008b1c <OSTaskCreateExt>
					 &TercerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		  OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80012ce:	1d7b      	adds	r3, r7, #5
 80012d0:	461a      	mov	r2, r3
 80012d2:	4923      	ldr	r1, [pc, #140]	@ (8001360 <main+0x1a4>)
 80012d4:	2003      	movs	r0, #3
 80012d6:	f007 fd75 	bl	8008dc4 <OSTaskNameSet>
		  (INT8U *)"Tercer Secuencia",
		  &os_err);
	#endif

	OSTaskCreateExt(SerialTask,
 80012da:	2303      	movs	r3, #3
 80012dc:	9304      	str	r3, [sp, #16]
 80012de:	2300      	movs	r3, #0
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <main+0x1a8>)
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2306      	movs	r3, #6
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2306      	movs	r3, #6
 80012f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001368 <main+0x1ac>)
 80012f2:	2100      	movs	r1, #0
 80012f4:	481d      	ldr	r0, [pc, #116]	@ (800136c <main+0x1b0>)
 80012f6:	f007 fc11 	bl	8008b1c <OSTaskCreateExt>
					&SerialTaskStk[0],
					APP_CFG_STARTUP_TASK_STK_SIZE,
					0,
					(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		  OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80012fa:	1d7b      	adds	r3, r7, #5
 80012fc:	461a      	mov	r2, r3
 80012fe:	491c      	ldr	r1, [pc, #112]	@ (8001370 <main+0x1b4>)
 8001300:	2003      	movs	r0, #3
 8001302:	f007 fd5f 	bl	8008dc4 <OSTaskNameSet>
		  (INT8U *)"Serial",
		  &os_err);
	#endif

  DIOInit();
 8001306:	f7ff fd29 	bl	8000d5c <DIOInit>
  OSStart();
 800130a:	f006 fbff 	bl	8007b0c <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130e:	bf00      	nop
 8001310:	e7fd      	b.n	800130e <main+0x152>
 8001312:	bf00      	nop
 8001314:	20000bd8 	.word	0x20000bd8
 8001318:	20000dd4 	.word	0x20000dd4
 800131c:	080015a1 	.word	0x080015a1
 8001320:	0800d0c0 	.word	0x0800d0c0
 8001324:	20000dd8 	.word	0x20000dd8
 8001328:	20000fd4 	.word	0x20000fd4
 800132c:	08001681 	.word	0x08001681
 8001330:	0800d0d0 	.word	0x0800d0d0
 8001334:	20000fd8 	.word	0x20000fd8
 8001338:	200011d4 	.word	0x200011d4
 800133c:	080017f9 	.word	0x080017f9
 8001340:	0800d0dc 	.word	0x0800d0dc
 8001344:	200011d8 	.word	0x200011d8
 8001348:	200013d4 	.word	0x200013d4
 800134c:	08001859 	.word	0x08001859
 8001350:	0800d0f0 	.word	0x0800d0f0
 8001354:	200013d8 	.word	0x200013d8
 8001358:	200015d4 	.word	0x200015d4
 800135c:	080018cb 	.word	0x080018cb
 8001360:	0800d104 	.word	0x0800d104
 8001364:	200015d8 	.word	0x200015d8
 8001368:	200017d4 	.word	0x200017d4
 800136c:	0800160d 	.word	0x0800160d
 8001370:	0800d118 	.word	0x0800d118

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	@ 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800137e:	2228      	movs	r2, #40	@ 0x28
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00a fa2a 	bl	800b7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b2:	2301      	movs	r3, #1
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fcba 	bl	8003d44 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013d6:	f000 fb69 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2102      	movs	r1, #2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 ff26 	bl	8004248 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001402:	f000 fb53 	bl	8001aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001406:	2310      	movs	r3, #16
 8001408:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f003 f8a7 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800141c:	f000 fb46 	bl	8001aac <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3750      	adds	r7, #80	@ 0x50
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_USART3_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_USART3_UART_Init+0x4c>)
 8001460:	f003 f936 	bl	80046d0 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 fb1f 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000b90 	.word	0x20000b90
 8001478:	40004800 	.word	0x40004800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <MX_GPIO_Init+0xe8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a33      	ldr	r2, [pc, #204]	@ (8001564 <MX_GPIO_Init+0xe8>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <MX_GPIO_Init+0xe8>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a21      	ldr	r2, [pc, #132]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_GPIO_Init+0xe8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f6:	481c      	ldr	r0, [pc, #112]	@ (8001568 <MX_GPIO_Init+0xec>)
 80014f8:	f000 fe9f 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014fc:	2200      	movs	r2, #0
 80014fe:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001502:	481a      	ldr	r0, [pc, #104]	@ (800156c <MX_GPIO_Init+0xf0>)
 8001504:	f000 fe99 	bl	800223a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4811      	ldr	r0, [pc, #68]	@ (8001568 <MX_GPIO_Init+0xec>)
 8001522:	f000 fcef 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001526:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800152a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	@ (800156c <MX_GPIO_Init+0xf0>)
 8001540:	f000 fce0 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001544:	23d3      	movs	r3, #211	@ 0xd3
 8001546:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	@ (8001570 <MX_GPIO_Init+0xf4>)
 8001558:	f000 fcd4 	bl	8001f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40011000 	.word	0x40011000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00

08001574 <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 800158e:	f007 feab 	bl	80092e8 <OSTimeGet>
 8001592:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <StartupTask>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

static void StartupTask (void *p_arg){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 80015a8:	f002 ff8c 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80015ac:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f006 f950 	bl	8007854 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 80015b4:	f006 fad2 	bl	8007b5c <OSStatInit>
	#endif

	SuspendAllTasks();
 80015b8:	f000 fa2f 	bl	8001a1a <SuspendAllTasks>
	ApagarBlink();
 80015bc:	f000 fa63 	bl	8001a86 <ApagarBlink>

	while (DEF_TRUE){
		switch (GetButton()) {
 80015c0:	f000 f9dd 	bl	800197e <GetButton>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d81a      	bhi.n	8001600 <StartupTask+0x60>
 80015ca:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <StartupTask+0x30>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015e9 	.word	0x080015e9
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	080015f9 	.word	0x080015f9
			case BOTON1:
				SuspendAllTasksExceptOne(SEC1);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fa30 	bl	8001a46 <SuspendAllTasksExceptOne>
				break;
 80015e6:	e00c      	b.n	8001602 <StartupTask+0x62>
			case BOTON2:
				SuspendAllTasksExceptOne(SEC2);
 80015e8:	2004      	movs	r0, #4
 80015ea:	f000 fa2c 	bl	8001a46 <SuspendAllTasksExceptOne>
				break;
 80015ee:	e008      	b.n	8001602 <StartupTask+0x62>
			case BOTON3:
				SuspendAllTasksExceptOne(SEC3);
 80015f0:	2005      	movs	r0, #5
 80015f2:	f000 fa28 	bl	8001a46 <SuspendAllTasksExceptOne>
				break;
 80015f6:	e004      	b.n	8001602 <StartupTask+0x62>
			case BOTON4:
				SuspendAllTasksExceptOne(SENO);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f000 fa24 	bl	8001a46 <SuspendAllTasksExceptOne>
				break;
 80015fe:	e000      	b.n	8001602 <StartupTask+0x62>
			default:
				break;
 8001600:	bf00      	nop
		}
		OSTimeDly(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f007 fdbc 	bl	8009180 <OSTimeDly>
		switch (GetButton()) {
 8001608:	e7da      	b.n	80015c0 <StartupTask+0x20>
 800160a:	bf00      	nop

0800160c <SerialTask>:
	}
}

static void SerialTask(void *p_arg)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	@ 0x40
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    //const char *msg = "Hello from USART3!\r\n";
    char msg[50];

    while (DEF_TRUE)
    {
    	if(frecuencia != frecuencia_anterior){
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <SerialTask+0x5c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <SerialTask+0x60>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d01c      	beq.n	800165a <SerialTask+0x4e>
    		sprintf(msg, "Frecuencia: %d\r\n", valorFrecuenciaHz[frecuencia]);
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <SerialTask+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <SerialTask+0x64>)
 8001626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4911      	ldr	r1, [pc, #68]	@ (8001674 <SerialTask+0x68>)
 8001630:	4618      	mov	r0, r3
 8001632:	f00a f893 	bl	800b75c <siprintf>

    		HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fe48 	bl	80002d0 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	f107 010c 	add.w	r1, r7, #12
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <SerialTask+0x6c>)
 800164e:	f003 f88f 	bl	8004770 <HAL_UART_Transmit>
    		frecuencia_anterior = frecuencia;
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SerialTask+0x5c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SerialTask+0x60>)
 8001658:	6013      	str	r3, [r2, #0]
    	}

    	OSTimeDlyHMSM(0, 0, 1, 0);
 800165a:	2300      	movs	r3, #0
 800165c:	2201      	movs	r2, #1
 800165e:	2100      	movs	r1, #0
 8001660:	2000      	movs	r0, #0
 8001662:	f007 fddd 	bl	8009220 <OSTimeDlyHMSM>
    	if(frecuencia != frecuencia_anterior){
 8001666:	e7d5      	b.n	8001614 <SerialTask+0x8>
 8001668:	200017f8 	.word	0x200017f8
 800166c:	200017fc 	.word	0x200017fc
 8001670:	20000014 	.word	0x20000014
 8001674:	0800d120 	.word	0x0800d120
 8001678:	20000b90 	.word	0x20000b90
 800167c:	00000000 	.word	0x00000000

08001680 <SenoTsk>:
    }
}

static void SenoTsk (void *p_arg) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    CPU_INT32U cpu_clk;
    (void)p_arg;
    cpu_clk = HAL_RCC_GetHCLKFreq();
 8001688:	f002 ff1c 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800168c:	60b8      	str	r0, [r7, #8]

    OS_CPU_SysTickInitFreq(cpu_clk);
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f006 f8e0 	bl	8007854 <OS_CPU_SysTickInitFreq>

    #if (OS_TASK_STAT_EN > 0)
    OSStatInit();
 8001694:	f006 fa62 	bl	8007b5c <OSStatInit>
    #endif

    static uint8_t senoArreglo45[seno45];

    for (int i = 0; i < seno45; i++) {
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e034      	b.n	8001708 <SenoTsk+0x88>
        senoArreglo45[i] = (uint8_t)(127.5 * (1 + sin(2 * 3.14159265 * i / seno45)));
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7fe ff70 	bl	8000584 <__aeabi_i2d>
 80016a4:	a348      	add	r3, pc, #288	@ (adr r3, 80017c8 <SenoTsk+0x148>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffd5 	bl	8000658 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <SenoTsk+0x158>)
 80016bc:	f7ff f8f6 	bl	80008ac <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f00a fd18 	bl	800c0fc <sin>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b42      	ldr	r3, [pc, #264]	@ (80017dc <SenoTsk+0x15c>)
 80016d2:	f7fe fe0b 	bl	80002ec <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	a33c      	add	r3, pc, #240	@ (adr r3, 80017d0 <SenoTsk+0x150>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ffb8 	bl	8000658 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa74 	bl	8000bdc <__aeabi_d2uiz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b2d9      	uxtb	r1, r3
 80016f8:	4a39      	ldr	r2, [pc, #228]	@ (80017e0 <SenoTsk+0x160>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4413      	add	r3, r2
 80016fe:	460a      	mov	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < seno45; i++) {
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b2d      	cmp	r3, #45	@ 0x2d
 800170c:	ddc7      	ble.n	800169e <SenoTsk+0x1e>
    }
    UsbPrintf("Frecuencia: %d Hz\n", valorFrecuenciaHz[frecuencia]);
 800170e:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <SenoTsk+0x164>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a35      	ldr	r2, [pc, #212]	@ (80017e8 <SenoTsk+0x168>)
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	4619      	mov	r1, r3
 800171a:	4834      	ldr	r0, [pc, #208]	@ (80017ec <SenoTsk+0x16c>)
 800171c:	f000 f90c 	bl	8001938 <UsbPrintf>

    while (DEF_TRUE) {
        ApagarBlink();
 8001720:	f000 f9b1 	bl	8001a86 <ApagarBlink>

        if (DIGet(BOTON4)) {
 8001724:	2003      	movs	r0, #3
 8001726:	f7ff fa79 	bl	8000c1c <DIGet>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <SenoTsk+0xca>
            if (frecuencia < 4) {
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <SenoTsk+0x164>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b03      	cmp	r3, #3
 8001736:	dc05      	bgt.n	8001744 <SenoTsk+0xc4>
                frecuencia++;
 8001738:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <SenoTsk+0x164>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <SenoTsk+0x164>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e002      	b.n	800174a <SenoTsk+0xca>
            }else{
            	frecuencia = 0;
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <SenoTsk+0x164>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
            }
        }

        for (int i = 0; i < seno45; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e034      	b.n	80017ba <SenoTsk+0x13a>
            for (int j = 0; j < 8; j++) {
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e023      	b.n	800179e <SenoTsk+0x11e>
                salida[j] = (senoArreglo45[i] >> j) % 2;
 8001756:	4a22      	ldr	r2, [pc, #136]	@ (80017e0 <SenoTsk+0x160>)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	fa42 f303 	asr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	bfb8      	it	lt
 800176e:	425b      	neglt	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	491f      	ldr	r1, [pc, #124]	@ (80017f0 <SenoTsk+0x170>)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                DOSet(j, salida[j]);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	b29a      	uxth	r2, r3
 800177e:	491c      	ldr	r1, [pc, #112]	@ (80017f0 <SenoTsk+0x170>)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff fbc2 	bl	8000f1c <DOSet>
            for (int j = 0; j < 8; j++) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b07      	cmp	r3, #7
 80017a2:	ddd8      	ble.n	8001756 <SenoTsk+0xd6>
            }
            OSTimeDly(valorFrecuencia[frecuencia]);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <SenoTsk+0x164>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <SenoTsk+0x174>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 fce6 	bl	8009180 <OSTimeDly>
        for (int i = 0; i < seno45; i++) {
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3301      	adds	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017be:	ddc7      	ble.n	8001750 <SenoTsk+0xd0>
        ApagarBlink();
 80017c0:	e7ae      	b.n	8001720 <SenoTsk+0xa0>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	53c8d4f1 	.word	0x53c8d4f1
 80017cc:	401921fb 	.word	0x401921fb
 80017d0:	00000000 	.word	0x00000000
 80017d4:	405fe000 	.word	0x405fe000
 80017d8:	40470000 	.word	0x40470000
 80017dc:	3ff00000 	.word	0x3ff00000
 80017e0:	20001800 	.word	0x20001800
 80017e4:	200017f8 	.word	0x200017f8
 80017e8:	20000014 	.word	0x20000014
 80017ec:	0800d134 	.word	0x0800d134
 80017f0:	200017d8 	.word	0x200017d8
 80017f4:	20000000 	.word	0x20000000

080017f8 <PrimerSecuencia>:
        }
    }
}


static void PrimerSecuencia (void *p_arg){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8001800:	f002 fe60 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8001804:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f006 f824 	bl	8007854 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 800180c:	f006 f9a6 	bl	8007b5c <OSStatInit>
	#endif

	PinReset();
 8001810:	f000 f8ec 	bl	80019ec <PinReset>

	while (DEF_TRUE){
	    DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8001814:	2200      	movs	r2, #0
 8001816:	2104      	movs	r1, #4
 8001818:	2008      	movs	r0, #8
 800181a:	f7ff fb39 	bl	8000e90 <DOCfgMode>
	    DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 800181e:	23c7      	movs	r3, #199	@ 0xc7
 8001820:	2263      	movs	r2, #99	@ 0x63
 8001822:	2100      	movs	r1, #0
 8001824:	2008      	movs	r0, #8
 8001826:	f7ff fb05 	bl	8000e34 <DOCfgBlink>

	    DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 800182a:	2200      	movs	r2, #0
 800182c:	2104      	movs	r1, #4
 800182e:	2009      	movs	r0, #9
 8001830:	f7ff fb2e 	bl	8000e90 <DOCfgMode>
	    DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8001834:	f240 138f 	movw	r3, #399	@ 0x18f
 8001838:	22c7      	movs	r2, #199	@ 0xc7
 800183a:	2100      	movs	r1, #0
 800183c:	2009      	movs	r0, #9
 800183e:	f7ff faf9 	bl	8000e34 <DOCfgBlink>

	    DOCfgMode(LED3, DO_MODE_LOW, false);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200a      	movs	r0, #10
 8001848:	f7ff fb22 	bl	8000e90 <DOCfgMode>

	    OSTimeDly(800);
 800184c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001850:	f007 fc96 	bl	8009180 <OSTimeDly>
	    DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8001854:	bf00      	nop
 8001856:	e7dd      	b.n	8001814 <PrimerSecuencia+0x1c>

08001858 <SegundaSecuencia>:
	}
}


static void SegundaSecuencia (void *p_arg){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8001860:	f002 fe30 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8001864:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f005 fff4 	bl	8007854 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 800186c:	f006 f976 	bl	8007b5c <OSStatInit>
	#endif

	PinReset();
 8001870:	f000 f8bc 	bl	80019ec <PinReset>

	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8001874:	2200      	movs	r2, #0
 8001876:	2104      	movs	r1, #4
 8001878:	2008      	movs	r0, #8
 800187a:	f7ff fb09 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 299);
 800187e:	f240 132b 	movw	r3, #299	@ 0x12b
 8001882:	2263      	movs	r2, #99	@ 0x63
 8001884:	2100      	movs	r1, #0
 8001886:	2008      	movs	r0, #8
 8001888:	f7ff fad4 	bl	8000e34 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 800188c:	2200      	movs	r2, #0
 800188e:	2104      	movs	r1, #4
 8001890:	2009      	movs	r0, #9
 8001892:	f7ff fafd 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8001896:	f240 138f 	movw	r3, #399	@ 0x18f
 800189a:	22c7      	movs	r2, #199	@ 0xc7
 800189c:	2100      	movs	r1, #0
 800189e:	2009      	movs	r0, #9
 80018a0:	f7ff fac8 	bl	8000e34 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	200a      	movs	r0, #10
 80018aa:	f7ff faf1 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 299, 399);
 80018ae:	f240 138f 	movw	r3, #399	@ 0x18f
 80018b2:	f240 122b 	movw	r2, #299	@ 0x12b
 80018b6:	2100      	movs	r1, #0
 80018b8:	200a      	movs	r0, #10
 80018ba:	f7ff fabb 	bl	8000e34 <DOCfgBlink>

		OSTimeDly(1200);
 80018be:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80018c2:	f007 fc5d 	bl	8009180 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 80018c6:	bf00      	nop
 80018c8:	e7d4      	b.n	8001874 <SegundaSecuencia+0x1c>

080018ca <TercerSecuencia>:
	}
}


static void TercerSecuencia (void *p_arg){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 80018d2:	f002 fdf7 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80018d6:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f005 ffbb 	bl	8007854 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 80018de:	f006 f93d 	bl	8007b5c <OSStatInit>
	#endif

	PinReset();
 80018e2:	f000 f883 	bl	80019ec <PinReset>

	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2104      	movs	r1, #4
 80018ea:	2008      	movs	r0, #8
 80018ec:	f7ff fad0 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 80018f0:	23c7      	movs	r3, #199	@ 0xc7
 80018f2:	2263      	movs	r2, #99	@ 0x63
 80018f4:	2100      	movs	r1, #0
 80018f6:	2008      	movs	r0, #8
 80018f8:	f7ff fa9c 	bl	8000e34 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2104      	movs	r1, #4
 8001900:	2009      	movs	r0, #9
 8001902:	f7ff fac5 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 149, 299);
 8001906:	f240 132b 	movw	r3, #299	@ 0x12b
 800190a:	2295      	movs	r2, #149	@ 0x95
 800190c:	2100      	movs	r1, #0
 800190e:	2009      	movs	r0, #9
 8001910:	f7ff fa90 	bl	8000e34 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	200a      	movs	r0, #10
 800191a:	f7ff fab9 	bl	8000e90 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 199, 349);
 800191e:	f240 135d 	movw	r3, #349	@ 0x15d
 8001922:	22c7      	movs	r2, #199	@ 0xc7
 8001924:	2100      	movs	r1, #0
 8001926:	200a      	movs	r0, #10
 8001928:	f7ff fa84 	bl	8000e34 <DOCfgBlink>

		OSTimeDly(3000);
 800192c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001930:	f007 fc26 	bl	8009180 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8001934:	bf00      	nop
 8001936:	e7d6      	b.n	80018e6 <TercerSecuencia+0x1c>

08001938 <UsbPrintf>:
* Caller(s)   :
* Note(s)     : none.
**************************************************************************************************************************
*/
void UsbPrintf (CPU_CHAR  *p_fmt, ...)
{
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b098      	sub	sp, #96	@ 0x60
 800193e:	af00      	add	r7, sp, #0
    CPU_CHAR    str[80u + 1u];
    CPU_SIZE_T  len;
    va_list     vArgs;

    va_start(vArgs, p_fmt);
 8001940:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001944:	607b      	str	r3, [r7, #4]

    vsprintf((char       *)str,
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800194e:	4618      	mov	r0, r3
 8001950:	f009 ff3a 	bl	800b7c8 <vsiprintf>
             (char const *)p_fmt,
                           vArgs);

    va_end(vArgs);

    len = strlen(str);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fcb9 	bl	80002d0 <strlen>
 800195e:	65f8      	str	r0, [r7, #92]	@ 0x5c

    CDC_Transmit_FS((uint8_t *)str, len);
 8001960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001962:	b29a      	uxth	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f009 fb18 	bl	800afa0 <CDC_Transmit_FS>
}
 8001970:	bf00      	nop
 8001972:	3760      	adds	r7, #96	@ 0x60
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800197a:	b004      	add	sp, #16
 800197c:	4770      	bx	lr

0800197e <GetButton>:

int GetButton(){
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
	int boton;

	if(DIGet(BOTON1)){
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff f949 	bl	8000c1c <DIGet>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <GetButton+0x18>
		boton = BOTON1;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e025      	b.n	80019e2 <GetButton+0x64>
	}else if(DIGet(BOTON2)){
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff f940 	bl	8000c1c <DIGet>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <GetButton+0x2a>
		boton = BOTON2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e01c      	b.n	80019e2 <GetButton+0x64>
	}else if(DIGet(BOTON3)){
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff f937 	bl	8000c1c <DIGet>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <GetButton+0x3c>
		boton = BOTON3;
 80019b4:	2302      	movs	r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	e013      	b.n	80019e2 <GetButton+0x64>
	}else if(DIGet(BOTON4)){
 80019ba:	2003      	movs	r0, #3
 80019bc:	f7ff f92e 	bl	8000c1c <DIGet>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <GetButton+0x4e>
		boton = BOTON4;
 80019c6:	2303      	movs	r3, #3
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	e00a      	b.n	80019e2 <GetButton+0x64>
	}else if(DIGet(BOTON5)){
 80019cc:	2004      	movs	r0, #4
 80019ce:	f7ff f925 	bl	8000c1c <DIGet>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <GetButton+0x60>
		boton = BOTON5;
 80019d8:	2304      	movs	r3, #4
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	e001      	b.n	80019e2 <GetButton+0x64>
	}else
		boton = DEFAULT;
 80019de:	2305      	movs	r3, #5
 80019e0:	607b      	str	r3, [r7, #4]

	return boton;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <PinReset>:

void PinReset(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	for (int pin = 0; pin < 8; pin++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	e008      	b.n	8001a0a <PinReset+0x1e>
		DOSet(pin, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa8c 	bl	8000f1c <DOSet>
	for (int pin = 0; pin < 8; pin++) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	ddf3      	ble.n	80019f8 <PinReset+0xc>
	}
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <SuspendAllTasks>:

void SuspendAllTasks(){
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
	for (int task = 2; task < 6; task++) {
 8001a20:	2302      	movs	r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e007      	b.n	8001a36 <SuspendAllTasks+0x1c>
		OSTaskSuspend(task);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fafa 	bl	8009024 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	ddf4      	ble.n	8001a26 <SuspendAllTasks+0xc>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <SuspendAllTasksExceptOne>:

void SuspendAllTasksExceptOne(int TaskID){
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]

	OSTaskResume(TaskID);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 fa0a 	bl	8008e6c <OSTaskResume>

	for (int task = 2; task < 6; task++) {
 8001a58:	2302      	movs	r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e00b      	b.n	8001a76 <SuspendAllTasksExceptOne+0x30>
		if(task != TaskID){
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d004      	beq.n	8001a70 <SuspendAllTasksExceptOne+0x2a>
			OSTaskSuspend(task);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fada 	bl	8009024 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	ddf0      	ble.n	8001a5e <SuspendAllTasksExceptOne+0x18>
		}
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ApagarBlink>:

void ApagarBlink(){
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
	DOCfgMode(LED1, DO_MODE_LOW, false);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2008      	movs	r0, #8
 8001a90:	f7ff f9fe 	bl	8000e90 <DOCfgMode>
	DOCfgMode(LED2, DO_MODE_LOW, false);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2009      	movs	r0, #9
 8001a9a:	f7ff f9f9 	bl	8000e90 <DOCfgMode>
	DOCfgMode(LED3, DO_MODE_LOW, false);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f7ff f9f4 	bl	8000e90 <DOCfgMode>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_MspInit+0x60>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_MspInit+0x60>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_UART_MspInit+0x8c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d131      	bne.n	8001ba0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b46:	61d3      	str	r3, [r2, #28]
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_UART_MspInit+0x90>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <HAL_UART_MspInit+0x94>)
 8001b82:	f000 f9bf 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_UART_MspInit+0x94>)
 8001b9c:	f000 f9b2 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010c00 	.word	0x40010c00

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bfe:	f000 fc59 	bl	80024b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20003ca4 	.word	0x20003ca4

08001c0c <_sbrk>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <_sbrk+0x50>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x16>
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <_sbrk+0x50>)
 8001c1e:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <_sbrk+0x54>)
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <_sbrk+0x50>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <_sbrk+0x50>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	466a      	mov	r2, sp
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d907      	bls.n	8001c46 <_sbrk+0x3a>
 8001c36:	f009 fdd9 	bl	800b7ec <__errno>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	e006      	b.n	8001c54 <_sbrk+0x48>
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <_sbrk+0x50>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a03      	ldr	r2, [pc, #12]	@ (8001c5c <_sbrk+0x50>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20001830 	.word	0x20001830
 8001c60:	20004300 	.word	0x20004300

08001c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <SystemInit+0x5c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <SystemInit+0x5c>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <SystemInit+0x5c>)
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4911      	ldr	r1, [pc, #68]	@ (8001cc0 <SystemInit+0x5c>)
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <SystemInit+0x60>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <SystemInit+0x5c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <SystemInit+0x5c>)
 8001c86:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <SystemInit+0x5c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SystemInit+0x5c>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <SystemInit+0x5c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <SystemInit+0x5c>)
 8001ca2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001ca6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SystemInit+0x5c>)
 8001caa:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8001cae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SystemInit+0x64>)
 8001cb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cb6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	f8ff0000 	.word	0xf8ff0000
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:
 8001ccc:	2100      	movs	r1, #0
 8001cce:	e003      	b.n	8001cd8 <LoopCopyDataInit>

08001cd0 <CopyDataInit>:
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <LoopFillZerobss+0x14>)
 8001cd2:	585b      	ldr	r3, [r3, r1]
 8001cd4:	5043      	str	r3, [r0, r1]
 8001cd6:	3104      	adds	r1, #4

08001cd8 <LoopCopyDataInit>:
 8001cd8:	480a      	ldr	r0, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x18>)
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <LoopFillZerobss+0x1c>)
 8001cdc:	1842      	adds	r2, r0, r1
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3f6      	bcc.n	8001cd0 <CopyDataInit>
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <LoopFillZerobss+0x20>)
 8001ce4:	e002      	b.n	8001cec <LoopFillZerobss>

08001ce6 <FillZerobss>:
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f842 3b04 	str.w	r3, [r2], #4

08001cec <LoopFillZerobss>:
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <LoopFillZerobss+0x24>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3f9      	bcc.n	8001ce6 <FillZerobss>
 8001cf2:	f7ff ffb7 	bl	8001c64 <SystemInit>
 8001cf6:	f009 fd7f 	bl	800b7f8 <__libc_init_array>
 8001cfa:	f7ff fa5f 	bl	80011bc <main>
 8001cfe:	4770      	bx	lr
 8001d00:	0800d5b8 	.word	0x0800d5b8
 8001d04:	20000000 	.word	0x20000000
 8001d08:	200001f0 	.word	0x200001f0
 8001d0c:	200001f0 	.word	0x200001f0
 8001d10:	200042fc 	.word	0x200042fc

08001d14 <ADC1_2_IRQHandler>:
 8001d14:	e7fe      	b.n	8001d14 <ADC1_2_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_Init+0x28>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_Init+0x28>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f8b5 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fc20 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fec0 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4906      	ldr	r1, [pc, #24]	@ (8001ddc <__NVIC_EnableIRQ+0x34>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff4f 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff64 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ffb2 	bl	8001e34 <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff81 	bl	8001de0 <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff57 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	@ 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e169      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8158 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a9a      	ldr	r2, [pc, #616]	@ (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a98      	ldr	r2, [pc, #608]	@ (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a98      	ldr	r2, [pc, #608]	@ (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a96      	ldr	r2, [pc, #600]	@ (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a96      	ldr	r2, [pc, #600]	@ (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a94      	ldr	r2, [pc, #592]	@ (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a92      	ldr	r2, [pc, #584]	@ (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a92      	ldr	r2, [pc, #584]	@ (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a90      	ldr	r2, [pc, #576]	@ (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a79      	ldr	r2, [pc, #484]	@ (80021b8 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	@ 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	@ 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <HAL_GPIO_Init+0x2b8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4c      	ldr	r2, [pc, #304]	@ (80021bc <HAL_GPIO_Init+0x2b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a48      	ldr	r2, [pc, #288]	@ (80021c0 <HAL_GPIO_Init+0x2bc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	@ (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3f      	ldr	r2, [pc, #252]	@ (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	@ (80021cc <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	@ (80021d0 <HAL_GPIO_Init+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	492f      	ldr	r1, [pc, #188]	@ (80021c0 <HAL_GPIO_Init+0x2bc>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	492c      	ldr	r1, [pc, #176]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212a:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4928      	ldr	r1, [pc, #160]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4922      	ldr	r1, [pc, #136]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491e      	ldr	r1, [pc, #120]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4918      	ldr	r1, [pc, #96]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4914      	ldr	r1, [pc, #80]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	490e      	ldr	r1, [pc, #56]	@ (80021d4 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e021      	b.n	80021e6 <HAL_GPIO_Init+0x2e2>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_GPIO_Init+0x304>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	@ (8002208 <HAL_GPIO_Init+0x304>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae8e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	@ 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002256:	e003      	b.n	8002260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	041a      	lsls	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800226a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226c:	b08b      	sub	sp, #44	@ 0x2c
 800226e:	af06      	add	r7, sp, #24
 8002270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0f1      	b.n	8002460 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f008 ffb9 	bl	800b208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fc0a 	bl	8004abc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	687e      	ldr	r6, [r7, #4]
 80022b0:	466d      	mov	r5, sp
 80022b2:	f106 0410 	add.w	r4, r6, #16
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	602b      	str	r3, [r5, #0]
 80022be:	1d33      	adds	r3, r6, #4
 80022c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f002 fbd4 	bl	8004a70 <USB_CoreInit>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0c2      	b.n	8002460 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fc05 	bl	8004af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e040      	b.n	800236e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3301      	adds	r3, #1
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	3303      	adds	r3, #3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	3338      	adds	r3, #56	@ 0x38
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	333c      	adds	r3, #60	@ 0x3c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3340      	adds	r3, #64	@ 0x40
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3b9      	bcc.n	80022ec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e044      	b.n	8002408 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	3301      	adds	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d3b5      	bcc.n	800237e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	687e      	ldr	r6, [r7, #4]
 800241a:	466d      	mov	r5, sp
 800241c:	f106 0410 	add.w	r4, r6, #16
 8002420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f002 fb6b 	bl	8004b08 <USB_DevInit>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e00d      	b.n	8002460 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fdec 	bl	8007036 <USB_DevDisconnect>

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002468 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_Start+0x16>
 800247a:	2302      	movs	r3, #2
 800247c:	e016      	b.n	80024ac <HAL_PCD_Start+0x44>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fb00 	bl	8004a90 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002490:	2101      	movs	r1, #1
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f009 f92b 	bl	800b6ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fdc0 	bl	8007022 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fdc2 	bl	800704a <USB_ReadInterrupts>
 80024c6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fb1b 	bl	8002b0e <PCD_EP_ISR_Handler>

    return;
 80024d8:	e119      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f6:	b292      	uxth	r2, r2
 80024f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f008 fefe 	bl	800b2fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002502:	2100      	movs	r1, #0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f905 	bl	8002714 <HAL_PCD_SetAddress>

    return;
 800250a:	e100      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800252e:	e0ee      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800254c:	b292      	uxth	r2, r2
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002552:	e0dc      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d027      	beq.n	80025ae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002566:	b29a      	uxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0204 	bic.w	r2, r2, #4
 8002570:	b292      	uxth	r2, r2
 8002572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	b292      	uxth	r2, r2
 800258a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f008 feee 	bl	800b370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025ac:	e0af      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8083 	beq.w	80026c0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	77fb      	strb	r3, [r7, #31]
 80025be:	e010      	b.n	80025e2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
 80025ce:	8812      	ldrh	r2, [r2, #0]
 80025d0:	b292      	uxth	r2, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	3320      	adds	r3, #32
 80025d6:	443b      	add	r3, r7
 80025d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	3301      	adds	r3, #1
 80025e0:	77fb      	strb	r3, [r7, #31]
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b07      	cmp	r3, #7
 80025e6:	d9eb      	bls.n	80025c0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002618:	bf00      	nop
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002622:	b29b      	uxth	r3, r3
 8002624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f6      	beq.n	800261a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	e00f      	b.n	800266a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	4611      	mov	r1, r2
 8002652:	7ffa      	ldrb	r2, [r7, #31]
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	440a      	add	r2, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3320      	adds	r3, #32
 800265c:	443b      	add	r3, r7
 800265e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002662:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	3301      	adds	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	2b07      	cmp	r3, #7
 800266e:	d9ec      	bls.n	800264a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002678:	b29a      	uxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	b292      	uxth	r2, r2
 8002684:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0204 	orr.w	r2, r2, #4
 80026b2:	b292      	uxth	r2, r2
 80026b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f008 fe3f 	bl	800b33c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026be:	e026      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00f      	beq.n	80026ea <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f008 fdfd 	bl	800b2e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026e8:	e011      	b.n	800270e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002706:	b292      	uxth	r2, r2
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800270c:	bf00      	nop
  }
}
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_SetAddress+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e013      	b.n	8002756 <HAL_PCD_SetAddress+0x42>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fc58 	bl	8006ffc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4603      	mov	r3, r0
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	460b      	mov	r3, r1
 8002772:	803b      	strh	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0e      	bge.n	80027a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	705a      	strb	r2, [r3, #1]
 80027a0:	e00e      	b.n	80027c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 0207 	and.w	r2, r3, #7
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027cc:	883a      	ldrh	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	78ba      	ldrb	r2, [r7, #2]
 80027d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027d8:	78bb      	ldrb	r3, [r7, #2]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d102      	bne.n	80027e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_PCD_EP_Open+0x94>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e00e      	b.n	8002810 <HAL_PCD_EP_Open+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	4618      	mov	r0, r3
 8002802:	f002 f9a1 	bl	8004b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800280e:	7afb      	ldrb	r3, [r7, #11]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da0e      	bge.n	800284a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	705a      	strb	r2, [r3, #1]
 8002848:	e00e      	b.n	8002868 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 0207 	and.w	r2, r3, #7
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_PCD_EP_Close+0x6a>
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <HAL_PCD_EP_Close+0x88>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f002 fd19 	bl	80052c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f003 0207 	and.w	r2, r3, #7
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e8:	7afb      	ldrb	r3, [r7, #11]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6979      	ldr	r1, [r7, #20]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fed0 	bl	80056a0 <USB_EPStartXfer>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 0207 	and.w	r2, r3, #7
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800292c:	681b      	ldr	r3, [r3, #0]
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	460b      	mov	r3, r1
 8002946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2201      	movs	r2, #1
 8002982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	b2da      	uxtb	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fe82 	bl	80056a0 <USB_EPStartXfer>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0207 	and.w	r2, r3, #7
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d901      	bls.n	80029c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e04c      	b.n	8002a5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da0e      	bge.n	80029ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
 80029e8:	e00c      	b.n	8002a04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_PCD_EP_SetStall+0x7e>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e01c      	b.n	8002a5e <HAL_PCD_EP_SetStall+0xb8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 f9e5 	bl	8006e02 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f004 fb0a 	bl	8007068 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 020f 	and.w	r2, r3, #15
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d901      	bls.n	8002a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e040      	b.n	8002b06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da0e      	bge.n	8002aaa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 0207 	and.w	r2, r3, #7
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_EP_ClrStall+0x82>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e00e      	b.n	8002b06 <HAL_PCD_EP_ClrStall+0xa0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 f9d3 	bl	8006ea2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b096      	sub	sp, #88	@ 0x58
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b16:	e3be      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002b32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8178 	bne.w	8002e2c <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d151      	bne.n	8002bec <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b58:	81fb      	strh	r3, [r7, #14]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3328      	adds	r3, #40	@ 0x28
 8002b70:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	3302      	adds	r3, #2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bac:	2100      	movs	r1, #0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f008 fb7d 	bl	800b2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 836a 	beq.w	8003296 <PCD_EP_ISR_Handler+0x788>
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8365 	bne.w	8003296 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bea:	e354      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bf2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d034      	beq.n	8002c74 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3306      	adds	r3, #6
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f004 fa5d 	bl	8007108 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	823b      	strh	r3, [r7, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	8a3a      	ldrh	r2, [r7, #16]
 8002c64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f008 faf1 	bl	800b254 <HAL_PCD_SetupStageCallback>
 8002c72:	e310      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f280 830c 	bge.w	8003296 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	83fb      	strh	r3, [r7, #30]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	8bfa      	ldrh	r2, [r7, #30]
 8002c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3306      	adds	r3, #6
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d019      	beq.n	8002d04 <PCD_EP_ISR_Handler+0x1f6>
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	6959      	ldr	r1, [r3, #20]
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f004 fa0d 	bl	8007108 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f008 faba 	bl	800b278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 82bd 	bne.w	8003296 <PCD_EP_ISR_Handler+0x788>
 8002d1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d20:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d28:	f000 82b5 	beq.w	8003296 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d62:	d91d      	bls.n	8002da0 <PCD_EP_ISR_Handler+0x292>
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <PCD_EP_ISR_Handler+0x270>
 8002d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	029b      	lsls	r3, r3, #10
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	e026      	b.n	8002dee <PCD_EP_ISR_Handler+0x2e0>
 8002da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <PCD_EP_ISR_Handler+0x2b0>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e017      	b.n	8002dee <PCD_EP_ISR_Handler+0x2e0>
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <PCD_EP_ISR_Handler+0x2ca>
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfe:	827b      	strh	r3, [r7, #18]
 8002e00:	8a7b      	ldrh	r3, [r7, #18]
 8002e02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002e06:	827b      	strh	r3, [r7, #18]
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e0e:	827b      	strh	r3, [r7, #18]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	8a7b      	ldrh	r3, [r7, #18]
 8002e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	8013      	strh	r3, [r2, #0]
 8002e2a:	e234      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f280 80fc 	bge.w	8003042 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e60:	4013      	ands	r3, r2
 8002e62:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e80:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	7b1b      	ldrb	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d125      	bne.n	8002eea <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3306      	adds	r3, #6
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8092 	beq.w	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	6959      	ldr	r1, [r3, #20]
 8002edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ede:	88da      	ldrh	r2, [r3, #6]
 8002ee0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ee4:	f004 f910 	bl	8007108 <USB_ReadPMA>
 8002ee8:	e086      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eec:	78db      	ldrb	r3, [r3, #3]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d10a      	bne.n	8002f08 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ef2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9d9 	bl	80032b2 <HAL_PCD_EP_DB_Receive>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002f06:	e077      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f22:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02e      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa0:	6959      	ldr	r1, [r3, #20]
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa4:	891a      	ldrh	r2, [r3, #8]
 8002fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002faa:	f004 f8ad 	bl	8007108 <USB_ReadPMA>
 8002fae:	e023      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3306      	adds	r3, #6
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	895a      	ldrh	r2, [r3, #10]
 8002ff0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ff4:	f004 f888 	bl	8007108 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003000:	441a      	add	r2, r3
 8003002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003004:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800300e:	441a      	add	r2, r3
 8003010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003012:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <PCD_EP_ISR_Handler+0x51a>
 800301c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d206      	bcs.n	8003036 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f008 f922 	bl	800b278 <HAL_PCD_DataOutStageCallback>
 8003034:	e005      	b.n	8003042 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fb2f 	bl	80056a0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8123 	beq.w	8003296 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003050:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800307a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	78db      	ldrb	r3, [r3, #3]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 80a2 	bne.w	80031ee <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80030aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8093 	beq.w	80031e0 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d046      	beq.n	8003154 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d126      	bne.n	800311c <PCD_EP_ISR_Handler+0x60e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	4413      	add	r3, r2
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003100:	b29a      	uxth	r2, r3
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003114:	b29a      	uxth	r2, r3
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e061      	b.n	80031e0 <PCD_EP_ISR_Handler+0x6d2>
 800311c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d15d      	bne.n	80031e0 <PCD_EP_ISR_Handler+0x6d2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	4413      	add	r3, r2
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	011a      	lsls	r2, r3, #4
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	4413      	add	r3, r2
 8003146:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2200      	movs	r2, #0
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	e045      	b.n	80031e0 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d126      	bne.n	80031b0 <PCD_EP_ISR_Handler+0x6a2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	4413      	add	r3, r2
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	011a      	lsls	r2, r3, #4
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	4413      	add	r3, r2
 8003184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003194:	b29a      	uxth	r2, r3
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	e017      	b.n	80031e0 <PCD_EP_ISR_Handler+0x6d2>
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d113      	bne.n	80031e0 <PCD_EP_ISR_Handler+0x6d2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c6:	4413      	add	r3, r2
 80031c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	011a      	lsls	r2, r3, #4
 80031d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d2:	4413      	add	r3, r2
 80031d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2200      	movs	r2, #0
 80031de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f008 f861 	bl	800b2ae <HAL_PCD_DataInStageCallback>
 80031ec:	e053      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d146      	bne.n	8003288 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	3302      	adds	r3, #2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003222:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800322e:	429a      	cmp	r2, r3
 8003230:	d907      	bls.n	8003242 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323e:	619a      	str	r2, [r3, #24]
 8003240:	e002      	b.n	8003248 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f008 f829 	bl	800b2ae <HAL_PCD_DataInStageCallback>
 800325c:	e01b      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003266:	441a      	add	r2, r3
 8003268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800326c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003274:	441a      	add	r2, r3
 8003276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003278:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fa0d 	bl	80056a0 <USB_EPStartXfer>
 8003286:	e006      	b.n	8003296 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800328c:	461a      	mov	r2, r3
 800328e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f91b 	bl	80034cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f6ff ac38 	blt.w	8002b18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3758      	adds	r7, #88	@ 0x58
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b088      	sub	sp, #32
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d07e      	beq.n	80033c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	3302      	adds	r3, #2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	8b7b      	ldrh	r3, [r7, #26]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d306      	bcc.n	800330c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	8b7b      	ldrh	r3, [r7, #26]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	619a      	str	r2, [r3, #24]
 800330a:	e002      	b.n	8003312 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d123      	bne.n	8003362 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003334:	833b      	strh	r3, [r7, #24]
 8003336:	8b3b      	ldrh	r3, [r7, #24]
 8003338:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800333c:	833b      	strh	r3, [r7, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8b3b      	ldrh	r3, [r7, #24]
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01f      	beq.n	80033ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	82fb      	strh	r3, [r7, #22]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800339c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ac:	8b7b      	ldrh	r3, [r7, #26]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8087 	beq.w	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	8b7b      	ldrh	r3, [r7, #26]
 80033c2:	f003 fea1 	bl	8007108 <USB_ReadPMA>
 80033c6:	e07c      	b.n	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	3306      	adds	r3, #6
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	8b7b      	ldrh	r3, [r7, #26]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d306      	bcc.n	800340a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	8b7b      	ldrh	r3, [r7, #26]
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	619a      	str	r2, [r3, #24]
 8003408:	e002      	b.n	8003410 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d123      	bne.n	8003460 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	83fb      	strh	r3, [r7, #30]
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800343a:	83fb      	strh	r3, [r7, #30]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345c:	b29b      	uxth	r3, r3
 800345e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11f      	bne.n	80034aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003484:	83bb      	strh	r3, [r7, #28]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	8bbb      	ldrh	r3, [r7, #28]
 8003496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800349a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034aa:	8b7b      	ldrh	r3, [r7, #26]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6959      	ldr	r1, [r3, #20]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	895a      	ldrh	r2, [r3, #10]
 80034bc:	8b7b      	ldrh	r3, [r7, #26]
 80034be:	f003 fe23 	bl	8007108 <USB_ReadPMA>
    }
  }

  return count;
 80034c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b0a4      	sub	sp, #144	@ 0x90
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 81dd 	beq.w	80038a0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	3302      	adds	r3, #2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800351a:	429a      	cmp	r2, r3
 800351c:	d907      	bls.n	800352e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003526:	1ad2      	subs	r2, r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	619a      	str	r2, [r3, #24]
 800352c:	e002      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 80b9 	bne.w	80036b0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d126      	bne.n	8003594 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	4413      	add	r3, r2
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	011a      	lsls	r2, r3, #4
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	4413      	add	r3, r2
 8003568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003578:	b29a      	uxth	r2, r3
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	801a      	strh	r2, [r3, #0]
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358c:	b29a      	uxth	r2, r3
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e01a      	b.n	80035ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d116      	bne.n	80035ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	4413      	add	r3, r2
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035bc:	4413      	add	r3, r2
 80035be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d126      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x15a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360a:	b29a      	uxth	r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361e:	b29a      	uxth	r2, r3
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e017      	b.n	8003656 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d113      	bne.n	8003656 <HAL_PCD_EP_DB_Transmit+0x18a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	4413      	add	r3, r2
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	011a      	lsls	r2, r3, #4
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	4413      	add	r3, r2
 800364a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	2200      	movs	r2, #0
 8003654:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f007 fe26 	bl	800b2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 82fc 	beq.w	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003688:	82fb      	strh	r3, [r7, #22]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	8afb      	ldrh	r3, [r7, #22]
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]
 80036ae:	e2da      	b.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d021      	beq.n	80036fe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80036ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 82ae 	bne.w	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003712:	441a      	add	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003720:	441a      	add	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	429a      	cmp	r2, r3
 8003730:	d30b      	bcc.n	800374a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	e017      	b.n	800377a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003762:	e00a      	b.n	800377a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d165      	bne.n	800384e <HAL_PCD_EP_DB_Transmit+0x382>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003790:	b29b      	uxth	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003796:	4413      	add	r3, r2
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	011a      	lsls	r2, r3, #4
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	4413      	add	r3, r2
 80037a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037be:	2b3e      	cmp	r3, #62	@ 0x3e
 80037c0:	d91d      	bls.n	80037fe <HAL_PCD_EP_DB_Transmit+0x332>
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_PCD_EP_DB_Transmit+0x310>
 80037d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d8:	3b01      	subs	r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e044      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_PCD_EP_DB_Transmit+0x350>
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003814:	b29a      	uxth	r2, r3
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	e035      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800381c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003832:	3301      	adds	r3, #1
 8003834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29a      	uxth	r2, r3
 800383c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800383e:	b29b      	uxth	r3, r3
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	b29b      	uxth	r3, r3
 8003844:	4313      	orrs	r3, r2
 8003846:	b29a      	uxth	r2, r3
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	e01c      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d118      	bne.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	647b      	str	r3, [r7, #68]	@ 0x44
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386a:	4413      	add	r3, r2
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	011a      	lsls	r2, r3, #4
 8003874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003876:	4413      	add	r3, r2
 8003878:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003882:	b29a      	uxth	r2, r3
 8003884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003886:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6959      	ldr	r1, [r3, #20]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	891a      	ldrh	r2, [r3, #8]
 8003894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003898:	b29b      	uxth	r3, r3
 800389a:	f003 fbf0 	bl	800707e <USB_WritePMA>
 800389e:	e1e2      	b.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	3306      	adds	r3, #6
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d307      	bcc.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	619a      	str	r2, [r3, #24]
 80038e6:	e002      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 80c0 	bne.w	8003a78 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d126      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x482>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003914:	4413      	add	r3, r2
 8003916:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003920:	4413      	add	r3, r2
 8003922:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003926:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003932:	b29a      	uxth	r2, r3
 8003934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29a      	uxth	r2, r3
 8003948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e01a      	b.n	8003984 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d116      	bne.n	8003984 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	667b      	str	r3, [r7, #100]	@ 0x64
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003964:	b29b      	uxth	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396a:	4413      	add	r3, r2
 800396c:	667b      	str	r3, [r7, #100]	@ 0x64
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	011a      	lsls	r2, r3, #4
 8003974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003976:	4413      	add	r3, r2
 8003978:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800397c:	663b      	str	r3, [r7, #96]	@ 0x60
 800397e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003980:	2200      	movs	r2, #0
 8003982:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	677b      	str	r3, [r7, #116]	@ 0x74
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d12b      	bne.n	80039ea <HAL_PCD_EP_DB_Transmit+0x51e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a6:	4413      	add	r3, r2
 80039a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	011a      	lsls	r2, r3, #4
 80039b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e017      	b.n	8003a1a <HAL_PCD_EP_DB_Transmit+0x54e>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d113      	bne.n	8003a1a <HAL_PCD_EP_DB_Transmit+0x54e>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a00:	4413      	add	r3, r2
 8003a02:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	011a      	lsls	r2, r3, #4
 8003a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a16:	2200      	movs	r2, #0
 8003a18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f007 fc44 	bl	800b2ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 811a 	bne.w	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8013      	strh	r3, [r2, #0]
 8003a76:	e0f6      	b.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 80ca 	bne.w	8003c66 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ada:	441a      	add	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ae8:	441a      	add	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d30b      	bcc.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	621a      	str	r2, [r3, #32]
 8003b10:	e017      	b.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003b1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b2a:	e00a      	b.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d165      	bne.n	8003c1c <HAL_PCD_EP_DB_Transmit+0x750>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b64:	4413      	add	r3, r2
 8003b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	011a      	lsls	r2, r3, #4
 8003b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b86:	801a      	strh	r2, [r3, #0]
 8003b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b8e:	d91d      	bls.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x700>
 8003b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <HAL_PCD_EP_DB_Transmit+0x6de>
 8003ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e041      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_PCD_EP_DB_Transmit+0x71e>
 8003bd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	e032      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x738>
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c00:	3301      	adds	r3, #1
 8003c02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	029b      	lsls	r3, r3, #10
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e019      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d115      	bne.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c32:	4413      	add	r3, r2
 8003c34:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	011a      	lsls	r2, r3, #4
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	4413      	add	r3, r2
 8003c40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6959      	ldr	r1, [r3, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	895a      	ldrh	r2, [r3, #10]
 8003c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f003 fa0c 	bl	800707e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c80:	82bb      	strh	r3, [r7, #20]
 8003c82:	8abb      	ldrh	r3, [r7, #20]
 8003c84:	f083 0310 	eor.w	r3, r3, #16
 8003c88:	82bb      	strh	r3, [r7, #20]
 8003c8a:	8abb      	ldrh	r3, [r7, #20]
 8003c8c:	f083 0320 	eor.w	r3, r3, #32
 8003c90:	82bb      	strh	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	8abb      	ldrh	r3, [r7, #20]
 8003ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3790      	adds	r7, #144	@ 0x90
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e009      	b.n	8003d0a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf6:	897a      	ldrh	r2, [r7, #10]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	80da      	strh	r2, [r3, #6]
 8003d1e:	e00b      	b.n	8003d38 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2201      	movs	r2, #1
 8003d24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e272      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8087 	beq.w	8003e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d64:	4b92      	ldr	r3, [pc, #584]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d00c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d70:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d112      	bne.n	8003da2 <HAL_RCC_OscConfig+0x5e>
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d10b      	bne.n	8003da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8a:	4b89      	ldr	r3, [pc, #548]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x12c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d168      	bne.n	8003e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e24c      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x76>
 8003dac:	4b80      	ldr	r3, [pc, #512]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e02e      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b78      	ldr	r3, [pc, #480]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a77      	ldr	r2, [pc, #476]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0xbc>
 8003de6:	4b72      	ldr	r3, [pc, #456]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a71      	ldr	r2, [pc, #452]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003e00:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b68      	ldr	r3, [pc, #416]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a67      	ldr	r2, [pc, #412]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fbb2 	bl	8001588 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd fbae 	bl	8001588 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e200      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe4>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd fb9e 	bl	8001588 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd fb9a 	bl	8001588 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	@ 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1ec      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x10c>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d063      	beq.n	8003f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e8a:	4b49      	ldr	r3, [pc, #292]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x18c>
 8003e96:	4b46      	ldr	r3, [pc, #280]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x176>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1c0      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4939      	ldr	r1, [pc, #228]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b36      	ldr	r3, [pc, #216]	@ (8003fb4 <HAL_RCC_OscConfig+0x270>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd fb53 	bl	8001588 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd fb4f 	bl	8001588 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1a1      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4927      	ldr	r1, [pc, #156]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd fb32 	bl	8001588 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd fb2e 	bl	8001588 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e180      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d03a      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fd fb12 	bl	8001588 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd fb0e 	bl	8001588 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e160      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f86:	2001      	movs	r0, #1
 8003f88:	f000 face 	bl	8004528 <RCC_Delay>
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_RCC_OscConfig+0x274>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7fd faf8 	bl	8001588 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9a:	e00f      	b.n	8003fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd faf4 	bl	8001588 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d908      	bls.n	8003fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e146      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	42420000 	.word	0x42420000
 8003fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fbc:	4b92      	ldr	r3, [pc, #584]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e9      	bne.n	8003f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a6 	beq.w	8004122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b8b      	ldr	r3, [pc, #556]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4a87      	ldr	r2, [pc, #540]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	61d3      	str	r3, [r2, #28]
 8003ff2:	4b85      	ldr	r3, [pc, #532]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b82      	ldr	r3, [pc, #520]	@ (800420c <HAL_RCC_OscConfig+0x4c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400e:	4b7f      	ldr	r3, [pc, #508]	@ (800420c <HAL_RCC_OscConfig+0x4c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7e      	ldr	r2, [pc, #504]	@ (800420c <HAL_RCC_OscConfig+0x4c8>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fd fab5 	bl	8001588 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fd fab1 	bl	8001588 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	@ 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e103      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b75      	ldr	r3, [pc, #468]	@ (800420c <HAL_RCC_OscConfig+0x4c8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x312>
 8004048:	4b6f      	ldr	r3, [pc, #444]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a6e      	ldr	r2, [pc, #440]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	e02d      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x334>
 800405e:	4b6a      	ldr	r3, [pc, #424]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4a69      	ldr	r2, [pc, #420]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6213      	str	r3, [r2, #32]
 800406a:	4b67      	ldr	r3, [pc, #412]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4a66      	ldr	r2, [pc, #408]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	6213      	str	r3, [r2, #32]
 8004076:	e01c      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10c      	bne.n	800409a <HAL_RCC_OscConfig+0x356>
 8004080:	4b61      	ldr	r3, [pc, #388]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a60      	ldr	r2, [pc, #384]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	4b5e      	ldr	r3, [pc, #376]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a5d      	ldr	r2, [pc, #372]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e00b      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 800409a:	4b5b      	ldr	r3, [pc, #364]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4a5a      	ldr	r2, [pc, #360]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6213      	str	r3, [r2, #32]
 80040a6:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a57      	ldr	r2, [pc, #348]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fd fa65 	bl	8001588 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd fa61 	bl	8001588 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0b1      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ee      	beq.n	80040c2 <HAL_RCC_OscConfig+0x37e>
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fd fa4f 	bl	8001588 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd fa4b 	bl	8001588 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e09b      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	4b40      	ldr	r3, [pc, #256]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a3b      	ldr	r2, [pc, #236]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8087 	beq.w	800423a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412c:	4b36      	ldr	r3, [pc, #216]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d061      	beq.n	80041fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d146      	bne.n	80041ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fd fa1f 	bl	8001588 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fa1b 	bl	8001588 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e06d      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004174:	d108      	bne.n	8004188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004176:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4921      	ldr	r1, [pc, #132]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004188:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a19      	ldr	r1, [r3, #32]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	430b      	orrs	r3, r1
 800419a:	491b      	ldr	r1, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fd f9ef 	bl	8001588 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd f9eb 	bl	8001588 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e03d      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x46a>
 80041cc:	e035      	b.n	800423a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCC_OscConfig+0x4cc>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd f9d8 	bl	8001588 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd f9d4 	bl	8001588 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e026      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x498>
 80041fa:	e01e      	b.n	800423a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e019      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
 8004210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <HAL_RCC_OscConfig+0x500>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	429a      	cmp	r2, r3
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0d0      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800425c:	4b6a      	ldr	r3, [pc, #424]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d910      	bls.n	800428c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b67      	ldr	r3, [pc, #412]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 0207 	bic.w	r2, r3, #7
 8004272:	4965      	ldr	r1, [pc, #404]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a58      	ldr	r2, [pc, #352]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a52      	ldr	r2, [pc, #328]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d040      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d115      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004306:	4b41      	ldr	r3, [pc, #260]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e073      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004316:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06b      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b39      	ldr	r3, [pc, #228]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4936      	ldr	r1, [pc, #216]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004338:	f7fd f926 	bl	8001588 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd f922 	bl	8001588 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e053      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d210      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 0207 	bic.w	r2, r3, #7
 800437e:	4922      	ldr	r1, [pc, #136]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043c2:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490a      	ldr	r1, [pc, #40]	@ (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	@ (8004414 <HAL_RCC_ClockConfig+0x1cc>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_ClockConfig+0x1d0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd f8bc 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
 8004410:	0800d200 	.word	0x0800d200
 8004414:	20000028 	.word	0x20000028
 8004418:	2000002c 	.word	0x2000002c

0800441c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004436:	4b1e      	ldr	r3, [pc, #120]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b04      	cmp	r3, #4
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x30>
 8004446:	2b08      	cmp	r3, #8
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x36>
 800444a:	e027      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	e027      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	0c9b      	lsrs	r3, r3, #18
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800445c:	5cd3      	ldrb	r3, [r2, r3]
 800445e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d010      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800446a:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0c5b      	lsrs	r3, r3, #17
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	4a11      	ldr	r2, [pc, #68]	@ (80044bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a0d      	ldr	r2, [pc, #52]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800447e:	fb03 f202 	mul.w	r2, r3, r2
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e004      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	613b      	str	r3, [r7, #16]
      break;
 800449a:	e002      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800449e:	613b      	str	r3, [r7, #16]
      break;
 80044a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a2:	693b      	ldr	r3, [r7, #16]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	007a1200 	.word	0x007a1200
 80044b8:	0800d218 	.word	0x0800d218
 80044bc:	0800d228 	.word	0x0800d228
 80044c0:	003d0900 	.word	0x003d0900

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b02      	ldr	r3, [pc, #8]	@ (80044d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	20000028 	.word	0x20000028

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff2 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	@ (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	0800d210 	.word	0x0800d210

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffde 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	0adb      	lsrs	r3, r3, #11
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	@ (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	0800d210 	.word	0x0800d210

08004528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <RCC_Delay+0x34>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <RCC_Delay+0x38>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0a5b      	lsrs	r3, r3, #9
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004544:	bf00      	nop
  }
  while (Delay --);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	60fa      	str	r2, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f9      	bne.n	8004544 <RCC_Delay+0x1c>
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	20000028 	.word	0x20000028
 8004560:	10624dd3 	.word	0x10624dd3

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07d      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004584:	4b4f      	ldr	r3, [pc, #316]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4a4b      	ldr	r2, [pc, #300]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459a:	61d3      	str	r3, [r2, #28]
 800459c:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b46      	ldr	r3, [pc, #280]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d118      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b8:	4b43      	ldr	r3, [pc, #268]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a42      	ldr	r2, [pc, #264]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c4:	f7fc ffe0 	bl	8001588 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc ffdc 	bl	8001588 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e06d      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b3a      	ldr	r3, [pc, #232]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ea:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02e      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d027      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004608:	4b2e      	ldr	r3, [pc, #184]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004610:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b2e      	ldr	r3, [pc, #184]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004618:	4b2c      	ldr	r3, [pc, #176]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800461e:	4a29      	ldr	r2, [pc, #164]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d014      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fc ffab 	bl	8001588 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fc ffa7 	bl	8001588 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e036      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4917      	ldr	r1, [pc, #92]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	4313      	orrs	r3, r2
 8004668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b14      	ldr	r3, [pc, #80]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4a13      	ldr	r2, [pc, #76]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004688:	4b0e      	ldr	r3, [pc, #56]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	490b      	ldr	r1, [pc, #44]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a6:	4b07      	ldr	r3, [pc, #28]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4904      	ldr	r1, [pc, #16]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42420440 	.word	0x42420440

080046d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e042      	b.n	8004768 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd fa10 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	@ 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f91d 	bl	8004954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	@ 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d16d      	bne.n	800486c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_UART_Transmit+0x2c>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e066      	b.n	800486e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2221      	movs	r2, #33	@ 0x21
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ae:	f7fc feeb 	bl	8001588 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c8:	d108      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e003      	b.n	80047e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047e4:	e02a      	b.n	800483c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2180      	movs	r1, #128	@ 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f840 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e036      	b.n	800486e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	3302      	adds	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e007      	b.n	800482e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1cf      	bne.n	80047e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	2140      	movs	r1, #64	@ 0x40
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f810 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e006      	b.n	800486e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b090      	sub	sp, #64	@ 0x40
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e050      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d04c      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004896:	f7fc fe77 	bl	8001588 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d241      	bcs.n	800492a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80048bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e5      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048fa:	623a      	str	r2, [r7, #32]
 80048fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	69f9      	ldr	r1, [r7, #28]
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	61bb      	str	r3, [r7, #24]
   return(result);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e00f      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	bf0c      	ite	eq
 800493a:	2301      	moveq	r3, #1
 800493c:	2300      	movne	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	429a      	cmp	r2, r3
 8004946:	d09f      	beq.n	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3740      	adds	r7, #64	@ 0x40
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800498e:	f023 030c 	bic.w	r3, r3, #12
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	430b      	orrs	r3, r1
 800499a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a68 <UART_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049bc:	f7ff fda0 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	e002      	b.n	80049ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7ff fd88 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 80049c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009a      	lsls	r2, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	4a22      	ldr	r2, [pc, #136]	@ (8004a6c <UART_SetConfig+0x118>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	0119      	lsls	r1, r3, #4
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009a      	lsls	r2, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a00:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <UART_SetConfig+0x118>)
 8004a02:	fba3 0302 	umull	r0, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2064      	movs	r0, #100	@ 0x64
 8004a0a:	fb00 f303 	mul.w	r3, r0, r3
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	3332      	adds	r3, #50	@ 0x32
 8004a14:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <UART_SetConfig+0x118>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a20:	4419      	add	r1, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a38:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <UART_SetConfig+0x118>)
 8004a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2064      	movs	r0, #100	@ 0x64
 8004a42:	fb00 f303 	mul.w	r3, r0, r3
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	3332      	adds	r3, #50	@ 0x32
 8004a4c:	4a07      	ldr	r2, [pc, #28]	@ (8004a6c <UART_SetConfig+0x118>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	51eb851f 	.word	0x51eb851f

08004a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a70:	b084      	sub	sp, #16
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	f107 0014 	add.w	r0, r7, #20
 8004a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	b004      	add	sp, #16
 8004a8e:	4770      	bx	lr

08004a90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004aa0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004aa4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ac4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4013      	ands	r3, r2
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b08:	b084      	sub	sp, #16
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	f107 0014 	add.w	r0, r7, #20
 8004b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	b004      	add	sp, #16
 8004b46:	4770      	bx	lr

08004b48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b09d      	sub	sp, #116	@ 0x74
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	78db      	ldrb	r3, [r3, #3]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d81f      	bhi.n	8004bba <USB_ActivateEndpoint+0x72>
 8004b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b80 <USB_ActivateEndpoint+0x38>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bc3 	.word	0x08004bc3
 8004b8c:	08004b9f 	.word	0x08004b9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b9c:	e012      	b.n	8004bc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ba2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004ba6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004baa:	e00b      	b.n	8004bc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004bb8:	e004      	b.n	8004bc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004bc0:	e000      	b.n	8004bc4 <USB_ActivateEndpoint+0x7c>
      break;
 8004bc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	7b1b      	ldrb	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 8178 	bne.w	8004f24 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8084 	beq.w	8004d46 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	4413      	add	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	88db      	ldrh	r3, [r3, #6]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	827b      	strh	r3, [r7, #18]
 8004c80:	8a7b      	ldrh	r3, [r7, #18]
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01b      	beq.n	8004cc2 <USB_ActivateEndpoint+0x17a>
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca0:	823b      	strh	r3, [r7, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	8a3b      	ldrh	r3, [r7, #16]
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d020      	beq.n	8004d0c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce0:	81bb      	strh	r3, [r7, #12]
 8004ce2:	89bb      	ldrh	r3, [r7, #12]
 8004ce4:	f083 0320 	eor.w	r3, r3, #32
 8004ce8:	81bb      	strh	r3, [r7, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	89bb      	ldrh	r3, [r7, #12]
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]
 8004d0a:	e2d5      	b.n	80052b8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d22:	81fb      	strh	r3, [r7, #14]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	89fb      	ldrh	r3, [r7, #14]
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
 8004d44:	e2b8      	b.n	80052b8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	4413      	add	r3, r2
 8004d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	011a      	lsls	r2, r3, #4
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	88db      	ldrh	r3, [r3, #6]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	4413      	add	r3, r2
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	011a      	lsls	r2, r3, #4
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	4413      	add	r3, r2
 8004d98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004db4:	d91d      	bls.n	8004df2 <USB_ActivateEndpoint+0x2aa>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <USB_ActivateEndpoint+0x288>
 8004dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e026      	b.n	8004e40 <USB_ActivateEndpoint+0x2f8>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <USB_ActivateEndpoint+0x2c8>
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e017      	b.n	8004e40 <USB_ActivateEndpoint+0x2f8>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <USB_ActivateEndpoint+0x2e2>
 8004e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e26:	3301      	adds	r3, #1
 8004e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <USB_ActivateEndpoint+0x348>
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	843b      	strh	r3, [r7, #32]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	8c3b      	ldrh	r3, [r7, #32]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d124      	bne.n	8004ee2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	83bb      	strh	r3, [r7, #28]
 8004eb0:	8bbb      	ldrh	r3, [r7, #28]
 8004eb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004eb6:	83bb      	strh	r3, [r7, #28]
 8004eb8:	8bbb      	ldrh	r3, [r7, #28]
 8004eba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ebe:	83bb      	strh	r3, [r7, #28]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	8bbb      	ldrh	r3, [r7, #28]
 8004ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	8013      	strh	r3, [r2, #0]
 8004ee0:	e1ea      	b.n	80052b8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef8:	83fb      	strh	r3, [r7, #30]
 8004efa:	8bfb      	ldrh	r3, [r7, #30]
 8004efc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f00:	83fb      	strh	r3, [r7, #30]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8bfb      	ldrh	r3, [r7, #30]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e1c9      	b.n	80052b8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	78db      	ldrb	r3, [r3, #3]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d11e      	bne.n	8004f6a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f42:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
 8004f68:	e01d      	b.n	8004fa6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f80:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fb6:	4413      	add	r3, r2
 8004fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	011a      	lsls	r2, r3, #4
 8004fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	891b      	ldrh	r3, [r3, #8]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fea:	4413      	add	r3, r2
 8004fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	011a      	lsls	r2, r3, #4
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004ffc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	895b      	ldrh	r3, [r3, #10]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	b29b      	uxth	r3, r3
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800500c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 8093 	bne.w	800513e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800502c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <USB_ActivateEndpoint+0x524>
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800505c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800507a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <USB_ActivateEndpoint+0x574>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80050da:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800511a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
 800513c:	e0bc      	b.n	80052b8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800514e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01d      	beq.n	8005196 <USB_ActivateEndpoint+0x64e>
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005170:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800518a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800518e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80051a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01d      	beq.n	80051ee <USB_ActivateEndpoint+0x6a6>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80051da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d024      	beq.n	8005240 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005214:	f083 0320 	eor.w	r3, r3, #32
 8005218:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
 800523e:	e01d      	b.n	800527c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005256:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80052a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80052b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3774      	adds	r7, #116	@ 0x74
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08d      	sub	sp, #52	@ 0x34
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	7b1b      	ldrb	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 808e 	bne.w	80053f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d044      	beq.n	800536e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	81bb      	strh	r3, [r7, #12]
 80052f2:	89bb      	ldrh	r3, [r7, #12]
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <USB_DeactivateEndpoint+0x6c>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005312:	817b      	strh	r3, [r7, #10]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005330:	b29b      	uxth	r3, r3
 8005332:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800534a:	813b      	strh	r3, [r7, #8]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]
 800536c:	e192      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	827b      	strh	r3, [r7, #18]
 800537c:	8a7b      	ldrh	r3, [r7, #18]
 800537e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01b      	beq.n	80053be <USB_DeactivateEndpoint+0xf6>
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539c:	823b      	strh	r3, [r7, #16]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8a3b      	ldrh	r3, [r7, #16]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d4:	81fb      	strh	r3, [r7, #14]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
 80053f6:	e14d      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f040 80a5 	bne.w	800554c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	843b      	strh	r3, [r7, #32]
 8005410:	8c3b      	ldrh	r3, [r7, #32]
 8005412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01b      	beq.n	8005452 <USB_DeactivateEndpoint+0x18a>
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005430:	83fb      	strh	r3, [r7, #30]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8bfb      	ldrh	r3, [r7, #30]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800544a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	83bb      	strh	r3, [r7, #28]
 8005460:	8bbb      	ldrh	r3, [r7, #28]
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <USB_DeactivateEndpoint+0x1da>
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005480:	837b      	strh	r3, [r7, #26]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	833b      	strh	r3, [r7, #24]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	8b3b      	ldrh	r3, [r7, #24]
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f0:	82fb      	strh	r3, [r7, #22]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8afb      	ldrh	r3, [r7, #22]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	82bb      	strh	r3, [r7, #20]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	8abb      	ldrh	r3, [r7, #20]
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
 800554a:	e0a3      	b.n	8005694 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800555a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800555c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <USB_DeactivateEndpoint+0x2d4>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005590:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80055aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <USB_DeactivateEndpoint+0x324>
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800561c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	441a      	add	r2, r3
 8005646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800566e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005672:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005690:	b29b      	uxth	r3, r3
 8005692:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3734      	adds	r7, #52	@ 0x34
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0c2      	sub	sp, #264	@ 0x108
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ae:	6018      	str	r0, [r3, #0]
 80056b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	f040 86b7 	bne.w	800643a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80056cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699a      	ldr	r2, [r3, #24]
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d908      	bls.n	80056fa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056f8:	e007      	b.n	800570a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800570a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	7b1b      	ldrb	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d13a      	bne.n	8005790 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800571a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6959      	ldr	r1, [r3, #20]
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	88da      	ldrh	r2, [r3, #6]
 8005732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005736:	b29b      	uxth	r3, r3
 8005738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800573c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f001 fc9c 	bl	800707e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	011a      	lsls	r2, r3, #4
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	f000 be1f 	b.w	80063ce <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	78db      	ldrb	r3, [r3, #3]
 800579c:	2b02      	cmp	r3, #2
 800579e:	f040 8462 	bne.w	8006066 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f240 83df 	bls.w	8005f7e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80057ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005810:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800581c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 81c7 	beq.w	8005bf0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d177      	bne.n	800596e <USB_EPStartXfer+0x2ce>
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	4413      	add	r3, r2
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	011a      	lsls	r2, r3, #4
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80058d0:	d921      	bls.n	8005916 <USB_EPStartXfer+0x276>
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <USB_EPStartXfer+0x252>
 80058e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058ec:	3b01      	subs	r3, #1
 80058ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e050      	b.n	80059b8 <USB_EPStartXfer+0x318>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <USB_EPStartXfer+0x294>
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e041      	b.n	80059b8 <USB_EPStartXfer+0x318>
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <USB_EPStartXfer+0x2b4>
 800594a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	4313      	orrs	r3, r2
 8005966:	b29a      	uxth	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	e024      	b.n	80059b8 <USB_EPStartXfer+0x318>
 800596e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11c      	bne.n	80059b8 <USB_EPStartXfer+0x318>
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	4413      	add	r3, r2
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	895b      	ldrh	r3, [r3, #10]
 80059c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6959      	ldr	r1, [r3, #20]
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	f001 fb49 	bl	800707e <USB_WritePMA>
            ep->xfer_buff += len;
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fc:	441a      	add	r2, r3
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d90f      	bls.n	8005a46 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	621a      	str	r2, [r3, #32]
 8005a44:	e00e      	b.n	8005a64 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d177      	bne.n	8005b64 <USB_EPStartXfer+0x4c4>
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4413      	add	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ac6:	d921      	bls.n	8005b0c <USB_EPStartXfer+0x46c>
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <USB_EPStartXfer+0x448>
 8005ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	e056      	b.n	8005bba <USB_EPStartXfer+0x51a>
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <USB_EPStartXfer+0x48a>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e047      	b.n	8005bba <USB_EPStartXfer+0x51a>
 8005b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <USB_EPStartXfer+0x4aa>
 8005b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b44:	3301      	adds	r3, #1
 8005b46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e02a      	b.n	8005bba <USB_EPStartXfer+0x51a>
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d122      	bne.n	8005bba <USB_EPStartXfer+0x51a>
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4413      	add	r3, r2
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	891b      	ldrh	r3, [r3, #8]
 8005bc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6959      	ldr	r1, [r3, #20]
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005be0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005be4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005be8:	6800      	ldr	r0, [r0, #0]
 8005bea:	f001 fa48 	bl	800707e <USB_WritePMA>
 8005bee:	e3ee      	b.n	80063ce <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d177      	bne.n	8005cf0 <USB_EPStartXfer+0x650>
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c20:	4413      	add	r3, r2
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c52:	d921      	bls.n	8005c98 <USB_EPStartXfer+0x5f8>
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <USB_EPStartXfer+0x5d4>
 8005c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	e056      	b.n	8005d46 <USB_EPStartXfer+0x6a6>
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <USB_EPStartXfer+0x616>
 8005ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e047      	b.n	8005d46 <USB_EPStartXfer+0x6a6>
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USB_EPStartXfer+0x636>
 8005ccc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e02a      	b.n	8005d46 <USB_EPStartXfer+0x6a6>
 8005cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d122      	bne.n	8005d46 <USB_EPStartXfer+0x6a6>
 8005d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d20:	4413      	add	r3, r2
 8005d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	891b      	ldrh	r3, [r3, #8]
 8005d52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6959      	ldr	r1, [r3, #20]
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d74:	6800      	ldr	r0, [r0, #0]
 8005d76:	f001 f982 	bl	800707e <USB_WritePMA>
            ep->xfer_buff += len;
 8005d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	441a      	add	r2, r3
 8005d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d90f      	bls.n	8005dd4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	621a      	str	r2, [r3, #32]
 8005dd2:	e00e      	b.n	8005df2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d177      	bne.n	8005efe <USB_EPStartXfer+0x85e>
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	4413      	add	r3, r2
 8005e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	011a      	lsls	r2, r3, #4
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e60:	d921      	bls.n	8005ea6 <USB_EPStartXfer+0x806>
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <USB_EPStartXfer+0x7e2>
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4313      	orrs	r3, r2
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e050      	b.n	8005f48 <USB_EPStartXfer+0x8a8>
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USB_EPStartXfer+0x824>
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e041      	b.n	8005f48 <USB_EPStartXfer+0x8a8>
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <USB_EPStartXfer+0x844>
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	e024      	b.n	8005f48 <USB_EPStartXfer+0x8a8>
 8005efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d11c      	bne.n	8005f48 <USB_EPStartXfer+0x8a8>
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f22:	4413      	add	r3, r2
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	011a      	lsls	r2, r3, #4
 8005f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	895b      	ldrh	r3, [r3, #10]
 8005f54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f6e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f72:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f76:	6800      	ldr	r0, [r0, #0]
 8005f78:	f001 f881 	bl	800707e <USB_WritePMA>
 8005f7c:	e227      	b.n	80063ce <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800600a:	4413      	add	r3, r2
 800600c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	011a      	lsls	r2, r3, #4
 800601c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800601e:	4413      	add	r3, r2
 8006020:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006024:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	b29a      	uxth	r2, r3
 800602c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800602e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	891b      	ldrh	r3, [r3, #8]
 800603c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6959      	ldr	r1, [r3, #20]
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006050:	b29b      	uxth	r3, r3
 8006052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006056:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800605a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800605e:	6800      	ldr	r0, [r0, #0]
 8006060:	f001 f80d 	bl	800707e <USB_WritePMA>
 8006064:	e1b3      	b.n	80063ce <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80c6 	beq.w	8006238 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d177      	bne.n	80061b8 <USB_EPStartXfer+0xb18>
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e8:	4413      	add	r3, r2
 80060ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006102:	667b      	str	r3, [r7, #100]	@ 0x64
 8006104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610e:	b29a      	uxth	r2, r3
 8006110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006118:	2b3e      	cmp	r3, #62	@ 0x3e
 800611a:	d921      	bls.n	8006160 <USB_EPStartXfer+0xac0>
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <USB_EPStartXfer+0xa9c>
 8006132:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006136:	3b01      	subs	r3, #1
 8006138:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800613c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006146:	b29b      	uxth	r3, r3
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	b29b      	uxth	r3, r3
 800614c:	4313      	orrs	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006158:	b29a      	uxth	r2, r3
 800615a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e050      	b.n	8006202 <USB_EPStartXfer+0xb62>
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <USB_EPStartXfer+0xade>
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006176:	b29a      	uxth	r2, r3
 8006178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	e041      	b.n	8006202 <USB_EPStartXfer+0xb62>
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <USB_EPStartXfer+0xafe>
 8006194:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006198:	3301      	adds	r3, #1
 800619a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800619e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	029b      	lsls	r3, r3, #10
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e024      	b.n	8006202 <USB_EPStartXfer+0xb62>
 80061b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d11c      	bne.n	8006202 <USB_EPStartXfer+0xb62>
 80061c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061dc:	4413      	add	r3, r2
 80061de:	673b      	str	r3, [r7, #112]	@ 0x70
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	011a      	lsls	r2, r3, #4
 80061ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006200:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	895b      	ldrh	r3, [r3, #10]
 800620e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	b29b      	uxth	r3, r3
 8006224:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006228:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800622c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006230:	6800      	ldr	r0, [r0, #0]
 8006232:	f000 ff24 	bl	800707e <USB_WritePMA>
 8006236:	e0ca      	b.n	80063ce <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d177      	bne.n	8006338 <USB_EPStartXfer+0xc98>
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006268:	4413      	add	r3, r2
 800626a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	011a      	lsls	r2, r3, #4
 800627a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800627c:	4413      	add	r3, r2
 800627e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006282:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628e:	b29a      	uxth	r2, r3
 8006290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	2b3e      	cmp	r3, #62	@ 0x3e
 800629a:	d921      	bls.n	80062e0 <USB_EPStartXfer+0xc40>
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <USB_EPStartXfer+0xc1c>
 80062b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062b6:	3b01      	subs	r3, #1
 80062b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4313      	orrs	r3, r2
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d8:	b29a      	uxth	r2, r3
 80062da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e05c      	b.n	800639a <USB_EPStartXfer+0xcfa>
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <USB_EPStartXfer+0xc5e>
 80062e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e04d      	b.n	800639a <USB_EPStartXfer+0xcfa>
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <USB_EPStartXfer+0xc7e>
 8006314:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006318:	3301      	adds	r3, #1
 800631a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800631e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e030      	b.n	800639a <USB_EPStartXfer+0xcfa>
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d128      	bne.n	800639a <USB_EPStartXfer+0xcfa>
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800636c:	4413      	add	r3, r2
 800636e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	011a      	lsls	r2, r3, #4
 8006380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006384:	4413      	add	r3, r2
 8006386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800638a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006398:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800639a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	891b      	ldrh	r3, [r3, #8]
 80063a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063c8:	6800      	ldr	r0, [r0, #0]
 80063ca:	f000 fe58 	bl	800707e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f4:	817b      	strh	r3, [r7, #10]
 80063f6:	897b      	ldrh	r3, [r7, #10]
 80063f8:	f083 0310 	eor.w	r3, r3, #16
 80063fc:	817b      	strh	r3, [r7, #10]
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	f083 0320 	eor.w	r3, r3, #32
 8006404:	817b      	strh	r3, [r7, #10]
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	897b      	ldrh	r3, [r7, #10]
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
 8006436:	f000 bcde 	b.w	8006df6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f040 80bb 	bne.w	80065c2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	429a      	cmp	r2, r3
 8006466:	d917      	bls.n	8006498 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	619a      	str	r2, [r3, #24]
 8006496:	e00e      	b.n	80064b6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80064da:	4413      	add	r3, r2
 80064dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006514:	2b3e      	cmp	r3, #62	@ 0x3e
 8006516:	d924      	bls.n	8006562 <USB_EPStartXfer+0xec2>
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <USB_EPStartXfer+0xe98>
 800652e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006532:	3b01      	subs	r3, #1
 8006534:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29a      	uxth	r2, r3
 8006540:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29b      	uxth	r3, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	b29b      	uxth	r3, r3
 800654e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	f000 bc10 	b.w	8006d82 <USB_EPStartXfer+0x16e2>
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <USB_EPStartXfer+0xee4>
 800656a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e3fe      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0xf04>
 800659a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	e3df      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	f040 8218 	bne.w	8006a04 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 809d 	bne.w	8006720 <USB_EPStartXfer+0x1080>
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800660a:	4413      	add	r3, r2
 800660c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006622:	4413      	add	r3, r2
 8006624:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800662c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b3e      	cmp	r3, #62	@ 0x3e
 800664e:	d92b      	bls.n	80066a8 <USB_EPStartXfer+0x1008>
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <USB_EPStartXfer+0xfe0>
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667a:	3b01      	subs	r3, #1
 800667c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668c:	b29b      	uxth	r3, r3
 800668e:	029b      	lsls	r3, r3, #10
 8006690:	b29b      	uxth	r3, r3
 8006692:	4313      	orrs	r3, r2
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e070      	b.n	800678a <USB_EPStartXfer+0x10ea>
 80066a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <USB_EPStartXfer+0x1032>
 80066b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e05b      	b.n	800678a <USB_EPStartXfer+0x10ea>
 80066d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <USB_EPStartXfer+0x1062>
 80066f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fc:	3301      	adds	r3, #1
 80066fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	b29b      	uxth	r3, r3
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	b29b      	uxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b29a      	uxth	r2, r3
 8006718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	e034      	b.n	800678a <USB_EPStartXfer+0x10ea>
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d12c      	bne.n	800678a <USB_EPStartXfer+0x10ea>
 8006730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800673e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674c:	b29b      	uxth	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006754:	4413      	add	r3, r2
 8006756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	011a      	lsls	r2, r3, #4
 8006768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800676c:	4413      	add	r3, r2
 800676e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 809d 	bne.w	80068e4 <USB_EPStartXfer+0x1244>
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067ce:	4413      	add	r3, r2
 80067d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	011a      	lsls	r2, r3, #4
 80067e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b3e      	cmp	r3, #62	@ 0x3e
 8006812:	d92b      	bls.n	800686c <USB_EPStartXfer+0x11cc>
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <USB_EPStartXfer+0x11a4>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683e:	3b01      	subs	r3, #1
 8006840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006850:	b29b      	uxth	r3, r3
 8006852:	029b      	lsls	r3, r3, #10
 8006854:	b29b      	uxth	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b29b      	uxth	r3, r3
 800685a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	e069      	b.n	8006940 <USB_EPStartXfer+0x12a0>
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10c      	bne.n	8006896 <USB_EPStartXfer+0x11f6>
 800687c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688c:	b29a      	uxth	r2, r3
 800688e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	e054      	b.n	8006940 <USB_EPStartXfer+0x12a0>
 8006896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <USB_EPStartXfer+0x1226>
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c0:	3301      	adds	r3, #1
 80068c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	e02d      	b.n	8006940 <USB_EPStartXfer+0x12a0>
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d125      	bne.n	8006940 <USB_EPStartXfer+0x12a0>
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800690a:	4413      	add	r3, r2
 800690c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	011a      	lsls	r2, r3, #4
 800691e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006922:	4413      	add	r3, r2
 8006924:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800693e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8218 	beq.w	8006d82 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006972:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <USB_EPStartXfer+0x12ea>
 800697e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10d      	bne.n	80069a6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800698a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800698e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 81f5 	bne.w	8006d82 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006998:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 81ee 	bne.w	8006d82 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e1be      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	78db      	ldrb	r3, [r3, #3]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 81b4 	bne.w	8006d7e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d917      	bls.n	8006a62 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	619a      	str	r2, [r3, #24]
 8006a60:	e00e      	b.n	8006a80 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8085 	bne.w	8006b9c <USB_EPStartXfer+0x14fc>
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	011a      	lsls	r2, r3, #4
 8006aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ace:	4413      	add	r3, r2
 8006ad0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006af2:	d923      	bls.n	8006b3c <USB_EPStartXfer+0x149c>
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <USB_EPStartXfer+0x1474>
 8006b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	029b      	lsls	r3, r3, #10
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e060      	b.n	8006bfe <USB_EPStartXfer+0x155e>
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10c      	bne.n	8006b5e <USB_EPStartXfer+0x14be>
 8006b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e04f      	b.n	8006bfe <USB_EPStartXfer+0x155e>
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <USB_EPStartXfer+0x14de>
 8006b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	e030      	b.n	8006bfe <USB_EPStartXfer+0x155e>
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d128      	bne.n	8006bfe <USB_EPStartXfer+0x155e>
 8006bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	011a      	lsls	r2, r3, #4
 8006be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006be8:	4413      	add	r3, r2
 8006bea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 8085 	bne.w	8006d28 <USB_EPStartXfer+0x1688>
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c42:	4413      	add	r3, r2
 8006c44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	011a      	lsls	r2, r3, #4
 8006c56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c7e:	d923      	bls.n	8006cc8 <USB_EPStartXfer+0x1628>
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <USB_EPStartXfer+0x1600>
 8006c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	029b      	lsls	r3, r3, #10
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e05c      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <USB_EPStartXfer+0x164a>
 8006cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e04b      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <USB_EPStartXfer+0x166a>
 8006d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d04:	3301      	adds	r3, #1
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	e02c      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
 8006d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d124      	bne.n	8006d82 <USB_EPStartXfer+0x16e2>
 8006d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d4e:	4413      	add	r3, r2
 8006d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	011a      	lsls	r2, r3, #4
 8006d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e001      	b.n	8006d82 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e03a      	b.n	8006df8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006dac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006db0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006db4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006db8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006dbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006dc0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d020      	beq.n	8006e56 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2a:	81bb      	strh	r3, [r7, #12]
 8006e2c:	89bb      	ldrh	r3, [r7, #12]
 8006e2e:	f083 0310 	eor.w	r3, r3, #16
 8006e32:	81bb      	strh	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	89bb      	ldrh	r3, [r7, #12]
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
 8006e54:	e01f      	b.n	8006e96 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6c:	81fb      	strh	r3, [r7, #14]
 8006e6e:	89fb      	ldrh	r3, [r7, #14]
 8006e70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e74:	81fb      	strh	r3, [r7, #14]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	7b1b      	ldrb	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 809d 	bne.w	8006ff0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d04c      	beq.n	8006f58 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	823b      	strh	r3, [r7, #16]
 8006ecc:	8a3b      	ldrh	r3, [r7, #16]
 8006ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01b      	beq.n	8006f0e <USB_EPClearStall+0x6c>
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eec:	81fb      	strh	r3, [r7, #14]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	89fb      	ldrh	r3, [r7, #14]
 8006efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d06c      	beq.n	8006ff0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2c:	81bb      	strh	r3, [r7, #12]
 8006f2e:	89bb      	ldrh	r3, [r7, #12]
 8006f30:	f083 0320 	eor.w	r3, r3, #32
 8006f34:	81bb      	strh	r3, [r7, #12]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	89bb      	ldrh	r3, [r7, #12]
 8006f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8013      	strh	r3, [r2, #0]
 8006f56:	e04b      	b.n	8006ff0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	82fb      	strh	r3, [r7, #22]
 8006f66:	8afb      	ldrh	r3, [r7, #22]
 8006f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <USB_EPClearStall+0x106>
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f86:	82bb      	strh	r3, [r7, #20]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	8abb      	ldrh	r3, [r7, #20]
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbe:	827b      	strh	r3, [r7, #18]
 8006fc0:	8a7b      	ldrh	r3, [r7, #18]
 8006fc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fc6:	827b      	strh	r3, [r7, #18]
 8006fc8:	8a7b      	ldrh	r3, [r7, #18]
 8006fca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fce:	827b      	strh	r3, [r7, #18]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	8a7b      	ldrh	r3, [r7, #18]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2280      	movs	r2, #128	@ 0x80
 8007012:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr

08007022 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007058:	b29b      	uxth	r3, r3
 800705a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800705c:	68fb      	ldr	r3, [r7, #12]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800707e:	b480      	push	{r7}
 8007080:	b08b      	sub	sp, #44	@ 0x2c
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	4611      	mov	r1, r2
 800708a:	461a      	mov	r2, r3
 800708c:	460b      	mov	r3, r1
 800708e:	80fb      	strh	r3, [r7, #6]
 8007090:	4613      	mov	r3, r2
 8007092:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007094:	88bb      	ldrh	r3, [r7, #4]
 8007096:	3301      	adds	r3, #1
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	005a      	lsls	r2, r3, #1
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b6:	e01e      	b.n	80070f6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3301      	adds	r3, #1
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	8a7a      	ldrh	r2, [r7, #18]
 80070d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	3302      	adds	r3, #2
 80070dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	3302      	adds	r3, #2
 80070e2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	3301      	adds	r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f2:	3b01      	subs	r3, #1
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1dd      	bne.n	80070b8 <USB_WritePMA+0x3a>
  }
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	372c      	adds	r7, #44	@ 0x2c
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007108:	b480      	push	{r7}
 800710a:	b08b      	sub	sp, #44	@ 0x2c
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4611      	mov	r1, r2
 8007114:	461a      	mov	r2, r3
 8007116:	460b      	mov	r3, r1
 8007118:	80fb      	strh	r3, [r7, #6]
 800711a:	4613      	mov	r3, r2
 800711c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800711e:	88bb      	ldrh	r3, [r7, #4]
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	005a      	lsls	r2, r3, #1
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800713a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007140:	e01b      	b.n	800717a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	3302      	adds	r3, #2
 800714e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3301      	adds	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	b2da      	uxtb	r2, r3
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	3302      	adds	r3, #2
 8007172:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	3b01      	subs	r3, #1
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e0      	bne.n	8007142 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007180:	88bb      	ldrh	r3, [r7, #4]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	701a      	strb	r2, [r3, #0]
  }
}
 800719c:	bf00      	nop
 800719e:	372c      	adds	r7, #44	@ 0x2c
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
	...

080071a8 <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
 80071b2:	460b      	mov	r3, r1
 80071b4:	71bb      	strb	r3, [r7, #6]
 80071b6:	4613      	mov	r3, r2
 80071b8:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 80071be:	79bb      	ldrb	r3, [r7, #6]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	613b      	str	r3, [r7, #16]
    switch (pos) {
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b0f      	cmp	r3, #15
 80071c8:	f200 80c3 	bhi.w	8007352 <CPU_IntSrcPrioSet+0x1aa>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <CPU_IntSrcPrioSet+0x2c>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	08007403 	.word	0x08007403
 80071d8:	08007403 	.word	0x08007403
 80071dc:	08007403 	.word	0x08007403
 80071e0:	08007403 	.word	0x08007403
 80071e4:	08007215 	.word	0x08007215
 80071e8:	08007241 	.word	0x08007241
 80071ec:	0800726f 	.word	0x0800726f
 80071f0:	08007403 	.word	0x08007403
 80071f4:	08007403 	.word	0x08007403
 80071f8:	08007403 	.word	0x08007403
 80071fc:	08007403 	.word	0x08007403
 8007200:	0800729d 	.word	0x0800729d
 8007204:	080072cb 	.word	0x080072cb
 8007208:	08007403 	.word	0x08007403
 800720c:	080072f7 	.word	0x080072f7
 8007210:	08007325 	.word	0x08007325
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8007214:	2040      	movs	r0, #64	@ 0x40
 8007216:	f7f8 ff9f 	bl	8000158 <CPU_SR_Save>
 800721a:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 800721c:	4b7c      	ldr	r3, [pc, #496]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007228:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8007232:	4a77      	ldr	r2, [pc, #476]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f7f8 ff9b 	bl	8000174 <CPU_SR_Restore>
             break;
 800723e:	e0e3      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8007240:	2040      	movs	r0, #64	@ 0x40
 8007242:	f7f8 ff89 	bl	8000158 <CPU_SR_Save>
 8007246:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8007248:	4b71      	ldr	r3, [pc, #452]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007254:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8007260:	4a6b      	ldr	r2, [pc, #428]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	f7f8 ff84 	bl	8000174 <CPU_SR_Restore>
             break;
 800726c:	e0cc      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 800726e:	2040      	movs	r0, #64	@ 0x40
 8007270:	f7f8 ff72 	bl	8000158 <CPU_SR_Save>
 8007274:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8007276:	4b66      	ldr	r3, [pc, #408]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8007282:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 800728e:	4a60      	ldr	r2, [pc, #384]	@ (8007410 <CPU_IntSrcPrioSet+0x268>)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8007294:	6978      	ldr	r0, [r7, #20]
 8007296:	f7f8 ff6d 	bl	8000174 <CPU_SR_Restore>
             break;
 800729a:	e0b5      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 800729c:	2040      	movs	r0, #64	@ 0x40
 800729e:	f7f8 ff5b 	bl	8000158 <CPU_SR_Save>
 80072a2:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 80072a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007414 <CPU_IntSrcPrioSet+0x26c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072b0:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	061b      	lsls	r3, r3, #24
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 80072bc:	4a55      	ldr	r2, [pc, #340]	@ (8007414 <CPU_IntSrcPrioSet+0x26c>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f7f8 ff56 	bl	8000174 <CPU_SR_Restore>
             break;
 80072c8:	e09e      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 80072ca:	2040      	movs	r0, #64	@ 0x40
 80072cc:	f7f8 ff44 	bl	8000158 <CPU_SR_Save>
 80072d0:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80072d2:	4b51      	ldr	r3, [pc, #324]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80072de:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 80072e8:	4a4b      	ldr	r2, [pc, #300]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f7f8 ff40 	bl	8000174 <CPU_SR_Restore>
             break;
 80072f4:	e088      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 80072f6:	2040      	movs	r0, #64	@ 0x40
 80072f8:	f7f8 ff2e 	bl	8000158 <CPU_SR_Save>
 80072fc:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80072fe:	4b46      	ldr	r3, [pc, #280]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800730a:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	041b      	lsls	r3, r3, #16
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8007316:	4a40      	ldr	r2, [pc, #256]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800731c:	6978      	ldr	r0, [r7, #20]
 800731e:	f7f8 ff29 	bl	8000174 <CPU_SR_Restore>
             break;
 8007322:	e071      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8007324:	2040      	movs	r0, #64	@ 0x40
 8007326:	f7f8 ff17 	bl	8000158 <CPU_SR_Save>
 800732a:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 800732c:	4b3a      	ldr	r3, [pc, #232]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007338:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8007344:	4a34      	ldr	r2, [pc, #208]	@ (8007418 <CPU_IntSrcPrioSet+0x270>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7f8 ff12 	bl	8000174 <CPU_SR_Restore>
             break;
 8007350:	e05a      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 8007352:	4b32      	ldr	r3, [pc, #200]	@ (800741c <CPU_IntSrcPrioSet+0x274>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	3301      	adds	r3, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	b29b      	uxth	r3, r3
 8007362:	3310      	adds	r3, #16
 8007364:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	b29b      	uxth	r3, r3
 800736a:	897a      	ldrh	r2, [r7, #10]
 800736c:	429a      	cmp	r2, r3
 800736e:	d94a      	bls.n	8007406 <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 8007370:	797b      	ldrb	r3, [r7, #5]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d105      	bne.n	8007382 <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 8007376:	79bb      	ldrb	r3, [r7, #6]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d907      	bls.n	800738c <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 800737c:	f000 f850 	bl	8007420 <CPU_SW_Exception>
 8007380:	e004      	b.n	800738c <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 8007382:	79bb      	ldrb	r3, [r7, #6]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d801      	bhi.n	800738c <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8007388:	f000 f84a 	bl	8007420 <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	3b10      	subs	r3, #16
 8007390:	2b00      	cmp	r3, #0
 8007392:	da00      	bge.n	8007396 <CPU_IntSrcPrioSet+0x1ee>
 8007394:	3303      	adds	r3, #3
 8007396:	109b      	asrs	r3, r3, #2
 8007398:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	3b10      	subs	r3, #16
 800739e:	425a      	negs	r2, r3
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	f002 0203 	and.w	r2, r2, #3
 80073a8:	bf58      	it	pl
 80073aa:	4253      	negpl	r3, r2
 80073ac:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 80073ae:	2040      	movs	r0, #64	@ 0x40
 80073b0:	f7f8 fed2 	bl	8000158 <CPU_SR_Save>
 80073b4:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 80073b6:	7a7b      	ldrb	r3, [r7, #9]
 80073b8:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80073bc:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 80073c6:	7a3b      	ldrb	r3, [r7, #8]
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	22ff      	movs	r2, #255	@ 0xff
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4013      	ands	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 80073d8:	7a3b      	ldrb	r3, [r7, #8]
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 80073e8:	7a7b      	ldrb	r3, [r7, #9]
 80073ea:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80073ee:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	461a      	mov	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 80073fa:	6978      	ldr	r0, [r7, #20]
 80073fc:	f7f8 feba 	bl	8000174 <CPU_SR_Restore>
             }
             break;
 8007400:	e001      	b.n	8007406 <CPU_IntSrcPrioSet+0x25e>
             break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <CPU_IntSrcPrioSet+0x260>
             break;
 8007406:	bf00      	nop
    }
}
 8007408:	bf00      	nop
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	e000ed18 	.word	0xe000ed18
 8007414:	e000ed1c 	.word	0xe000ed1c
 8007418:	e000ed20 	.word	0xe000ed20
 800741c:	e000e004 	.word	0xe000e004

08007420 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
    for (;;) {
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <CPU_SW_Exception+0x4>

08007428 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 800742e:	4b3b      	ldr	r3, [pc, #236]	@ (800751c <OSDebugInit+0xf4>)
 8007430:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8007432:	4b3b      	ldr	r3, [pc, #236]	@ (8007520 <OSDebugInit+0xf8>)
 8007434:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8007436:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <OSDebugInit+0xfc>)
 8007438:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 800743a:	4b3b      	ldr	r3, [pc, #236]	@ (8007528 <OSDebugInit+0x100>)
 800743c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 800743e:	4b3b      	ldr	r3, [pc, #236]	@ (800752c <OSDebugInit+0x104>)
 8007440:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8007442:	4b3b      	ldr	r3, [pc, #236]	@ (8007530 <OSDebugInit+0x108>)
 8007444:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8007446:	4b3b      	ldr	r3, [pc, #236]	@ (8007534 <OSDebugInit+0x10c>)
 8007448:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 800744a:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <OSDebugInit+0x110>)
 800744c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 800744e:	4b3b      	ldr	r3, [pc, #236]	@ (800753c <OSDebugInit+0x114>)
 8007450:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8007452:	4b3b      	ldr	r3, [pc, #236]	@ (8007540 <OSDebugInit+0x118>)
 8007454:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8007456:	4b3b      	ldr	r3, [pc, #236]	@ (8007544 <OSDebugInit+0x11c>)
 8007458:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 800745a:	4b3b      	ldr	r3, [pc, #236]	@ (8007548 <OSDebugInit+0x120>)
 800745c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 800745e:	4b3b      	ldr	r3, [pc, #236]	@ (800754c <OSDebugInit+0x124>)
 8007460:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8007462:	4b3b      	ldr	r3, [pc, #236]	@ (8007550 <OSDebugInit+0x128>)
 8007464:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8007466:	4b3b      	ldr	r3, [pc, #236]	@ (8007554 <OSDebugInit+0x12c>)
 8007468:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 800746a:	4b3b      	ldr	r3, [pc, #236]	@ (8007558 <OSDebugInit+0x130>)
 800746c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 800746e:	4b3b      	ldr	r3, [pc, #236]	@ (800755c <OSDebugInit+0x134>)
 8007470:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8007472:	4b3b      	ldr	r3, [pc, #236]	@ (8007560 <OSDebugInit+0x138>)
 8007474:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8007476:	4b3b      	ldr	r3, [pc, #236]	@ (8007564 <OSDebugInit+0x13c>)
 8007478:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 800747a:	4b3b      	ldr	r3, [pc, #236]	@ (8007568 <OSDebugInit+0x140>)
 800747c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 800747e:	4b3b      	ldr	r3, [pc, #236]	@ (800756c <OSDebugInit+0x144>)
 8007480:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8007482:	4b3b      	ldr	r3, [pc, #236]	@ (8007570 <OSDebugInit+0x148>)
 8007484:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8007486:	4b3b      	ldr	r3, [pc, #236]	@ (8007574 <OSDebugInit+0x14c>)
 8007488:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 800748a:	4b3b      	ldr	r3, [pc, #236]	@ (8007578 <OSDebugInit+0x150>)
 800748c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 800748e:	4b3b      	ldr	r3, [pc, #236]	@ (800757c <OSDebugInit+0x154>)
 8007490:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8007492:	4b3b      	ldr	r3, [pc, #236]	@ (8007580 <OSDebugInit+0x158>)
 8007494:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8007496:	4b3b      	ldr	r3, [pc, #236]	@ (8007584 <OSDebugInit+0x15c>)
 8007498:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 800749a:	4b3b      	ldr	r3, [pc, #236]	@ (8007588 <OSDebugInit+0x160>)
 800749c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 800749e:	4b3b      	ldr	r3, [pc, #236]	@ (800758c <OSDebugInit+0x164>)
 80074a0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 80074a2:	4b3b      	ldr	r3, [pc, #236]	@ (8007590 <OSDebugInit+0x168>)
 80074a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 80074a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007594 <OSDebugInit+0x16c>)
 80074a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 80074aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007598 <OSDebugInit+0x170>)
 80074ac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 80074ae:	4b3b      	ldr	r3, [pc, #236]	@ (800759c <OSDebugInit+0x174>)
 80074b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 80074b2:	4b3b      	ldr	r3, [pc, #236]	@ (80075a0 <OSDebugInit+0x178>)
 80074b4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 80074b6:	4b3b      	ldr	r3, [pc, #236]	@ (80075a4 <OSDebugInit+0x17c>)
 80074b8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 80074ba:	4b3b      	ldr	r3, [pc, #236]	@ (80075a8 <OSDebugInit+0x180>)
 80074bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 80074be:	4b3b      	ldr	r3, [pc, #236]	@ (80075ac <OSDebugInit+0x184>)
 80074c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 80074c2:	4b3b      	ldr	r3, [pc, #236]	@ (80075b0 <OSDebugInit+0x188>)
 80074c4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 80074c6:	4b3b      	ldr	r3, [pc, #236]	@ (80075b4 <OSDebugInit+0x18c>)
 80074c8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 80074ca:	4b3b      	ldr	r3, [pc, #236]	@ (80075b8 <OSDebugInit+0x190>)
 80074cc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 80074ce:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <OSDebugInit+0x194>)
 80074d0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 80074d2:	4b3b      	ldr	r3, [pc, #236]	@ (80075c0 <OSDebugInit+0x198>)
 80074d4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 80074d6:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <OSDebugInit+0x19c>)
 80074d8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 80074da:	4b3b      	ldr	r3, [pc, #236]	@ (80075c8 <OSDebugInit+0x1a0>)
 80074dc:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 80074de:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <OSDebugInit+0x1a4>)
 80074e0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 80074e2:	4b3b      	ldr	r3, [pc, #236]	@ (80075d0 <OSDebugInit+0x1a8>)
 80074e4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 80074e6:	4b3b      	ldr	r3, [pc, #236]	@ (80075d4 <OSDebugInit+0x1ac>)
 80074e8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 80074ea:	4b3b      	ldr	r3, [pc, #236]	@ (80075d8 <OSDebugInit+0x1b0>)
 80074ec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 80074ee:	4b3b      	ldr	r3, [pc, #236]	@ (80075dc <OSDebugInit+0x1b4>)
 80074f0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 80074f2:	4b3b      	ldr	r3, [pc, #236]	@ (80075e0 <OSDebugInit+0x1b8>)
 80074f4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 80074f6:	4b3b      	ldr	r3, [pc, #236]	@ (80075e4 <OSDebugInit+0x1bc>)
 80074f8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 80074fa:	4b3b      	ldr	r3, [pc, #236]	@ (80075e8 <OSDebugInit+0x1c0>)
 80074fc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 80074fe:	4b3b      	ldr	r3, [pc, #236]	@ (80075ec <OSDebugInit+0x1c4>)
 8007500:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8007502:	4b3b      	ldr	r3, [pc, #236]	@ (80075f0 <OSDebugInit+0x1c8>)
 8007504:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8007506:	4b3b      	ldr	r3, [pc, #236]	@ (80075f4 <OSDebugInit+0x1cc>)
 8007508:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 800750a:	4b3b      	ldr	r3, [pc, #236]	@ (80075f8 <OSDebugInit+0x1d0>)
 800750c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 800750e:	4b3b      	ldr	r3, [pc, #236]	@ (80075fc <OSDebugInit+0x1d4>)
 8007510:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	0800d22a 	.word	0x0800d22a
 8007520:	0800d22c 	.word	0x0800d22c
 8007524:	0800d232 	.word	0x0800d232
 8007528:	0800d234 	.word	0x0800d234
 800752c:	0800d230 	.word	0x0800d230
 8007530:	0800d236 	.word	0x0800d236
 8007534:	0800d238 	.word	0x0800d238
 8007538:	0800d23a 	.word	0x0800d23a
 800753c:	0800d23c 	.word	0x0800d23c
 8007540:	0800d23e 	.word	0x0800d23e
 8007544:	0800d240 	.word	0x0800d240
 8007548:	0800d242 	.word	0x0800d242
 800754c:	0800d244 	.word	0x0800d244
 8007550:	0800d246 	.word	0x0800d246
 8007554:	0800d248 	.word	0x0800d248
 8007558:	0800d24a 	.word	0x0800d24a
 800755c:	0800d24c 	.word	0x0800d24c
 8007560:	0800d24e 	.word	0x0800d24e
 8007564:	0800d250 	.word	0x0800d250
 8007568:	0800d252 	.word	0x0800d252
 800756c:	0800d254 	.word	0x0800d254
 8007570:	0800d256 	.word	0x0800d256
 8007574:	0800d258 	.word	0x0800d258
 8007578:	0800d25a 	.word	0x0800d25a
 800757c:	0800d25c 	.word	0x0800d25c
 8007580:	0800d25e 	.word	0x0800d25e
 8007584:	0800d260 	.word	0x0800d260
 8007588:	0800d262 	.word	0x0800d262
 800758c:	0800d264 	.word	0x0800d264
 8007590:	0800d266 	.word	0x0800d266
 8007594:	0800d268 	.word	0x0800d268
 8007598:	0800d26a 	.word	0x0800d26a
 800759c:	0800d26c 	.word	0x0800d26c
 80075a0:	0800d26e 	.word	0x0800d26e
 80075a4:	0800d270 	.word	0x0800d270
 80075a8:	0800d272 	.word	0x0800d272
 80075ac:	0800d274 	.word	0x0800d274
 80075b0:	0800d276 	.word	0x0800d276
 80075b4:	0800d278 	.word	0x0800d278
 80075b8:	0800d27a 	.word	0x0800d27a
 80075bc:	0800d27c 	.word	0x0800d27c
 80075c0:	0800d27e 	.word	0x0800d27e
 80075c4:	0800d280 	.word	0x0800d280
 80075c8:	0800d282 	.word	0x0800d282
 80075cc:	20002b50 	.word	0x20002b50
 80075d0:	20002fd4 	.word	0x20002fd4
 80075d4:	0800d286 	.word	0x0800d286
 80075d8:	0800d288 	.word	0x0800d288
 80075dc:	0800d28a 	.word	0x0800d28a
 80075e0:	0800d28c 	.word	0x0800d28c
 80075e4:	0800d28e 	.word	0x0800d28e
 80075e8:	0800d290 	.word	0x0800d290
 80075ec:	0800d292 	.word	0x0800d292
 80075f0:	0800d294 	.word	0x0800d294
 80075f4:	0800d296 	.word	0x0800d296
 80075f8:	0800d284 	.word	0x0800d284
 80075fc:	0800d298 	.word	0x0800d298

08007600 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 8007606:	4b13      	ldr	r3, [pc, #76]	@ (8007654 <OSInitHookBegin+0x54>)
 8007608:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 800760a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800760e:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 8007610:	e007      	b.n	8007622 <OSInitHookBegin+0x22>
        size--;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3b01      	subs	r3, #1
 8007616:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	1d1a      	adds	r2, r3, #4
 800761c:	603a      	str	r2, [r7, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f4      	bne.n	8007612 <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <OSInitHookBegin+0x58>)
 800762a:	4a0c      	ldr	r2, [pc, #48]	@ (800765c <OSInitHookBegin+0x5c>)
 800762c:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 800762e:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <OSInitHookBegin+0x58>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 0307 	bic.w	r3, r3, #7
 8007636:	461a      	mov	r2, r3
 8007638:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <OSInitHookBegin+0x58>)
 800763a:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 800763c:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <OSInitHookBegin+0x60>)
 800763e:	2200      	movs	r2, #0
 8007640:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8007642:	4b08      	ldr	r3, [pc, #32]	@ (8007664 <OSInitHookBegin+0x64>)
 8007644:	2240      	movs	r2, #64	@ 0x40
 8007646:	601a      	str	r2, [r3, #0]
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20001834 	.word	0x20001834
 8007658:	20001c34 	.word	0x20001c34
 800765c:	20001c34 	.word	0x20001c34
 8007660:	20001c38 	.word	0x20001c38
 8007664:	20001c3c 	.word	0x20001c3c

08007668 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0

}
 800766c:	bf00      	nop
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f002 f829 	bl	80096d4 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f002 f827 	bl	80096e6 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 80076a4:	f002 f828 	bl	80096f8 <App_TaskIdleHook>
#endif
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}

080076ac <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f002 f82b 	bl	8009710 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80076c6:	f002 f81d 	bl	8009704 <App_TaskStatHook>
#endif
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076f8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3b04      	subs	r3, #4
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	4a34      	ldr	r2, [pc, #208]	@ (80077e0 <OSTaskStkInit+0x110>)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	3b04      	subs	r3, #4
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800771e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3b04      	subs	r3, #4
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800772c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3b04      	subs	r3, #4
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800773a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	3b04      	subs	r3, #4
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8007748:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	3b04      	subs	r3, #4
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	3b04      	subs	r3, #4
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f06f 0202 	mvn.w	r2, #2
 8007762:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3b04      	subs	r3, #4
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8007770:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	3b04      	subs	r3, #4
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800777e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3b04      	subs	r3, #4
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800778c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3b04      	subs	r3, #4
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800779a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3b04      	subs	r3, #4
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80077a8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80077b6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80077c4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80077d2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 80077d4:	697b      	ldr	r3, [r7, #20]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr
 80077e0:	08009121 	.word	0x08009121

080077e4 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80077e8:	f001 ff9b 	bl	8009722 <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 80077ec:	bf00      	nop
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 ff98 	bl	800972e <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 800780c:	f001 ff98 	bl	8009740 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8007810:	4b08      	ldr	r3, [pc, #32]	@ (8007834 <OSTimeTickHook+0x2c>)
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	4b06      	ldr	r3, [pc, #24]	@ (8007834 <OSTimeTickHook+0x2c>)
 800781a:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <OSTimeTickHook+0x2c>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007824:	d304      	bcc.n	8007830 <OSTimeTickHook+0x28>
        OSTmrCtr = 0u;
 8007826:	4b03      	ldr	r3, [pc, #12]	@ (8007834 <OSTimeTickHook+0x2c>)
 8007828:	2200      	movs	r2, #0
 800782a:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 800782c:	f001 fd70 	bl	8009310 <OSTmrSignal>
    }
#endif
}
 8007830:	bf00      	nop
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20001c38 	.word	0x20001c38

08007838 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 800783c:	f7f8 fc88 	bl	8000150 <CPU_IntDis>
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8007840:	f000 f8a2 	bl	8007988 <OSIntEnter>
    OS_EXIT_CRITICAL();
 8007844:	f7f8 fc86 	bl	8000154 <CPU_IntEn>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8007848:	f000 f9b0 	bl	8007bac <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 800784c:	f000 f8b4 	bl	80079b8 <OSIntExit>
}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}

08007854 <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a06      	ldr	r2, [pc, #24]	@ (8007878 <OS_CPU_SysTickInitFreq+0x24>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	0b5b      	lsrs	r3, r3, #13
 8007866:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 f807 	bl	800787c <OS_CPU_SysTickInit>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	d1b71759 	.word	0xd1b71759

0800787c <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8007884:	2340      	movs	r3, #64	@ 0x40
 8007886:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 8007888:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <OS_CPU_SysTickInit+0x54>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8007890:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <OS_CPU_SysTickInit+0x58>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800789c:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	061b      	lsls	r3, r3, #24
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 80078a8:	4a0a      	ldr	r2, [pc, #40]	@ (80078d4 <OS_CPU_SysTickInit+0x58>)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <OS_CPU_SysTickInit+0x5c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a09      	ldr	r2, [pc, #36]	@ (80078d8 <OS_CPU_SysTickInit+0x5c>)
 80078b4:	f043 0305 	orr.w	r3, r3, #5
 80078b8:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 80078ba:	4b07      	ldr	r3, [pc, #28]	@ (80078d8 <OS_CPU_SysTickInit+0x5c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a06      	ldr	r2, [pc, #24]	@ (80078d8 <OS_CPU_SysTickInit+0x5c>)
 80078c0:	f043 0302 	orr.w	r3, r3, #2
 80078c4:	6013      	str	r3, [r2, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr
 80078d0:	e000e014 	.word	0xe000e014
 80078d4:	e000ed20 	.word	0xe000ed20
 80078d8:	e000e010 	.word	0xe000e010

080078dc <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	701a      	strb	r2, [r3, #0]
        return;
 80078f8:	e022      	b.n	8007940 <OSEventNameSet+0x64>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	220c      	movs	r2, #12
 8007904:	701a      	strb	r2, [r3, #0]
        return;
 8007906:	e01b      	b.n	8007940 <OSEventNameSet+0x64>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8007908:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <OSEventNameSet+0x6c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2212      	movs	r2, #18
 8007914:	701a      	strb	r2, [r3, #0]
        return;
 8007916:	e013      	b.n	8007940 <OSEventNameSet+0x64>
    }
    switch (pevent->OSEventType) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	2b03      	cmp	r3, #3
 8007920:	d903      	bls.n	800792a <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
             return;
 8007928:	e00a      	b.n	8007940 <OSEventNameSet+0x64>
             break;
 800792a:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 800792c:	f7f8 fc10 	bl	8000150 <CPU_IntDis>
    pevent->OSEventName = pname;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8007936:	f7f8 fc0d 	bl	8000154 <CPU_IntEn>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
}
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20001f9c 	.word	0x20001f9c

0800794c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8007950:	f7ff fe56 	bl	8007600 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8007954:	f000 fb6e 	bl	8008034 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8007958:	f000 fbaa 	bl	80080b0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 800795c:	f000 fc24 	bl	80081a8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8007960:	f000 fb1e 	bl	8007fa0 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8007964:	f000 fe90 	bl	8008688 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8007968:	f000 fefe 	bl	8008768 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 800796c:	f000 ff3c 	bl	80087e8 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8007970:	f000 fbce 	bl	8008110 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8007974:	f000 fbf2 	bl	800815c <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8007978:	f001 fcdc 	bl	8009334 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 800797c:	f7ff fe74 	bl	8007668 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8007980:	f7ff fd52 	bl	8007428 <OSDebugInit>
#endif
}
 8007984:	bf00      	nop
 8007986:	bd80      	pop	{r7, pc}

08007988 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 800798c:	4b08      	ldr	r3, [pc, #32]	@ (80079b0 <OSIntEnter+0x28>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d109      	bne.n	80079a8 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8007994:	4b07      	ldr	r3, [pc, #28]	@ (80079b4 <OSIntEnter+0x2c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2bff      	cmp	r3, #255	@ 0xff
 800799a:	d005      	beq.n	80079a8 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <OSIntEnter+0x2c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	4b03      	ldr	r3, [pc, #12]	@ (80079b4 <OSIntEnter+0x2c>)
 80079a6:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 80079a8:	bf00      	nop
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr
 80079b0:	20001fac 	.word	0x20001fac
 80079b4:	20001f9c 	.word	0x20001f9c

080079b8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80079be:	2300      	movs	r3, #0
 80079c0:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 80079c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <OSIntExit+0x80>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d131      	bne.n	8007a2e <OSIntExit+0x76>
        OS_ENTER_CRITICAL();
 80079ca:	f7f8 fbc1 	bl	8000150 <CPU_IntDis>
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <OSIntExit+0x84>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <OSIntExit+0x2a>
            OSIntNesting--;
 80079d6:	4b19      	ldr	r3, [pc, #100]	@ (8007a3c <OSIntExit+0x84>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4b17      	ldr	r3, [pc, #92]	@ (8007a3c <OSIntExit+0x84>)
 80079e0:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 80079e2:	4b16      	ldr	r3, [pc, #88]	@ (8007a3c <OSIntExit+0x84>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d11f      	bne.n	8007a2a <OSIntExit+0x72>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <OSIntExit+0x88>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d11b      	bne.n	8007a2a <OSIntExit+0x72>
                OS_SchedNew();
 80079f2:	f000 fc7f 	bl	80082f4 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80079f6:	4b13      	ldr	r3, [pc, #76]	@ (8007a44 <OSIntExit+0x8c>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	4b12      	ldr	r3, [pc, #72]	@ (8007a48 <OSIntExit+0x90>)
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	4a12      	ldr	r2, [pc, #72]	@ (8007a4c <OSIntExit+0x94>)
 8007a04:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8007a06:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <OSIntExit+0x8c>)
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <OSIntExit+0x98>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d00b      	beq.n	8007a2a <OSIntExit+0x72>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8007a12:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <OSIntExit+0x94>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a18:	3201      	adds	r2, #1
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <OSIntExit+0x9c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	4a0c      	ldr	r2, [pc, #48]	@ (8007a54 <OSIntExit+0x9c>)
 8007a24:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8007a26:	f7f8 fc14 	bl	8000252 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8007a2a:	f7f8 fb93 	bl	8000154 <CPU_IntEn>
    }
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001fac 	.word	0x20001fac
 8007a3c:	20001f9c 	.word	0x20001f9c
 8007a40:	20001f9d 	.word	0x20001f9d
 8007a44:	20001f9f 	.word	0x20001f9f
 8007a48:	200021c4 	.word	0x200021c4
 8007a4c:	200021bc 	.word	0x200021bc
 8007a50:	20001f9e 	.word	0x20001f9e
 8007a54:	20001c40 	.word	0x20001c40

08007a58 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8007a62:	4b0d      	ldr	r3, [pc, #52]	@ (8007a98 <OSSchedLock+0x40>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d111      	bne.n	8007a8e <OSSchedLock+0x36>
        OS_ENTER_CRITICAL();
 8007a6a:	f7f8 fb71 	bl	8000150 <CPU_IntDis>
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a9c <OSSchedLock+0x44>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <OSSchedLock+0x32>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8007a76:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <OSSchedLock+0x48>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2bff      	cmp	r3, #255	@ 0xff
 8007a7c:	d005      	beq.n	8007a8a <OSSchedLock+0x32>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8007a7e:	4b08      	ldr	r3, [pc, #32]	@ (8007aa0 <OSSchedLock+0x48>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <OSSchedLock+0x48>)
 8007a88:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8007a8a:	f7f8 fb63 	bl	8000154 <CPU_IntEn>
    }
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20001fac 	.word	0x20001fac
 8007a9c:	20001f9c 	.word	0x20001f9c
 8007aa0:	20001f9d 	.word	0x20001f9d

08007aa4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8007aae:	4b14      	ldr	r3, [pc, #80]	@ (8007b00 <OSSchedUnlock+0x5c>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d120      	bne.n	8007af8 <OSSchedUnlock+0x54>
        OS_ENTER_CRITICAL();
 8007ab6:	f7f8 fb4b 	bl	8000150 <CPU_IntDis>
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8007aba:	4b12      	ldr	r3, [pc, #72]	@ (8007b04 <OSSchedUnlock+0x60>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d118      	bne.n	8007af4 <OSSchedUnlock+0x50>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8007ac2:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <OSSchedUnlock+0x64>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d011      	beq.n	8007aee <OSSchedUnlock+0x4a>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8007aca:	4b0f      	ldr	r3, [pc, #60]	@ (8007b08 <OSSchedUnlock+0x64>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <OSSchedUnlock+0x64>)
 8007ad4:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <OSSchedUnlock+0x64>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <OSSchedUnlock+0x44>
                    OS_EXIT_CRITICAL();
 8007ade:	f7f8 fb39 	bl	8000154 <CPU_IntEn>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8007ae2:	f000 fbc7 	bl	8008274 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8007ae6:	e007      	b.n	8007af8 <OSSchedUnlock+0x54>
                    OS_EXIT_CRITICAL();
 8007ae8:	f7f8 fb34 	bl	8000154 <CPU_IntEn>
}
 8007aec:	e004      	b.n	8007af8 <OSSchedUnlock+0x54>
                OS_EXIT_CRITICAL();
 8007aee:	f7f8 fb31 	bl	8000154 <CPU_IntEn>
}
 8007af2:	e001      	b.n	8007af8 <OSSchedUnlock+0x54>
            OS_EXIT_CRITICAL();
 8007af4:	f7f8 fb2e 	bl	8000154 <CPU_IntEn>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20001fac 	.word	0x20001fac
 8007b04:	20001f9c 	.word	0x20001f9c
 8007b08:	20001f9d 	.word	0x20001f9d

08007b0c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8007b10:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <OSStart+0x38>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d113      	bne.n	8007b40 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8007b18:	f000 fbec 	bl	80082f4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <OSStart+0x3c>)
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <OSStart+0x40>)
 8007b22:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8007b24:	4b08      	ldr	r3, [pc, #32]	@ (8007b48 <OSStart+0x3c>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <OSStart+0x44>)
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	4a08      	ldr	r2, [pc, #32]	@ (8007b54 <OSStart+0x48>)
 8007b32:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <OSStart+0x48>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a07      	ldr	r2, [pc, #28]	@ (8007b58 <OSStart+0x4c>)
 8007b3a:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8007b3c:	f7f8 fb49 	bl	80001d2 <OSStartHighRdy>
    }
}
 8007b40:	bf00      	nop
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20001fac 	.word	0x20001fac
 8007b48:	20001f9f 	.word	0x20001f9f
 8007b4c:	20001f9e 	.word	0x20001f9e
 8007b50:	200021c4 	.word	0x200021c4
 8007b54:	200021bc 	.word	0x200021bc
 8007b58:	200021b4 	.word	0x200021b4

08007b5c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8007b66:	2002      	movs	r0, #2
 8007b68:	f001 fb0a 	bl	8009180 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8007b6c:	f7f8 faf0 	bl	8000150 <CPU_IntDis>
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8007b70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba0 <OSStatInit+0x44>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8007b76:	f7f8 faed 	bl	8000154 <CPU_IntEn>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8007b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b7e:	f001 faff 	bl	8009180 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8007b82:	f7f8 fae5 	bl	8000150 <CPU_IntDis>
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8007b86:	4b06      	ldr	r3, [pc, #24]	@ (8007ba0 <OSStatInit+0x44>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a06      	ldr	r2, [pc, #24]	@ (8007ba4 <OSStatInit+0x48>)
 8007b8c:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8007b8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <OSStatInit+0x4c>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8007b94:	f7f8 fade 	bl	8000154 <CPU_IntEn>
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20001fb0 	.word	0x20001fb0
 8007ba4:	20001d90 	.word	0x20001d90
 8007ba8:	20001d98 	.word	0x20001d98

08007bac <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8007bb6:	f7ff fe27 	bl	8007808 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8007bba:	f7f8 fac9 	bl	8000150 <CPU_IntDis>
    OSTime++;
 8007bbe:	4b43      	ldr	r3, [pc, #268]	@ (8007ccc <OSTimeTick+0x120>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a41      	ldr	r2, [pc, #260]	@ (8007ccc <OSTimeTick+0x120>)
 8007bc6:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8007bc8:	f7f8 fac4 	bl	8000154 <CPU_IntEn>
#endif
    if (OSRunning == OS_TRUE) {
 8007bcc:	4b40      	ldr	r3, [pc, #256]	@ (8007cd0 <OSTimeTick+0x124>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d177      	bne.n	8007cc4 <OSTimeTick+0x118>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8007bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd4 <OSTimeTick+0x128>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d00c      	beq.n	8007bf6 <OSTimeTick+0x4a>
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	dc10      	bgt.n	8007c02 <OSTimeTick+0x56>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <OSTimeTick+0x3e>
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d003      	beq.n	8007bf0 <OSTimeTick+0x44>
 8007be8:	e00b      	b.n	8007c02 <OSTimeTick+0x56>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8007bea:	2301      	movs	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
                 break;
 8007bee:	e00e      	b.n	8007c0e <OSTimeTick+0x62>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	72fb      	strb	r3, [r7, #11]
                 break;
 8007bf4:	e00b      	b.n	8007c0e <OSTimeTick+0x62>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8007bfa:	4b36      	ldr	r3, [pc, #216]	@ (8007cd4 <OSTimeTick+0x128>)
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	701a      	strb	r2, [r3, #0]
                 break;
 8007c00:	e005      	b.n	8007c0e <OSTimeTick+0x62>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8007c06:	4b33      	ldr	r3, [pc, #204]	@ (8007cd4 <OSTimeTick+0x128>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
                 break;
 8007c0c:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d056      	beq.n	8007cc2 <OSTimeTick+0x116>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8007c14:	4b30      	ldr	r3, [pc, #192]	@ (8007cd8 <OSTimeTick+0x12c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8007c1a:	e04c      	b.n	8007cb6 <OSTimeTick+0x10a>
            OS_ENTER_CRITICAL();
 8007c1c:	f7f8 fa98 	bl	8000150 <CPU_IntDis>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d041      	beq.n	8007cac <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2c:	1e5a      	subs	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	631a      	str	r2, [r3, #48]	@ 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d138      	bne.n	8007cac <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c40:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c4e:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007c62:	e003      	b.n	8007c6c <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d118      	bne.n	8007cac <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007c80:	4b16      	ldr	r3, [pc, #88]	@ (8007cdc <OSTimeTick+0x130>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	4b14      	ldr	r3, [pc, #80]	@ (8007cdc <OSTimeTick+0x130>)
 8007c8a:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b12      	ldr	r3, [pc, #72]	@ (8007ce0 <OSTimeTick+0x134>)
 8007c96:	5c9a      	ldrb	r2, [r3, r2]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <OSTimeTick+0x134>)
 8007caa:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8007cb2:	f7f8 fa4f 	bl	8000154 <CPU_IntEn>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cbe:	d1ad      	bne.n	8007c1c <OSTimeTick+0x70>
 8007cc0:	e000      	b.n	8007cc4 <OSTimeTick+0x118>
            return;
 8007cc2:	bf00      	nop
        }
    }
}
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20002b3c 	.word	0x20002b3c
 8007cd0:	20001fac 	.word	0x20001fac
 8007cd4:	20002a54 	.word	0x20002a54
 8007cd8:	200021c0 	.word	0x200021c0
 8007cdc:	20001fa0 	.word	0x20001fa0
 8007ce0:	20001fa4 	.word	0x20001fa4

08007ce4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	460b      	mov	r3, r1
 8007d00:	71fb      	strb	r3, [r7, #7]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	7a9b      	ldrb	r3, [r3, #10]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007dc4 <OS_EventTaskRdy+0xd4>)
 8007d0e:	5c9b      	ldrb	r3, [r3, r2]
 8007d10:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	7adb      	ldrb	r3, [r3, #11]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <OS_EventTaskRdy+0xd4>)
 8007d1e:	5c9b      	ldrb	r3, [r3, r2]
 8007d20:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	7dbb      	ldrb	r3, [r7, #22]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8007d2e:	7d7b      	ldrb	r3, [r7, #21]
 8007d30:	4a25      	ldr	r2, [pc, #148]	@ (8007dc8 <OS_EventTaskRdy+0xd8>)
 8007d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d36:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	@ 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	625a      	str	r2, [r3, #36]	@ 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	4013      	ands	r3, r2
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	79ba      	ldrb	r2, [r7, #6]
 8007d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007d76:	4b15      	ldr	r3, [pc, #84]	@ (8007dcc <OS_EventTaskRdy+0xdc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <OS_EventTaskRdy+0xdc>)
 8007d80:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	4a12      	ldr	r2, [pc, #72]	@ (8007dd0 <OS_EventTaskRdy+0xe0>)
 8007d86:	5cd1      	ldrb	r1, [r2, r3]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	b2d1      	uxtb	r1, r2
 8007d94:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd0 <OS_EventTaskRdy+0xe0>)
 8007d96:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	6938      	ldr	r0, [r7, #16]
 8007d9c:	f000 f870 	bl	8007e80 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6938      	ldr	r0, [r7, #16]
 8007db0:	f000 f898 	bl	8007ee4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8007dba:	7d7b      	ldrb	r3, [r7, #21]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	0800d29c 	.word	0x0800d29c
 8007dc8:	200021c4 	.word	0x200021c4
 8007dcc:	20001fa0 	.word	0x20001fa0
 8007dd0:	20001fa4 	.word	0x20001fa4

08007dd4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8007ddc:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8007de4:	4b23      	ldr	r3, [pc, #140]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	7ada      	ldrb	r2, [r3, #11]
 8007df4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007dfc:	491d      	ldr	r1, [pc, #116]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007dfe:	6809      	ldr	r1, [r1, #0]
 8007e00:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	440b      	add	r3, r1
 8007e0c:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7a9a      	ldrb	r2, [r3, #10]
 8007e12:	4b18      	ldr	r3, [pc, #96]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8007e22:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e2a:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4a12      	ldr	r2, [pc, #72]	@ (8007e78 <OS_EventTaskWait+0xa4>)
 8007e30:	5cd1      	ldrb	r1, [r2, r3]
 8007e32:	4b10      	ldr	r3, [pc, #64]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	400a      	ands	r2, r1
 8007e42:	b2d1      	uxtb	r1, r2
 8007e44:	4a0c      	ldr	r2, [pc, #48]	@ (8007e78 <OS_EventTaskWait+0xa4>)
 8007e46:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e78 <OS_EventTaskWait+0xa4>)
 8007e4c:	5cd3      	ldrb	r3, [r2, r3]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8007e52:	4b08      	ldr	r3, [pc, #32]	@ (8007e74 <OS_EventTaskWait+0xa0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007e5a:	43db      	mvns	r3, r3
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <OS_EventTaskWait+0xa8>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	4013      	ands	r3, r2
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <OS_EventTaskWait+0xa8>)
 8007e68:	701a      	strb	r2, [r3, #0]
    }
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	200021b4 	.word	0x200021b4
 8007e78:	20001fa4 	.word	0x20001fa4
 8007e7c:	20001fa0 	.word	0x20001fa0

08007e80 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e90:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	4413      	add	r3, r2
 8007e98:	7ad9      	ldrb	r1, [r3, #11]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	400a      	ands	r2, r1
 8007ea8:	b2d1      	uxtb	r1, r2
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	460a      	mov	r2, r1
 8007eb0:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	7adb      	ldrb	r3, [r3, #11]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	7a9a      	ldrb	r2, [r3, #10]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	4013      	ands	r3, r2
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	61da      	str	r2, [r3, #28]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ef4:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007efc:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007f04:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8007f10:	e022      	b.n	8007f58 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	7ad9      	ldrb	r1, [r3, #11]
 8007f1a:	7b7b      	ldrb	r3, [r7, #13]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	400a      	ands	r2, r1
 8007f24:	b2d1      	uxtb	r1, r2
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4413      	add	r3, r2
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	7adb      	ldrb	r3, [r3, #11]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d108      	bne.n	8007f4c <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	7a9a      	ldrb	r2, [r3, #10]
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	4013      	ands	r3, r2
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1d9      	bne.n	8007f12 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
 8007f7c:	e007      	b.n	8007f8e <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	2200      	movs	r2, #0
 8007f86:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	d9f4      	bls.n	8007f7e <OS_EventWaitListInit+0x14>
    }
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8007fa6:	21f0      	movs	r1, #240	@ 0xf0
 8007fa8:	481f      	ldr	r0, [pc, #124]	@ (8008028 <OS_InitEventList+0x88>)
 8007faa:	f000 f94b 	bl	8008244 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007fae:	2300      	movs	r3, #0
 8007fb0:	81fb      	strh	r3, [r7, #14]
 8007fb2:	e01e      	b.n	8007ff2 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8007fb4:	89fb      	ldrh	r3, [r7, #14]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8007fba:	89fa      	ldrh	r2, [r7, #14]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4a18      	ldr	r2, [pc, #96]	@ (8008028 <OS_InitEventList+0x88>)
 8007fc6:	4413      	add	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	4a14      	ldr	r2, [pc, #80]	@ (8008028 <OS_InitEventList+0x88>)
 8007fd6:	4413      	add	r3, r2
 8007fd8:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4a10      	ldr	r2, [pc, #64]	@ (800802c <OS_InitEventList+0x8c>)
 8007fea:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007fec:	89fb      	ldrh	r3, [r7, #14]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	81fb      	strh	r3, [r7, #14]
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d9dd      	bls.n	8007fb4 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8007ff8:	89fa      	ldrh	r2, [r7, #14]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <OS_InitEventList+0x88>)
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4a05      	ldr	r2, [pc, #20]	@ (800802c <OS_InitEventList+0x8c>)
 8008018:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800801a:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <OS_InitEventList+0x90>)
 800801c:	4a02      	ldr	r2, [pc, #8]	@ (8008028 <OS_InitEventList+0x88>)
 800801e:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20001c48 	.word	0x20001c48
 800802c:	0800d148 	.word	0x0800d148
 8008030:	20001c44 	.word	0x20001c44

08008034 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8008038:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <OS_InitMisc+0x50>)
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <OS_InitMisc+0x54>)
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8008044:	4b11      	ldr	r3, [pc, #68]	@ (800808c <OS_InitMisc+0x58>)
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800804a:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <OS_InitMisc+0x5c>)
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8008050:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <OS_InitMisc+0x60>)
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8008056:	4b10      	ldr	r3, [pc, #64]	@ (8008098 <OS_InitMisc+0x64>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 800805c:	4b0f      	ldr	r3, [pc, #60]	@ (800809c <OS_InitMisc+0x68>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8008062:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <OS_InitMisc+0x6c>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8008068:	4b0e      	ldr	r3, [pc, #56]	@ (80080a4 <OS_InitMisc+0x70>)
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 800806e:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <OS_InitMisc+0x74>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8008074:	4b0d      	ldr	r3, [pc, #52]	@ (80080ac <OS_InitMisc+0x78>)
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
#endif
}
 800807a:	bf00      	nop
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20002b3c 	.word	0x20002b3c
 8008088:	20001f9c 	.word	0x20001f9c
 800808c:	20001f9d 	.word	0x20001f9d
 8008090:	20001fad 	.word	0x20001fad
 8008094:	20001fac 	.word	0x20001fac
 8008098:	20001c40 	.word	0x20001c40
 800809c:	20001fb0 	.word	0x20001fb0
 80080a0:	20001d94 	.word	0x20001d94
 80080a4:	20001d90 	.word	0x20001d90
 80080a8:	20001d98 	.word	0x20001d98
 80080ac:	20002b38 	.word	0x20002b38

080080b0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 80080b6:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <OS_InitRdyList+0x48>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80080bc:	2300      	movs	r3, #0
 80080be:	71fb      	strb	r3, [r7, #7]
 80080c0:	e006      	b.n	80080d0 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4a0d      	ldr	r2, [pc, #52]	@ (80080fc <OS_InitRdyList+0x4c>)
 80080c6:	2100      	movs	r1, #0
 80080c8:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	3301      	adds	r3, #1
 80080ce:	71fb      	strb	r3, [r7, #7]
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b07      	cmp	r3, #7
 80080d4:	d9f5      	bls.n	80080c2 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 80080d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <OS_InitRdyList+0x50>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 80080dc:	4b09      	ldr	r3, [pc, #36]	@ (8008104 <OS_InitRdyList+0x54>)
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <OS_InitRdyList+0x58>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 80080e8:	4b08      	ldr	r3, [pc, #32]	@ (800810c <OS_InitRdyList+0x5c>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	20001fa0 	.word	0x20001fa0
 80080fc:	20001fa4 	.word	0x20001fa4
 8008100:	20001f9e 	.word	0x20001f9e
 8008104:	20001f9f 	.word	0x20001f9f
 8008108:	200021bc 	.word	0x200021bc
 800810c:	200021b4 	.word	0x200021b4

08008110 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 8008116:	2303      	movs	r3, #3
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	2300      	movs	r3, #0
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	2380      	movs	r3, #128	@ 0x80
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <OS_InitTaskIdle+0x3c>)
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	233f      	movs	r3, #63	@ 0x3f
 800812e:	4a08      	ldr	r2, [pc, #32]	@ (8008150 <OS_InitTaskIdle+0x40>)
 8008130:	2100      	movs	r1, #0
 8008132:	4808      	ldr	r0, [pc, #32]	@ (8008154 <OS_InitTaskIdle+0x44>)
 8008134:	f000 fcf2 	bl	8008b1c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8008138:	1dfb      	adds	r3, r7, #7
 800813a:	461a      	mov	r2, r3
 800813c:	4906      	ldr	r1, [pc, #24]	@ (8008158 <OS_InitTaskIdle+0x48>)
 800813e:	203f      	movs	r0, #63	@ 0x3f
 8008140:	f000 fe40 	bl	8008dc4 <OSTaskNameSet>
#endif
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20001fb4 	.word	0x20001fb4
 8008150:	200021b0 	.word	0x200021b0
 8008154:	0800833d 	.word	0x0800833d
 8008158:	0800d14c 	.word	0x0800d14c

0800815c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8008162:	2303      	movs	r3, #3
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	2300      	movs	r3, #0
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	2380      	movs	r3, #128	@ 0x80
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <OS_InitTaskStat+0x3c>)
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	233e      	movs	r3, #62	@ 0x3e
 800817a:	4a08      	ldr	r2, [pc, #32]	@ (800819c <OS_InitTaskStat+0x40>)
 800817c:	2100      	movs	r1, #0
 800817e:	4808      	ldr	r0, [pc, #32]	@ (80081a0 <OS_InitTaskStat+0x44>)
 8008180:	f000 fccc 	bl	8008b1c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8008184:	1dfb      	adds	r3, r7, #7
 8008186:	461a      	mov	r2, r3
 8008188:	4906      	ldr	r1, [pc, #24]	@ (80081a4 <OS_InitTaskStat+0x48>)
 800818a:	203e      	movs	r0, #62	@ 0x3e
 800818c:	f000 fe1a 	bl	8008dc4 <OSTaskNameSet>
#endif
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20001d9c 	.word	0x20001d9c
 800819c:	20001f98 	.word	0x20001f98
 80081a0:	08008369 	.word	0x08008369
 80081a4:	0800d15c 	.word	0x0800d15c

080081a8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80081ae:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 80081b2:	481f      	ldr	r0, [pc, #124]	@ (8008230 <OS_InitTCBList+0x88>)
 80081b4:	f000 f846 	bl	8008244 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 80081b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80081bc:	481d      	ldr	r0, [pc, #116]	@ (8008234 <OS_InitTCBList+0x8c>)
 80081be:	f000 f841 	bl	8008244 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
 80081c6:	e019      	b.n	80081fc <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	3301      	adds	r3, #1
 80081cc:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	2258      	movs	r2, #88	@ 0x58
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <OS_InitTCBList+0x88>)
 80081d8:	4413      	add	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2258      	movs	r2, #88	@ 0x58
 80081e0:	fb02 f303 	mul.w	r3, r2, r3
 80081e4:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <OS_InitTCBList+0x88>)
 80081e6:	4413      	add	r3, r2
 80081e8:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <OS_InitTCBList+0x90>)
 80081f4:	651a      	str	r2, [r3, #80]	@ 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	3301      	adds	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b14      	cmp	r3, #20
 8008200:	d9e2      	bls.n	80081c8 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2258      	movs	r2, #88	@ 0x58
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	4a09      	ldr	r2, [pc, #36]	@ (8008230 <OS_InitTCBList+0x88>)
 800820c:	4413      	add	r3, r2
 800820e:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4a07      	ldr	r2, [pc, #28]	@ (8008238 <OS_InitTCBList+0x90>)
 800821a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 800821c:	4b07      	ldr	r3, [pc, #28]	@ (800823c <OS_InitTCBList+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8008222:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <OS_InitTCBList+0x98>)
 8008224:	4a02      	ldr	r2, [pc, #8]	@ (8008230 <OS_InitTCBList+0x88>)
 8008226:	601a      	str	r2, [r3, #0]
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	200022c4 	.word	0x200022c4
 8008234:	200021c4 	.word	0x200021c4
 8008238:	0800d148 	.word	0x0800d148
 800823c:	200021c0 	.word	0x200021c0
 8008240:	200021b8 	.word	0x200021b8

08008244 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8008250:	e007      	b.n	8008262 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
        size--;
 800825c:	887b      	ldrh	r3, [r7, #2]
 800825e:	3b01      	subs	r3, #1
 8008260:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8008262:	887b      	ldrh	r3, [r7, #2]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1f4      	bne.n	8008252 <OS_MemClr+0xe>
    }
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800827a:	2300      	movs	r3, #0
 800827c:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 800827e:	f7f7 ff67 	bl	8000150 <CPU_IntDis>
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8008282:	4b15      	ldr	r3, [pc, #84]	@ (80082d8 <OS_Sched+0x64>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d11f      	bne.n	80082ca <OS_Sched+0x56>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 800828a:	4b14      	ldr	r3, [pc, #80]	@ (80082dc <OS_Sched+0x68>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d11b      	bne.n	80082ca <OS_Sched+0x56>
            OS_SchedNew();
 8008292:	f000 f82f 	bl	80082f4 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8008296:	4b12      	ldr	r3, [pc, #72]	@ (80082e0 <OS_Sched+0x6c>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	4b11      	ldr	r3, [pc, #68]	@ (80082e4 <OS_Sched+0x70>)
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	4a11      	ldr	r2, [pc, #68]	@ (80082e8 <OS_Sched+0x74>)
 80082a4:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80082a6:	4b0e      	ldr	r3, [pc, #56]	@ (80082e0 <OS_Sched+0x6c>)
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	4b10      	ldr	r3, [pc, #64]	@ (80082ec <OS_Sched+0x78>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d00b      	beq.n	80082ca <OS_Sched+0x56>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 80082b2:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <OS_Sched+0x74>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082b8:	3201      	adds	r2, #1
 80082ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 80082bc:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <OS_Sched+0x7c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a0b      	ldr	r2, [pc, #44]	@ (80082f0 <OS_Sched+0x7c>)
 80082c4:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 80082c6:	f7f7 ffc4 	bl	8000252 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 80082ca:	f7f7 ff43 	bl	8000154 <CPU_IntEn>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001f9c 	.word	0x20001f9c
 80082dc:	20001f9d 	.word	0x20001f9d
 80082e0:	20001f9f 	.word	0x20001f9f
 80082e4:	200021c4 	.word	0x200021c4
 80082e8:	200021bc 	.word	0x200021bc
 80082ec:	20001f9e 	.word	0x20001f9e
 80082f0:	20001c40 	.word	0x20001c40

080082f4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 80082fa:	4b0c      	ldr	r3, [pc, #48]	@ (800832c <OS_SchedNew+0x38>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <OS_SchedNew+0x3c>)
 8008302:	5c9b      	ldrb	r3, [r3, r2]
 8008304:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	b2da      	uxtb	r2, r3
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	4909      	ldr	r1, [pc, #36]	@ (8008334 <OS_SchedNew+0x40>)
 8008310:	5ccb      	ldrb	r3, [r1, r3]
 8008312:	4619      	mov	r1, r3
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <OS_SchedNew+0x3c>)
 8008316:	5c5b      	ldrb	r3, [r3, r1]
 8008318:	4413      	add	r3, r2
 800831a:	b2da      	uxtb	r2, r3
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <OS_SchedNew+0x44>)
 800831e:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20001fa0 	.word	0x20001fa0
 8008330:	0800d29c 	.word	0x0800d29c
 8008334:	20001fa4 	.word	0x20001fa4
 8008338:	20001f9f 	.word	0x20001f9f

0800833c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8008348:	f7f7 ff02 	bl	8000150 <CPU_IntDis>
        OSIdleCtr++;
 800834c:	4b05      	ldr	r3, [pc, #20]	@ (8008364 <OS_TaskIdle+0x28>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	4a04      	ldr	r2, [pc, #16]	@ (8008364 <OS_TaskIdle+0x28>)
 8008354:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8008356:	f7f7 fefd 	bl	8000154 <CPU_IntEn>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800835a:	f7ff f9a1 	bl	80076a0 <OSTaskIdleHook>
    for (;;) {
 800835e:	bf00      	nop
 8008360:	e7f2      	b.n	8008348 <OS_TaskIdle+0xc>
 8008362:	bf00      	nop
 8008364:	20001fb0 	.word	0x20001fb0

08008368 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8008374:	e003      	b.n	800837e <OS_TaskStat+0x16>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8008376:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800837a:	f000 ff01 	bl	8009180 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 800837e:	4b2d      	ldr	r3, [pc, #180]	@ (8008434 <OS_TaskStat+0xcc>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f7      	beq.n	8008376 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8008386:	4b2c      	ldr	r3, [pc, #176]	@ (8008438 <OS_TaskStat+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a2c      	ldr	r2, [pc, #176]	@ (800843c <OS_TaskStat+0xd4>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	4a29      	ldr	r2, [pc, #164]	@ (8008438 <OS_TaskStat+0xd0>)
 8008394:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8008396:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <OS_TaskStat+0xd0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <OS_TaskStat+0x42>
        OSCPUUsage = 0u;
 800839e:	4b28      	ldr	r3, [pc, #160]	@ (8008440 <OS_TaskStat+0xd8>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80083a4:	20ff      	movs	r0, #255	@ 0xff
 80083a6:	f000 fe3d 	bl	8009024 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 80083aa:	f7f7 fed1 	bl	8000150 <CPU_IntDis>
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 80083ae:	4b22      	ldr	r3, [pc, #136]	@ (8008438 <OS_TaskStat+0xd0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2264      	movs	r2, #100	@ 0x64
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	4a22      	ldr	r2, [pc, #136]	@ (8008444 <OS_TaskStat+0xdc>)
 80083ba:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80083bc:	f7f7 feca 	bl	8000154 <CPU_IntEn>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80083c0:	2001      	movs	r0, #1
 80083c2:	f000 fedd 	bl	8009180 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80083c6:	f7f7 fec3 	bl	8000150 <CPU_IntDis>
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 80083ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008444 <OS_TaskStat+0xdc>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 80083d0:	f7f7 fec0 	bl	8000154 <CPU_IntEn>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 80083d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80083d8:	f000 fed2 	bl	8009180 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80083dc:	f7f7 feb8 	bl	8000150 <CPU_IntDis>
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 80083e0:	4b18      	ldr	r3, [pc, #96]	@ (8008444 <OS_TaskStat+0xdc>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a18      	ldr	r2, [pc, #96]	@ (8008448 <OS_TaskStat+0xe0>)
 80083e6:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80083e8:	f7f7 feb4 	bl	8000154 <CPU_IntEn>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 80083ec:	4b16      	ldr	r3, [pc, #88]	@ (8008448 <OS_TaskStat+0xe0>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <OS_TaskStat+0xd0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8008402:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008406:	2b00      	cmp	r3, #0
 8008408:	db03      	blt.n	8008412 <OS_TaskStat+0xaa>
            OSCPUUsage   = (INT8U)usage;
 800840a:	7afa      	ldrb	r2, [r7, #11]
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <OS_TaskStat+0xd8>)
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e00a      	b.n	8008428 <OS_TaskStat+0xc0>
        } else {
            OSCPUUsage   = 0u;
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <OS_TaskStat+0xd8>)
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8008418:	4b0b      	ldr	r3, [pc, #44]	@ (8008448 <OS_TaskStat+0xe0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a07      	ldr	r2, [pc, #28]	@ (800843c <OS_TaskStat+0xd4>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	4a04      	ldr	r2, [pc, #16]	@ (8008438 <OS_TaskStat+0xd0>)
 8008426:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8008428:	f7ff f94b 	bl	80076c2 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800842c:	f000 f80e 	bl	800844c <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8008430:	e7c6      	b.n	80083c0 <OS_TaskStat+0x58>
 8008432:	bf00      	nop
 8008434:	20001d98 	.word	0x20001d98
 8008438:	20001d90 	.word	0x20001d90
 800843c:	51eb851f 	.word	0x51eb851f
 8008440:	20001d8c 	.word	0x20001d8c
 8008444:	20001fb0 	.word	0x20001fb0
 8008448:	20001d94 	.word	0x20001d94

0800844c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
 8008456:	e023      	b.n	80084a0 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8008458:	463a      	mov	r2, r7
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	4611      	mov	r1, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fd78 	bl	8008f54 <OSTaskStkChk>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d115      	bne.n	800849a <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	4a0f      	ldr	r2, [pc, #60]	@ (80084b0 <OS_TaskStatStkChk+0x64>)
 8008472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008476:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d00a      	beq.n	800849a <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	441a      	add	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	649a      	str	r2, [r3, #72]	@ 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	3301      	adds	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80084a4:	d9d8      	bls.n	8008458 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200021c4 	.word	0x200021c4

080084b4 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	461a      	mov	r2, r3
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
 80084c4:	4613      	mov	r3, r2
 80084c6:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 80084cc:	f7f7 fe40 	bl	8000150 <CPU_IntDis>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 80084d0:	4b66      	ldr	r3, [pc, #408]	@ (800866c <OS_TCBInit+0x1b8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80c0 	beq.w	800865e <OS_TCBInit+0x1aa>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4a62      	ldr	r2, [pc, #392]	@ (800866c <OS_TCBInit+0x1b8>)
 80084e4:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80084e6:	f7f7 fe35 	bl	8000154 <CPU_IntEn>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	7bfa      	ldrb	r2, [r7, #15]
 80084f4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2200      	movs	r2, #0
 800850c:	631a      	str	r2, [r3, #48]	@ 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008512:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008518:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008524:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	89ba      	ldrh	r2, [r7, #12]
 800852a:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	b2da      	uxtb	r2, r3
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	b2da      	uxtb	r2, r3
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008554:	461a      	mov	r2, r3
 8008556:	2301      	movs	r3, #1
 8008558:	4093      	lsls	r3, r2
 800855a:	b2da      	uxtb	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8008568:	461a      	mov	r2, r3
 800856a:	2301      	movs	r3, #1
 800856c:	4093      	lsls	r3, r2
 800856e:	b2da      	uxtb	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2200      	movs	r2, #0
 800857a:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2200      	movs	r2, #0
 8008580:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2200      	movs	r2, #0
 800858c:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2200      	movs	r2, #0
 8008592:	63da      	str	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2200      	movs	r2, #0
 8008598:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2200      	movs	r2, #0
 800859e:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2200      	movs	r2, #0
 80085a4:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2200      	movs	r2, #0
 80085aa:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4a30      	ldr	r2, [pc, #192]	@ (8008670 <OS_TCBInit+0x1bc>)
 80085b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]
 80085b6:	e009      	b.n	80085cc <OS_TCBInit+0x118>
            ptcb->OSTCBRegTbl[i] = 0u;
 80085b8:	7ffb      	ldrb	r3, [r7, #31]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	3314      	adds	r3, #20
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	2200      	movs	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80085c6:	7ffb      	ldrb	r3, [r7, #31]
 80085c8:	3301      	adds	r3, #1
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	7ffb      	ldrb	r3, [r7, #31]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f2      	beq.n	80085b8 <OS_TCBInit+0x104>
        }
#endif

        OSTCBInitHook(ptcb);
 80085d2:	6978      	ldr	r0, [r7, #20]
 80085d4:	f7ff f90c 	bl	80077f0 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 80085d8:	f7f7 fdba 	bl	8000150 <CPU_IntDis>
        OSTCBPrioTbl[prio] = ptcb;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4925      	ldr	r1, [pc, #148]	@ (8008674 <OS_TCBInit+0x1c0>)
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80085e6:	f7f7 fdb5 	bl	8000154 <CPU_IntEn>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7ff f842 	bl	8007674 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80085f0:	f7f7 fdae 	bl	8000150 <CPU_IntDis>
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 80085f4:	4b20      	ldr	r3, [pc, #128]	@ (8008678 <OS_TCBInit+0x1c4>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8008602:	4b1d      	ldr	r3, [pc, #116]	@ (8008678 <OS_TCBInit+0x1c4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <OS_TCBInit+0x15e>
            OSTCBList->OSTCBPrev = ptcb;
 800860a:	4b1b      	ldr	r3, [pc, #108]	@ (8008678 <OS_TCBInit+0x1c4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8008612:	4a19      	ldr	r2, [pc, #100]	@ (8008678 <OS_TCBInit+0x1c4>)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800861e:	4b17      	ldr	r3, [pc, #92]	@ (800867c <OS_TCBInit+0x1c8>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	4313      	orrs	r3, r2
 8008624:	b2da      	uxtb	r2, r3
 8008626:	4b15      	ldr	r3, [pc, #84]	@ (800867c <OS_TCBInit+0x1c8>)
 8008628:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008630:	461a      	mov	r2, r3
 8008632:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <OS_TCBInit+0x1cc>)
 8008634:	5c9a      	ldrb	r2, [r3, r2]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800863c:	6979      	ldr	r1, [r7, #20]
 800863e:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8008642:	4313      	orrs	r3, r2
 8008644:	b2da      	uxtb	r2, r3
 8008646:	4b0e      	ldr	r3, [pc, #56]	@ (8008680 <OS_TCBInit+0x1cc>)
 8008648:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800864a:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <OS_TCBInit+0x1d0>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <OS_TCBInit+0x1d0>)
 8008654:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8008656:	f7f7 fd7d 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_NONE);
 800865a:	2300      	movs	r3, #0
 800865c:	e002      	b.n	8008664 <OS_TCBInit+0x1b0>
    }
    OS_EXIT_CRITICAL();
 800865e:	f7f7 fd79 	bl	8000154 <CPU_IntEn>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8008662:	2342      	movs	r3, #66	@ 0x42
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200021b8 	.word	0x200021b8
 8008670:	0800d148 	.word	0x0800d148
 8008674:	200021c4 	.word	0x200021c4
 8008678:	200021c0 	.word	0x200021c0
 800867c:	20001fa0 	.word	0x20001fa0
 8008680:	20001fa4 	.word	0x20001fa4
 8008684:	20001fad 	.word	0x20001fad

08008688 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 800868e:	2150      	movs	r1, #80	@ 0x50
 8008690:	481b      	ldr	r0, [pc, #108]	@ (8008700 <OS_FlagInit+0x78>)
 8008692:	f7ff fdd7 	bl	8008244 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8008696:	2300      	movs	r3, #0
 8008698:	81fb      	strh	r3, [r7, #14]
 800869a:	e018      	b.n	80086ce <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 800869c:	89fb      	ldrh	r3, [r7, #14]
 800869e:	3301      	adds	r3, #1
 80086a0:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 80086a2:	89fb      	ldrh	r3, [r7, #14]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	4a16      	ldr	r2, [pc, #88]	@ (8008700 <OS_FlagInit+0x78>)
 80086a8:	4413      	add	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	4a13      	ldr	r2, [pc, #76]	@ (8008700 <OS_FlagInit+0x78>)
 80086b2:	4413      	add	r3, r2
 80086b4:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008704 <OS_FlagInit+0x7c>)
 80086c6:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80086c8:	89fb      	ldrh	r3, [r7, #14]
 80086ca:	3301      	adds	r3, #1
 80086cc:	81fb      	strh	r3, [r7, #14]
 80086ce:	89fb      	ldrh	r3, [r7, #14]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d9e3      	bls.n	800869c <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80086d4:	89fb      	ldrh	r3, [r7, #14]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	4a09      	ldr	r2, [pc, #36]	@ (8008700 <OS_FlagInit+0x78>)
 80086da:	4413      	add	r3, r2
 80086dc:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4a05      	ldr	r2, [pc, #20]	@ (8008704 <OS_FlagInit+0x7c>)
 80086ee:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <OS_FlagInit+0x80>)
 80086f2:	4a03      	ldr	r2, [pc, #12]	@ (8008700 <OS_FlagInit+0x78>)
 80086f4:	601a      	str	r2, [r3, #0]
#endif
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20001d38 	.word	0x20001d38
 8008704:	0800d16c 	.word	0x0800d16c
 8008708:	20001d88 	.word	0x20001d88

0800870c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10c      	bne.n	8008740 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2200      	movs	r2, #0
 800873c:	605a      	str	r2, [r3, #4]
 800873e:	e008      	b.n	8008752 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 800876e:	2178      	movs	r1, #120	@ 0x78
 8008770:	481a      	ldr	r0, [pc, #104]	@ (80087dc <OS_MemInit+0x74>)
 8008772:	f7ff fd67 	bl	8008244 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8008776:	2300      	movs	r3, #0
 8008778:	80fb      	strh	r3, [r7, #6]
 800877a:	e017      	b.n	80087ac <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	4613      	mov	r3, r2
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	4413      	add	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	4a15      	ldr	r2, [pc, #84]	@ (80087dc <OS_MemInit+0x74>)
 8008788:	4413      	add	r3, r2
 800878a:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	4a10      	ldr	r2, [pc, #64]	@ (80087dc <OS_MemInit+0x74>)
 800879a:	441a      	add	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4a0f      	ldr	r2, [pc, #60]	@ (80087e0 <OS_MemInit+0x78>)
 80087a4:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	3301      	adds	r3, #1
 80087aa:	80fb      	strh	r3, [r7, #6]
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d9e4      	bls.n	800877c <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 80087b2:	88fa      	ldrh	r2, [r7, #6]
 80087b4:	4613      	mov	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	4413      	add	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4a07      	ldr	r2, [pc, #28]	@ (80087dc <OS_MemInit+0x74>)
 80087be:	4413      	add	r3, r2
 80087c0:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	4a05      	ldr	r2, [pc, #20]	@ (80087e0 <OS_MemInit+0x78>)
 80087cc:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <OS_MemInit+0x7c>)
 80087d0:	4a02      	ldr	r2, [pc, #8]	@ (80087dc <OS_MemInit+0x74>)
 80087d2:	601a      	str	r2, [r3, #0]
#endif
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20002a5c 	.word	0x20002a5c
 80087e0:	0800d170 	.word	0x0800d170
 80087e4:	20002a58 	.word	0x20002a58

080087e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80087ee:	2160      	movs	r1, #96	@ 0x60
 80087f0:	4819      	ldr	r0, [pc, #100]	@ (8008858 <OS_QInit+0x70>)
 80087f2:	f7ff fd27 	bl	8008244 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80087f6:	2300      	movs	r3, #0
 80087f8:	81fb      	strh	r3, [r7, #14]
 80087fa:	e018      	b.n	800882e <OS_QInit+0x46>
        ix_next = ix + 1u;
 80087fc:	89fb      	ldrh	r3, [r7, #14]
 80087fe:	3301      	adds	r3, #1
 8008800:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8008802:	89fa      	ldrh	r2, [r7, #14]
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <OS_QInit+0x70>)
 800880e:	4413      	add	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	4613      	mov	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	4a0e      	ldr	r2, [pc, #56]	@ (8008858 <OS_QInit+0x70>)
 800881e:	4413      	add	r3, r2
 8008820:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8008828:	89fb      	ldrh	r3, [r7, #14]
 800882a:	3301      	adds	r3, #1
 800882c:	81fb      	strh	r3, [r7, #14]
 800882e:	89fb      	ldrh	r3, [r7, #14]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d9e3      	bls.n	80087fc <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8008834:	89fa      	ldrh	r2, [r7, #14]
 8008836:	4613      	mov	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	4413      	add	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4a06      	ldr	r2, [pc, #24]	@ (8008858 <OS_QInit+0x70>)
 8008840:	4413      	add	r3, r2
 8008842:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 800884a:	4b04      	ldr	r3, [pc, #16]	@ (800885c <OS_QInit+0x74>)
 800884c:	4a02      	ldr	r2, [pc, #8]	@ (8008858 <OS_QInit+0x70>)
 800884e:	601a      	str	r2, [r3, #0]
#endif
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20002ad8 	.word	0x20002ad8
 800885c:	20002ad4 	.word	0x20002ad4

08008860 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 800886e:	4b16      	ldr	r3, [pc, #88]	@ (80088c8 <OSSemCreate+0x68>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8008876:	2300      	movs	r3, #0
 8008878:	e022      	b.n	80088c0 <OSSemCreate+0x60>
    }
    OS_ENTER_CRITICAL();
 800887a:	f7f7 fc69 	bl	8000150 <CPU_IntDis>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 800887e:	4b13      	ldr	r3, [pc, #76]	@ (80088cc <OSSemCreate+0x6c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8008884:	4b11      	ldr	r3, [pc, #68]	@ (80088cc <OSSemCreate+0x6c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <OSSemCreate+0x36>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 800888c:	4b0f      	ldr	r3, [pc, #60]	@ (80088cc <OSSemCreate+0x6c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4a0e      	ldr	r2, [pc, #56]	@ (80088cc <OSSemCreate+0x6c>)
 8008894:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8008896:	f7f7 fc5d 	bl	8000154 <CPU_IntEn>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00e      	beq.n	80088be <OSSemCreate+0x5e>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2203      	movs	r2, #3
 80088a4:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	88fa      	ldrh	r2, [r7, #6]
 80088aa:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4a06      	ldr	r2, [pc, #24]	@ (80088d0 <OSSemCreate+0x70>)
 80088b6:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 80088b8:	68b8      	ldr	r0, [r7, #8]
 80088ba:	f7ff fb56 	bl	8007f6a <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 80088be:	68bb      	ldr	r3, [r7, #8]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20001f9c 	.word	0x20001f9c
 80088cc:	20001c44 	.word	0x20001c44
 80088d0:	0800d174 	.word	0x0800d174

080088d4 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2204      	movs	r2, #4
 80088ee:	701a      	strb	r2, [r3, #0]
        return;
 80088f0:	e075      	b.n	80089de <OSSemPend+0x10a>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d003      	beq.n	8008902 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008900:	e06d      	b.n	80089de <OSSemPend+0x10a>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8008902:	4b38      	ldr	r3, [pc, #224]	@ (80089e4 <OSSemPend+0x110>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008910:	e065      	b.n	80089de <OSSemPend+0x10a>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8008912:	4b35      	ldr	r3, [pc, #212]	@ (80089e8 <OSSemPend+0x114>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	220d      	movs	r2, #13
 800891e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008920:	e05d      	b.n	80089de <OSSemPend+0x10a>
    }
    OS_ENTER_CRITICAL();
 8008922:	f7f7 fc15 	bl	8000150 <CPU_IntDis>
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	891b      	ldrh	r3, [r3, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <OSSemPend+0x72>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	891b      	ldrh	r3, [r3, #8]
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800893a:	f7f7 fc0b 	bl	8000154 <CPU_IntEn>
        *perr = OS_ERR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008944:	e04b      	b.n	80089de <OSSemPend+0x10a>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8008946:	4b29      	ldr	r3, [pc, #164]	@ (80089ec <OSSemPend+0x118>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800894e:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <OSSemPend+0x118>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800895c:	4b23      	ldr	r3, [pc, #140]	@ (80089ec <OSSemPend+0x118>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8008966:	4b21      	ldr	r3, [pc, #132]	@ (80089ec <OSSemPend+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	631a      	str	r2, [r3, #48]	@ 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff fa30 	bl	8007dd4 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8008974:	f7f7 fbee 	bl	8000154 <CPU_IntEn>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8008978:	f7ff fc7c 	bl	8008274 <OS_Sched>
    OS_ENTER_CRITICAL();
 800897c:	f7f7 fbe8 	bl	8000150 <CPU_IntDis>
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8008980:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <OSSemPend+0x118>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <OSSemPend+0xbe>
 800898c:	2b02      	cmp	r3, #2
 800898e:	d004      	beq.n	800899a <OSSemPend+0xc6>
 8008990:	e007      	b.n	80089a2 <OSSemPend+0xce>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
             break;
 8008998:	e00d      	b.n	80089b6 <OSSemPend+0xe2>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220e      	movs	r2, #14
 800899e:	701a      	strb	r2, [r3, #0]
             break;
 80089a0:	e009      	b.n	80089b6 <OSSemPend+0xe2>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 80089a2:	4b12      	ldr	r3, [pc, #72]	@ (80089ec <OSSemPend+0x118>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fa69 	bl	8007e80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	220a      	movs	r2, #10
 80089b2:	701a      	strb	r2, [r3, #0]
             break;
 80089b4:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <OSSemPend+0x118>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80089c0:	4b0a      	ldr	r3, [pc, #40]	@ (80089ec <OSSemPend+0x118>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80089ca:	4b08      	ldr	r3, [pc, #32]	@ (80089ec <OSSemPend+0x118>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80089d2:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <OSSemPend+0x118>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2200      	movs	r2, #0
 80089d8:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 80089da:	f7f7 fbbb 	bl	8000154 <CPU_IntEn>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20001f9c 	.word	0x20001f9c
 80089e8:	20001f9d 	.word	0x20001f9d
 80089ec:	200021b4 	.word	0x200021b4

080089f0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8008a02:	2304      	movs	r3, #4
 8008a04:	e02a      	b.n	8008a5c <OSSemPost+0x6c>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d001      	beq.n	8008a12 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e024      	b.n	8008a5c <OSSemPost+0x6c>
    }
    OS_ENTER_CRITICAL();
 8008a12:	f7f7 fb9d 	bl	8000150 <CPU_IntDis>
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	7a9b      	ldrb	r3, [r3, #10]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <OSSemPost+0x46>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2201      	movs	r2, #1
 8008a22:	2100      	movs	r1, #0
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff f963 	bl	8007cf0 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8008a2a:	f7f7 fb93 	bl	8000154 <CPU_IntEn>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8008a2e:	f7ff fc21 	bl	8008274 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8008a32:	2300      	movs	r3, #0
 8008a34:	e012      	b.n	8008a5c <OSSemPost+0x6c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	891b      	ldrh	r3, [r3, #8]
 8008a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d009      	beq.n	8008a56 <OSSemPost+0x66>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	891b      	ldrh	r3, [r3, #8]
 8008a46:	3301      	adds	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8008a4e:	f7f7 fb81 	bl	8000154 <CPU_IntEn>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8008a52:	2300      	movs	r3, #0
 8008a54:	e002      	b.n	8008a5c <OSSemPost+0x6c>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8008a56:	f7f7 fb7d 	bl	8000154 <CPU_IntEn>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8008a5a:	2333      	movs	r3, #51	@ 0x33
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	@ 0x30
 8008a68:	af04      	add	r7, sp, #16
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a7a:	d901      	bls.n	8008a80 <OSTaskCreate+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8008a7c:	232a      	movs	r3, #42	@ 0x2a
 8008a7e:	e043      	b.n	8008b08 <OSTaskCreate+0xa4>
    }
#endif
    OS_ENTER_CRITICAL();
 8008a80:	f7f7 fb66 	bl	8000150 <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <OSTaskCreate+0xac>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <OSTaskCreate+0x30>
        OS_EXIT_CRITICAL();
 8008a8c:	f7f7 fb62 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8008a90:	233c      	movs	r3, #60	@ 0x3c
 8008a92:	e039      	b.n	8008b08 <OSTaskCreate+0xa4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	4a1f      	ldr	r2, [pc, #124]	@ (8008b14 <OSTaskCreate+0xb0>)
 8008a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d130      	bne.n	8008b02 <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b14 <OSTaskCreate+0xb0>)
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8008aaa:	f7f7 fb53 	bl	8000154 <CPU_IntEn>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 8008aae:	2300      	movs	r3, #0
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7fe fe0b 	bl	80076d0 <OSTaskStkInit>
 8008aba:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8008abc:	78f8      	ldrb	r0, [r7, #3]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9302      	str	r3, [sp, #8]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	2200      	movs	r2, #0
 8008ace:	69b9      	ldr	r1, [r7, #24]
 8008ad0:	f7ff fcf0 	bl	80084b4 <OS_TCBInit>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <OSTaskCreate+0x88>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8008ade:	4b0e      	ldr	r3, [pc, #56]	@ (8008b18 <OSTaskCreate+0xb4>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10b      	bne.n	8008afe <OSTaskCreate+0x9a>
                OS_Sched();
 8008ae6:	f7ff fbc5 	bl	8008274 <OS_Sched>
 8008aea:	e008      	b.n	8008afe <OSTaskCreate+0x9a>
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
 8008aec:	f7f7 fb30 	bl	8000150 <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	4a08      	ldr	r2, [pc, #32]	@ (8008b14 <OSTaskCreate+0xb0>)
 8008af4:	2100      	movs	r1, #0
 8008af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8008afa:	f7f7 fb2b 	bl	8000154 <CPU_IntEn>
        }
        return (err);
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	e002      	b.n	8008b08 <OSTaskCreate+0xa4>
    }
    OS_EXIT_CRITICAL();
 8008b02:	f7f7 fb27 	bl	8000154 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8008b06:	2328      	movs	r3, #40	@ 0x28
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3720      	adds	r7, #32
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20001f9c 	.word	0x20001f9c
 8008b14:	200021c4 	.word	0x200021c4
 8008b18:	20001fac 	.word	0x20001fac

08008b1c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08c      	sub	sp, #48	@ 0x30
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b32:	d901      	bls.n	8008b38 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8008b34:	232a      	movs	r3, #42	@ 0x2a
 8008b36:	e04a      	b.n	8008bce <OSTaskCreateExt+0xb2>
    }
#endif
    OS_ENTER_CRITICAL();
 8008b38:	f7f7 fb0a 	bl	8000150 <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8008b3c:	4b26      	ldr	r3, [pc, #152]	@ (8008bd8 <OSTaskCreateExt+0xbc>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <OSTaskCreateExt+0x30>
        OS_EXIT_CRITICAL();
 8008b44:	f7f7 fb06 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8008b48:	233c      	movs	r3, #60	@ 0x3c
 8008b4a:	e040      	b.n	8008bce <OSTaskCreateExt+0xb2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	4a23      	ldr	r2, [pc, #140]	@ (8008bdc <OSTaskCreateExt+0xc0>)
 8008b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d137      	bne.n	8008bc8 <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	4a20      	ldr	r2, [pc, #128]	@ (8008bdc <OSTaskCreateExt+0xc0>)
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8008b62:	f7f7 faf7 	bl	8000154 <CPU_IntEn>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8008b66:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b6e:	f000 fae5 	bl	800913c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8008b72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7fe fda9 	bl	80076d0 <OSTaskStkInit>
 8008b7e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8008b80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008b82:	78f8      	ldrb	r0, [r7, #3]
 8008b84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4613      	mov	r3, r2
 8008b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b94:	69b9      	ldr	r1, [r7, #24]
 8008b96:	f7ff fc8d 	bl	80084b4 <OS_TCBInit>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d106      	bne.n	8008bb2 <OSTaskCreateExt+0x96>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8008be0 <OSTaskCreateExt+0xc4>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d10b      	bne.n	8008bc4 <OSTaskCreateExt+0xa8>
                OS_Sched();
 8008bac:	f7ff fb62 	bl	8008274 <OS_Sched>
 8008bb0:	e008      	b.n	8008bc4 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 8008bb2:	f7f7 facd 	bl	8000150 <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	4a08      	ldr	r2, [pc, #32]	@ (8008bdc <OSTaskCreateExt+0xc0>)
 8008bba:	2100      	movs	r1, #0
 8008bbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8008bc0:	f7f7 fac8 	bl	8000154 <CPU_IntEn>
        }
        return (err);
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	e002      	b.n	8008bce <OSTaskCreateExt+0xb2>
    }
    OS_EXIT_CRITICAL();
 8008bc8:	f7f7 fac4 	bl	8000154 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8008bcc:	2328      	movs	r3, #40	@ 0x28
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20001f9c 	.word	0x20001f9c
 8008bdc:	200021c4 	.word	0x200021c4
 8008be0:	20001fac 	.word	0x20001fac

08008be4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8008bf2:	4b69      	ldr	r3, [pc, #420]	@ (8008d98 <OSTaskDel+0x1b4>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8008bfa:	2340      	movs	r3, #64	@ 0x40
 8008bfc:	e0c8      	b.n	8008d90 <OSTaskDel+0x1ac>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c02:	d101      	bne.n	8008c08 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8008c04:	233e      	movs	r3, #62	@ 0x3e
 8008c06:	e0c3      	b.n	8008d90 <OSTaskDel+0x1ac>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c0c:	d904      	bls.n	8008c18 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2bff      	cmp	r3, #255	@ 0xff
 8008c12:	d001      	beq.n	8008c18 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8008c14:	232a      	movs	r3, #42	@ 0x2a
 8008c16:	e0bb      	b.n	8008d90 <OSTaskDel+0x1ac>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8008c18:	f7f7 fa9a 	bl	8000150 <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2bff      	cmp	r3, #255	@ 0xff
 8008c20:	d104      	bne.n	8008c2c <OSTaskDel+0x48>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8008c22:	4b5e      	ldr	r3, [pc, #376]	@ (8008d9c <OSTaskDel+0x1b8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008c2a:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8008da0 <OSTaskDel+0x1bc>)
 8008c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c34:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <OSTaskDel+0x60>
        OS_EXIT_CRITICAL();
 8008c3c:	f7f7 fa8a 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008c40:	2343      	movs	r3, #67	@ 0x43
 8008c42:	e0a5      	b.n	8008d90 <OSTaskDel+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d103      	bne.n	8008c52 <OSTaskDel+0x6e>
        OS_EXIT_CRITICAL();
 8008c4a:	f7f7 fa83 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_DEL);
 8008c4e:	233d      	movs	r3, #61	@ 0x3d
 8008c50:	e09e      	b.n	8008d90 <OSTaskDel+0x1ac>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b52      	ldr	r3, [pc, #328]	@ (8008da4 <OSTaskDel+0x1c0>)
 8008c5c:	5c9a      	ldrb	r2, [r3, r2]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008c64:	43db      	mvns	r3, r3
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	6939      	ldr	r1, [r7, #16]
 8008c6a:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8008c6e:	4013      	ands	r3, r2
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	4b4c      	ldr	r3, [pc, #304]	@ (8008da4 <OSTaskDel+0x1c0>)
 8008c74:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4b49      	ldr	r3, [pc, #292]	@ (8008da4 <OSTaskDel+0x1c0>)
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <OSTaskDel+0xb8>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	4b45      	ldr	r3, [pc, #276]	@ (8008da8 <OSTaskDel+0x1c4>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	4013      	ands	r3, r2
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	4b43      	ldr	r3, [pc, #268]	@ (8008da8 <OSTaskDel+0x1c4>)
 8008c9a:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <OSTaskDel+0xcc>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f7ff f8e8 	bl	8007e80 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <OSTaskDel+0xe0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6938      	ldr	r0, [r7, #16]
 8008cc0:	f7ff f910 	bl	8007ee4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <OSTaskDel+0xf2>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fd1b 	bl	800870c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8008cec:	4b2f      	ldr	r3, [pc, #188]	@ (8008dac <OSTaskDel+0x1c8>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2bff      	cmp	r3, #255	@ 0xff
 8008cf2:	d005      	beq.n	8008d00 <OSTaskDel+0x11c>
        OSLockNesting++;
 8008cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8008dac <OSTaskDel+0x1c8>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008dac <OSTaskDel+0x1c8>)
 8008cfe:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8008d00:	f7f7 fa28 	bl	8000154 <CPU_IntEn>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8008d04:	f7fe ffee 	bl	8007ce4 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8008d08:	f7f7 fa22 	bl	8000150 <CPU_IntDis>
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8008d0c:	4b27      	ldr	r3, [pc, #156]	@ (8008dac <OSTaskDel+0x1c8>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <OSTaskDel+0x13c>
        OSLockNesting--;
 8008d14:	4b25      	ldr	r3, [pc, #148]	@ (8008dac <OSTaskDel+0x1c8>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	4b23      	ldr	r3, [pc, #140]	@ (8008dac <OSTaskDel+0x1c8>)
 8008d1e:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8008d20:	6938      	ldr	r0, [r7, #16]
 8008d22:	f7fe fcb2 	bl	800768a <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8008d26:	4b22      	ldr	r3, [pc, #136]	@ (8008db0 <OSTaskDel+0x1cc>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b20      	ldr	r3, [pc, #128]	@ (8008db0 <OSTaskDel+0x1cc>)
 8008d30:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	4a1a      	ldr	r2, [pc, #104]	@ (8008da0 <OSTaskDel+0x1bc>)
 8008d36:	2100      	movs	r1, #0
 8008d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d108      	bne.n	8008d56 <OSTaskDel+0x172>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <OSTaskDel+0x1d0>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e009      	b.n	8008d6a <OSTaskDel+0x186>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	6952      	ldr	r2, [r2, #20]
 8008d5e:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	6992      	ldr	r2, [r2, #24]
 8008d68:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8008d6a:	4b13      	ldr	r3, [pc, #76]	@ (8008db8 <OSTaskDel+0x1d4>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8008d72:	4a11      	ldr	r2, [pc, #68]	@ (8008db8 <OSTaskDel+0x1d4>)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4a10      	ldr	r2, [pc, #64]	@ (8008dbc <OSTaskDel+0x1d8>)
 8008d7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OS_EXIT_CRITICAL();
 8008d7e:	f7f7 f9e9 	bl	8000154 <CPU_IntEn>
    if (OSRunning == OS_TRUE) {
 8008d82:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <OSTaskDel+0x1dc>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <OSTaskDel+0x1aa>
        OS_Sched();                                     /* Find new highest priority task              */
 8008d8a:	f7ff fa73 	bl	8008274 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20001f9c 	.word	0x20001f9c
 8008d9c:	200021b4 	.word	0x200021b4
 8008da0:	200021c4 	.word	0x200021c4
 8008da4:	20001fa4 	.word	0x20001fa4
 8008da8:	20001fa0 	.word	0x20001fa0
 8008dac:	20001f9d 	.word	0x20001f9d
 8008db0:	20001fad 	.word	0x20001fad
 8008db4:	200021c0 	.word	0x200021c0
 8008db8:	200021b8 	.word	0x200021b8
 8008dbc:	0800d178 	.word	0x0800d178
 8008dc0:	20001fac 	.word	0x20001fac

08008dc4 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8008dda:	d906      	bls.n	8008dea <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2bff      	cmp	r3, #255	@ 0xff
 8008de0:	d003      	beq.n	8008dea <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	222a      	movs	r2, #42	@ 0x2a
 8008de6:	701a      	strb	r2, [r3, #0]
            return;
 8008de8:	e037      	b.n	8008e5a <OSTaskNameSet+0x96>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d103      	bne.n	8008df8 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	220c      	movs	r2, #12
 8008df4:	701a      	strb	r2, [r3, #0]
        return;
 8008df6:	e030      	b.n	8008e5a <OSTaskNameSet+0x96>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8008df8:	4b19      	ldr	r3, [pc, #100]	@ (8008e60 <OSTaskNameSet+0x9c>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2212      	movs	r2, #18
 8008e04:	701a      	strb	r2, [r3, #0]
        return;
 8008e06:	e028      	b.n	8008e5a <OSTaskNameSet+0x96>
    }
    OS_ENTER_CRITICAL();
 8008e08:	f7f7 f9a2 	bl	8000150 <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2bff      	cmp	r3, #255	@ 0xff
 8008e10:	d104      	bne.n	8008e1c <OSTaskNameSet+0x58>
        prio = OSTCBCur->OSTCBPrio;
 8008e12:	4b14      	ldr	r3, [pc, #80]	@ (8008e64 <OSTaskNameSet+0xa0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008e1a:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	4a12      	ldr	r2, [pc, #72]	@ (8008e68 <OSTaskNameSet+0xa4>)
 8008e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e24:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <OSTaskNameSet+0x74>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8008e2c:	f7f7 f992 	bl	8000154 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2243      	movs	r2, #67	@ 0x43
 8008e34:	701a      	strb	r2, [r3, #0]
        return;
 8008e36:	e010      	b.n	8008e5a <OSTaskNameSet+0x96>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d105      	bne.n	8008e4a <OSTaskNameSet+0x86>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8008e3e:	f7f7 f989 	bl	8000154 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2243      	movs	r2, #67	@ 0x43
 8008e46:	701a      	strb	r2, [r3, #0]
        return;
 8008e48:	e007      	b.n	8008e5a <OSTaskNameSet+0x96>
    }
    ptcb->OSTCBTaskName = pname;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	651a      	str	r2, [r3, #80]	@ 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8008e50:	f7f7 f980 	bl	8000154 <CPU_IntEn>
    *perr               = OS_ERR_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
}
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20001f9c 	.word	0x20001f9c
 8008e64:	200021b4 	.word	0x200021b4
 8008e68:	200021c4 	.word	0x200021c4

08008e6c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e7e:	d901      	bls.n	8008e84 <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8008e80:	232a      	movs	r3, #42	@ 0x2a
 8008e82:	e05b      	b.n	8008f3c <OSTaskResume+0xd0>
    }
#endif
    OS_ENTER_CRITICAL();
 8008e84:	f7f7 f964 	bl	8000150 <CPU_IntDis>
    ptcb = OSTCBPrioTbl[prio];
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8008f44 <OSTaskResume+0xd8>)
 8008e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e90:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d103      	bne.n	8008ea0 <OSTaskResume+0x34>
        OS_EXIT_CRITICAL();
 8008e98:	f7f7 f95c 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_RESUME_PRIO);
 8008e9c:	2346      	movs	r3, #70	@ 0x46
 8008e9e:	e04d      	b.n	8008f3c <OSTaskResume+0xd0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d103      	bne.n	8008eae <OSTaskResume+0x42>
        OS_EXIT_CRITICAL();
 8008ea6:	f7f7 f955 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008eaa:	2343      	movs	r3, #67	@ 0x43
 8008eac:	e046      	b.n	8008f3c <OSTaskResume+0xd0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d03c      	beq.n	8008f36 <OSTaskResume+0xca>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ec2:	f023 0308 	bic.w	r3, r3, #8
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ed4:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d128      	bne.n	8008f2e <OSTaskResume+0xc2>
            if (ptcb->OSTCBDly == 0u) {
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d121      	bne.n	8008f28 <OSTaskResume+0xbc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8008eea:	4b17      	ldr	r3, [pc, #92]	@ (8008f48 <OSTaskResume+0xdc>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	4b15      	ldr	r3, [pc, #84]	@ (8008f48 <OSTaskResume+0xdc>)
 8008ef4:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008efc:	461a      	mov	r2, r3
 8008efe:	4b13      	ldr	r3, [pc, #76]	@ (8008f4c <OSTaskResume+0xe0>)
 8008f00:	5c9a      	ldrb	r2, [r3, r2]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	4b0e      	ldr	r3, [pc, #56]	@ (8008f4c <OSTaskResume+0xe0>)
 8008f14:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8008f16:	f7f7 f91d 	bl	8000154 <CPU_IntEn>
                if (OSRunning == OS_TRUE) {
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <OSTaskResume+0xe4>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d107      	bne.n	8008f32 <OSTaskResume+0xc6>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8008f22:	f7ff f9a7 	bl	8008274 <OS_Sched>
 8008f26:	e004      	b.n	8008f32 <OSTaskResume+0xc6>
                }
            } else {
                OS_EXIT_CRITICAL();
 8008f28:	f7f7 f914 	bl	8000154 <CPU_IntEn>
 8008f2c:	e001      	b.n	8008f32 <OSTaskResume+0xc6>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8008f2e:	f7f7 f911 	bl	8000154 <CPU_IntEn>
        }
        return (OS_ERR_NONE);
 8008f32:	2300      	movs	r3, #0
 8008f34:	e002      	b.n	8008f3c <OSTaskResume+0xd0>
    }
    OS_EXIT_CRITICAL();
 8008f36:	f7f7 f90d 	bl	8000154 <CPU_IntEn>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8008f3a:	2344      	movs	r3, #68	@ 0x44
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	200021c4 	.word	0x200021c4
 8008f48:	20001fa0 	.word	0x20001fa0
 8008f4c:	20001fa4 	.word	0x20001fa4
 8008f50:	20001fac 	.word	0x20001fac

08008f54 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b3f      	cmp	r3, #63	@ 0x3f
 8008f68:	d904      	bls.n	8008f74 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2bff      	cmp	r3, #255	@ 0xff
 8008f6e:	d001      	beq.n	8008f74 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8008f70:	232a      	movs	r3, #42	@ 0x2a
 8008f72:	e04e      	b.n	8009012 <OSTaskStkChk+0xbe>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8008f7a:	2309      	movs	r3, #9
 8008f7c:	e049      	b.n	8009012 <OSTaskStkChk+0xbe>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8008f8a:	f7f7 f8e1 	bl	8000150 <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	2bff      	cmp	r3, #255	@ 0xff
 8008f92:	d104      	bne.n	8008f9e <OSTaskStkChk+0x4a>
        prio = OSTCBCur->OSTCBPrio;
 8008f94:	4b21      	ldr	r3, [pc, #132]	@ (800901c <OSTaskStkChk+0xc8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f9c:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8009020 <OSTaskStkChk+0xcc>)
 8008fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa6:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <OSTaskStkChk+0x62>
        OS_EXIT_CRITICAL();
 8008fae:	f7f7 f8d1 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008fb2:	2343      	movs	r3, #67	@ 0x43
 8008fb4:	e02d      	b.n	8009012 <OSTaskStkChk+0xbe>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d103      	bne.n	8008fc4 <OSTaskStkChk+0x70>
        OS_EXIT_CRITICAL();
 8008fbc:	f7f7 f8ca 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008fc0:	2343      	movs	r3, #67	@ 0x43
 8008fc2:	e026      	b.n	8009012 <OSTaskStkChk+0xbe>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	8a1b      	ldrh	r3, [r3, #16]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <OSTaskStkChk+0x84>
        OS_EXIT_CRITICAL();
 8008fd0:	f7f7 f8c0 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_OPT);
 8008fd4:	2345      	movs	r3, #69	@ 0x45
 8008fd6:	e01c      	b.n	8009012 <OSTaskStkChk+0xbe>
    }
    nfree = 0u;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8008fe8:	f7f7 f8b4 	bl	8000154 <CPU_IntEn>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008fec:	e002      	b.n	8008ff4 <OSTaskStkChk+0xa0>
        nfree++;
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	1d1a      	adds	r2, r3, #4
 8008ff8:	61fa      	str	r2, [r7, #28]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0f6      	beq.n	8008fee <OSTaskStkChk+0x9a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200021b4 	.word	0x200021b4
 8009020:	200021c4 	.word	0x200021c4

08009024 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800902e:	2300      	movs	r3, #0
 8009030:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	2b3f      	cmp	r3, #63	@ 0x3f
 8009036:	d101      	bne.n	800903c <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8009038:	2347      	movs	r3, #71	@ 0x47
 800903a:	e065      	b.n	8009108 <OSTaskSuspend+0xe4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009040:	d904      	bls.n	800904c <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2bff      	cmp	r3, #255	@ 0xff
 8009046:	d001      	beq.n	800904c <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8009048:	232a      	movs	r3, #42	@ 0x2a
 800904a:	e05d      	b.n	8009108 <OSTaskSuspend+0xe4>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 800904c:	f7f7 f880 	bl	8000150 <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2bff      	cmp	r3, #255	@ 0xff
 8009054:	d107      	bne.n	8009066 <OSTaskSuspend+0x42>
        prio = OSTCBCur->OSTCBPrio;
 8009056:	4b2e      	ldr	r3, [pc, #184]	@ (8009110 <OSTaskSuspend+0xec>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800905e:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]
 8009064:	e00b      	b.n	800907e <OSTaskSuspend+0x5a>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8009066:	4b2a      	ldr	r3, [pc, #168]	@ (8009110 <OSTaskSuspend+0xec>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800906e:	79fa      	ldrb	r2, [r7, #7]
 8009070:	429a      	cmp	r2, r3
 8009072:	d102      	bne.n	800907a <OSTaskSuspend+0x56>
        self = OS_TRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
 8009078:	e001      	b.n	800907e <OSTaskSuspend+0x5a>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800907a:	2300      	movs	r3, #0
 800907c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	4a24      	ldr	r2, [pc, #144]	@ (8009114 <OSTaskSuspend+0xf0>)
 8009082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009086:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d103      	bne.n	8009096 <OSTaskSuspend+0x72>
        OS_EXIT_CRITICAL();
 800908e:	f7f7 f861 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8009092:	2348      	movs	r3, #72	@ 0x48
 8009094:	e038      	b.n	8009108 <OSTaskSuspend+0xe4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d103      	bne.n	80090a4 <OSTaskSuspend+0x80>
        OS_EXIT_CRITICAL();
 800909c:	f7f7 f85a 	bl	8000154 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 80090a0:	2343      	movs	r3, #67	@ 0x43
 80090a2:	e031      	b.n	8009108 <OSTaskSuspend+0xe4>
    }
    y            = ptcb->OSTCBY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090aa:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <OSTaskSuspend+0xf4>)
 80090b0:	5cd1      	ldrb	r1, [r2, r3]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80090b8:	43db      	mvns	r3, r3
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	400a      	ands	r2, r1
 80090c0:	b2d1      	uxtb	r1, r2
 80090c2:	4a15      	ldr	r2, [pc, #84]	@ (8009118 <OSTaskSuspend+0xf4>)
 80090c4:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	4a13      	ldr	r2, [pc, #76]	@ (8009118 <OSTaskSuspend+0xf4>)
 80090ca:	5cd3      	ldrb	r3, [r2, r3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <OSTaskSuspend+0xc2>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80090d6:	43db      	mvns	r3, r3
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b10      	ldr	r3, [pc, #64]	@ (800911c <OSTaskSuspend+0xf8>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4013      	ands	r3, r2
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b0e      	ldr	r3, [pc, #56]	@ (800911c <OSTaskSuspend+0xf8>)
 80090e4:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80090ec:	f043 0308 	orr.w	r3, r3, #8
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OS_EXIT_CRITICAL();
 80090f8:	f7f7 f82c 	bl	8000154 <CPU_IntEn>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <OSTaskSuspend+0xe2>
        OS_Sched();                                             /* Find new highest priority task      */
 8009102:	f7ff f8b7 	bl	8008274 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200021b4 	.word	0x200021b4
 8009114:	200021c4 	.word	0x200021c4
 8009118:	20001fa4 	.word	0x20001fa4
 800911c:	20001fa0 	.word	0x20001fa0

08009120 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8009124:	4b04      	ldr	r3, [pc, #16]	@ (8009138 <OS_TaskReturn+0x18>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fabf 	bl	80076ac <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 800912e:	20ff      	movs	r0, #255	@ 0xff
 8009130:	f7ff fd58 	bl	8008be4 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8009134:	bf00      	nop
 8009136:	bd80      	pop	{r7, pc}
 8009138:	200021b4 	.word	0x200021b4

0800913c <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800915e:	e007      	b.n	8009170 <OS_TaskStkClr+0x34>
                size--;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	60fa      	str	r2, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f4      	bne.n	8009160 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800918c:	4b1f      	ldr	r3, [pc, #124]	@ (800920c <OSTimeDly+0x8c>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d135      	bne.n	8009200 <OSTimeDly+0x80>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8009194:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <OSTimeDly+0x90>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d133      	bne.n	8009204 <OSTimeDly+0x84>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d031      	beq.n	8009206 <OSTimeDly+0x86>
        OS_ENTER_CRITICAL();
 80091a2:	f7f6 ffd5 	bl	8000150 <CPU_IntDis>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80091a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009214 <OSTimeDly+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80091ae:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	4a19      	ldr	r2, [pc, #100]	@ (8009218 <OSTimeDly+0x98>)
 80091b4:	5cd1      	ldrb	r1, [r2, r3]
 80091b6:	4b17      	ldr	r3, [pc, #92]	@ (8009214 <OSTimeDly+0x94>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80091be:	43db      	mvns	r3, r3
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	400a      	ands	r2, r1
 80091c6:	b2d1      	uxtb	r1, r2
 80091c8:	4a13      	ldr	r2, [pc, #76]	@ (8009218 <OSTimeDly+0x98>)
 80091ca:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	4a12      	ldr	r2, [pc, #72]	@ (8009218 <OSTimeDly+0x98>)
 80091d0:	5cd3      	ldrb	r3, [r2, r3]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <OSTimeDly+0x6e>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80091d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009214 <OSTimeDly+0x94>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80091de:	43db      	mvns	r3, r3
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	4b0e      	ldr	r3, [pc, #56]	@ (800921c <OSTimeDly+0x9c>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	4013      	ands	r3, r2
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	4b0c      	ldr	r3, [pc, #48]	@ (800921c <OSTimeDly+0x9c>)
 80091ec:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 80091ee:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <OSTimeDly+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	631a      	str	r2, [r3, #48]	@ 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 80091f6:	f7f6 ffad 	bl	8000154 <CPU_IntEn>
        OS_Sched();                              /* Find next task to run!                             */
 80091fa:	f7ff f83b 	bl	8008274 <OS_Sched>
 80091fe:	e002      	b.n	8009206 <OSTimeDly+0x86>
        return;
 8009200:	bf00      	nop
 8009202:	e000      	b.n	8009206 <OSTimeDly+0x86>
        return;
 8009204:	bf00      	nop
    }
}
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20001f9c 	.word	0x20001f9c
 8009210:	20001f9d 	.word	0x20001f9d
 8009214:	200021b4 	.word	0x200021b4
 8009218:	20001fa4 	.word	0x20001fa4
 800921c:	20001fa0 	.word	0x20001fa0

08009220 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	4623      	mov	r3, r4
 8009230:	71fb      	strb	r3, [r7, #7]
 8009232:	4603      	mov	r3, r0
 8009234:	71bb      	strb	r3, [r7, #6]
 8009236:	460b      	mov	r3, r1
 8009238:	717b      	strb	r3, [r7, #5]
 800923a:	4613      	mov	r3, r2
 800923c:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800923e:	4b27      	ldr	r3, [pc, #156]	@ (80092dc <OSTimeDlyHMSM+0xbc>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8009246:	2355      	movs	r3, #85	@ 0x55
 8009248:	e043      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800924a:	4b25      	ldr	r3, [pc, #148]	@ (80092e0 <OSTimeDlyHMSM+0xc0>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8009252:	2332      	movs	r3, #50	@ 0x32
 8009254:	e03d      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 800925c:	79bb      	ldrb	r3, [r7, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d107      	bne.n	8009272 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8009262:	797b      	ldrb	r3, [r7, #5]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8009268:	887b      	ldrh	r3, [r7, #2]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 800926e:	2354      	movs	r3, #84	@ 0x54
 8009270:	e02f      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 8009272:	79bb      	ldrb	r3, [r7, #6]
 8009274:	2b3b      	cmp	r3, #59	@ 0x3b
 8009276:	d901      	bls.n	800927c <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8009278:	2351      	movs	r3, #81	@ 0x51
 800927a:	e02a      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 800927c:	797b      	ldrb	r3, [r7, #5]
 800927e:	2b3b      	cmp	r3, #59	@ 0x3b
 8009280:	d901      	bls.n	8009286 <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8009282:	2352      	movs	r3, #82	@ 0x52
 8009284:	e025      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800928c:	d301      	bcc.n	8009292 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 800928e:	2353      	movs	r3, #83	@ 0x53
 8009290:	e01f      	b.n	80092d2 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009298:	fb02 f103 	mul.w	r1, r2, r3
 800929c:	79ba      	ldrb	r2, [r7, #6]
 800929e:	4613      	mov	r3, r2
 80092a0:	011b      	lsls	r3, r3, #4
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	18ca      	adds	r2, r1, r3
 80092a8:	797b      	ldrb	r3, [r7, #5]
 80092aa:	4413      	add	r3, r2
 80092ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092b0:	fb03 f202 	mul.w	r2, r3, r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 80092b4:	887b      	ldrh	r3, [r7, #2]
 80092b6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4909      	ldr	r1, [pc, #36]	@ (80092e4 <OSTimeDlyHMSM+0xc4>)
 80092c0:	fba1 1303 	umull	r1, r3, r1, r3
 80092c4:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 80092c6:	4413      	add	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff ff58 	bl	8009180 <OSTimeDly>
    return (OS_ERR_NONE);
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	bf00      	nop
 80092dc:	20001f9c 	.word	0x20001f9c
 80092e0:	20001f9d 	.word	0x20001f9d
 80092e4:	10624dd3 	.word	0x10624dd3

080092e8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80092ee:	2300      	movs	r3, #0
 80092f0:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80092f2:	f7f6 ff2d 	bl	8000150 <CPU_IntDis>
    ticks = OSTime;
 80092f6:	4b05      	ldr	r3, [pc, #20]	@ (800930c <OSTimeGet+0x24>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 80092fc:	f7f6 ff2a 	bl	8000154 <CPU_IntEn>
    return (ticks);
 8009300:	683b      	ldr	r3, [r7, #0]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20002b3c 	.word	0x20002b3c

08009310 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8009316:	4b06      	ldr	r3, [pc, #24]	@ (8009330 <OSTmrSignal+0x20>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fb68 	bl	80089f0 <OSSemPost>
 8009320:	4603      	mov	r3, r0
 8009322:	71fb      	strb	r3, [r7, #7]
    return (err);
 8009324:	79fb      	ldrb	r3, [r7, #7]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20002b4c 	.word	0x20002b4c

08009334 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800933a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800933e:	4838      	ldr	r0, [pc, #224]	@ (8009420 <OSTmr_Init+0xec>)
 8009340:	f7fe ff80 	bl	8008244 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8009344:	2138      	movs	r1, #56	@ 0x38
 8009346:	4837      	ldr	r0, [pc, #220]	@ (8009424 <OSTmr_Init+0xf0>)
 8009348:	f7fe ff7c 	bl	8008244 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800934c:	2300      	movs	r3, #0
 800934e:	82fb      	strh	r3, [r7, #22]
 8009350:	e022      	b.n	8009398 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8009352:	8afb      	ldrh	r3, [r7, #22]
 8009354:	3301      	adds	r3, #1
 8009356:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8009358:	8afa      	ldrh	r2, [r7, #22]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4a2f      	ldr	r2, [pc, #188]	@ (8009420 <OSTmr_Init+0xec>)
 8009364:	4413      	add	r3, r2
 8009366:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8009368:	89fa      	ldrh	r2, [r7, #14]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	4a2b      	ldr	r2, [pc, #172]	@ (8009420 <OSTmr_Init+0xec>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	2264      	movs	r2, #100	@ 0x64
 800937c:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4a26      	ldr	r2, [pc, #152]	@ (8009428 <OSTmr_Init+0xf4>)
 8009390:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8009392:	8afb      	ldrh	r3, [r7, #22]
 8009394:	3301      	adds	r3, #1
 8009396:	82fb      	strh	r3, [r7, #22]
 8009398:	8afb      	ldrh	r3, [r7, #22]
 800939a:	2b0e      	cmp	r3, #14
 800939c:	d9d9      	bls.n	8009352 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800939e:	8afa      	ldrh	r2, [r7, #22]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <OSTmr_Init+0xec>)
 80093aa:	4413      	add	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2264      	movs	r2, #100	@ 0x64
 80093b2:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2200      	movs	r2, #0
 80093c0:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	4a18      	ldr	r2, [pc, #96]	@ (8009428 <OSTmr_Init+0xf4>)
 80093c6:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80093c8:	4b18      	ldr	r3, [pc, #96]	@ (800942c <OSTmr_Init+0xf8>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 80093ce:	4b18      	ldr	r3, [pc, #96]	@ (8009430 <OSTmr_Init+0xfc>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80093d4:	4b17      	ldr	r3, [pc, #92]	@ (8009434 <OSTmr_Init+0x100>)
 80093d6:	2210      	movs	r2, #16
 80093d8:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80093da:	4b17      	ldr	r3, [pc, #92]	@ (8009438 <OSTmr_Init+0x104>)
 80093dc:	4a10      	ldr	r2, [pc, #64]	@ (8009420 <OSTmr_Init+0xec>)
 80093de:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80093e0:	2001      	movs	r0, #1
 80093e2:	f7ff fa3d 	bl	8008860 <OSSemCreate>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4a14      	ldr	r2, [pc, #80]	@ (800943c <OSTmr_Init+0x108>)
 80093ea:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7ff fa37 	bl	8008860 <OSSemCreate>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4a12      	ldr	r2, [pc, #72]	@ (8009440 <OSTmr_Init+0x10c>)
 80093f6:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80093f8:	4b10      	ldr	r3, [pc, #64]	@ (800943c <OSTmr_Init+0x108>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	1dfa      	adds	r2, r7, #7
 80093fe:	4911      	ldr	r1, [pc, #68]	@ (8009444 <OSTmr_Init+0x110>)
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fa6b 	bl	80078dc <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 8009406:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <OSTmr_Init+0x10c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1dfa      	adds	r2, r7, #7
 800940c:	490e      	ldr	r1, [pc, #56]	@ (8009448 <OSTmr_Init+0x114>)
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fa64 	bl	80078dc <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8009414:	f000 f81a 	bl	800944c <OSTmr_InitTask>
}
 8009418:	bf00      	nop
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20002b50 	.word	0x20002b50
 8009424:	20002fd4 	.word	0x20002fd4
 8009428:	0800d17c 	.word	0x0800d17c
 800942c:	20002b44 	.word	0x20002b44
 8009430:	20002b42 	.word	0x20002b42
 8009434:	20002b40 	.word	0x20002b40
 8009438:	20002dd0 	.word	0x20002dd0
 800943c:	20002b48 	.word	0x20002b48
 8009440:	20002b4c 	.word	0x20002b4c
 8009444:	0800d180 	.word	0x0800d180
 8009448:	0800d194 	.word	0x0800d194

0800944c <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8009452:	2303      	movs	r3, #3
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	2300      	movs	r3, #0
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	2380      	movs	r3, #128	@ 0x80
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	4b0a      	ldr	r3, [pc, #40]	@ (8009488 <OSTmr_InitTask+0x3c>)
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	233d      	movs	r3, #61	@ 0x3d
 800946a:	4a08      	ldr	r2, [pc, #32]	@ (800948c <OSTmr_InitTask+0x40>)
 800946c:	2100      	movs	r1, #0
 800946e:	4808      	ldr	r0, [pc, #32]	@ (8009490 <OSTmr_InitTask+0x44>)
 8009470:	f7ff fb54 	bl	8008b1c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8009474:	1dfb      	adds	r3, r7, #7
 8009476:	461a      	mov	r2, r3
 8009478:	4906      	ldr	r1, [pc, #24]	@ (8009494 <OSTmr_InitTask+0x48>)
 800947a:	203d      	movs	r0, #61	@ 0x3d
 800947c:	f7ff fca2 	bl	8008dc4 <OSTaskNameSet>
#endif
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20002dd4 	.word	0x20002dd4
 800948c:	20002fd0 	.word	0x20002fd0
 8009490:	08009611 	.word	0x08009611
 8009494:	0800d1a8 	.word	0x0800d1a8

08009498 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2203      	movs	r2, #3
 80094a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d107      	bne.n	80094c2 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69da      	ldr	r2, [r3, #28]
 80094b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009560 <OSTmr_Link+0xc8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	441a      	add	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	615a      	str	r2, [r3, #20]
 80094c0:	e012      	b.n	80094e8 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d107      	bne.n	80094da <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69da      	ldr	r2, [r3, #28]
 80094ce:	4b24      	ldr	r3, [pc, #144]	@ (8009560 <OSTmr_Link+0xc8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	441a      	add	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	615a      	str	r2, [r3, #20]
 80094d8:	e006      	b.n	80094e8 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	4b20      	ldr	r3, [pc, #128]	@ (8009560 <OSTmr_Link+0xc8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	441a      	add	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009564 <OSTmr_Link+0xcc>)
 80094ee:	fba3 1302 	umull	r1, r3, r3, r2
 80094f2:	1ad1      	subs	r1, r2, r3
 80094f4:	0849      	lsrs	r1, r1, #1
 80094f6:	440b      	add	r3, r1
 80094f8:	0899      	lsrs	r1, r3, #2
 80094fa:	460b      	mov	r3, r1
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	1a5b      	subs	r3, r3, r1
 8009500:	1ad1      	subs	r1, r2, r3
 8009502:	460b      	mov	r3, r1
 8009504:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8009506:	8afb      	ldrh	r3, [r7, #22]
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <OSTmr_Link+0xd0>)
 800950c:	4413      	add	r3, r2
 800950e:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2201      	movs	r2, #1
 8009528:	809a      	strh	r2, [r3, #4]
 800952a:	e011      	b.n	8009550 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	889b      	ldrh	r3, [r3, #4]
 8009548:	3301      	adds	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	611a      	str	r2, [r3, #16]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	20002b44 	.word	0x20002b44
 8009564:	24924925 	.word	0x24924925
 8009568:	20002fd4 	.word	0x20002fd4

0800956c <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	695a      	ldr	r2, [r3, #20]
 8009578:	4b23      	ldr	r3, [pc, #140]	@ (8009608 <OSTmr_Unlink+0x9c>)
 800957a:	fba3 1302 	umull	r1, r3, r3, r2
 800957e:	1ad1      	subs	r1, r2, r3
 8009580:	0849      	lsrs	r1, r1, #1
 8009582:	440b      	add	r3, r1
 8009584:	0899      	lsrs	r1, r3, #2
 8009586:	460b      	mov	r3, r1
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	1a5b      	subs	r3, r3, r1
 800958c:	1ad1      	subs	r1, r2, r3
 800958e:	460b      	mov	r3, r1
 8009590:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8009592:	8afb      	ldrh	r3, [r7, #22]
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	4a1d      	ldr	r2, [pc, #116]	@ (800960c <OSTmr_Unlink+0xa0>)
 8009598:	4413      	add	r3, r2
 800959a:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d10c      	bne.n	80095c0 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d012      	beq.n	80095de <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	611a      	str	r2, [r3, #16]
 80095be:	e00e      	b.n	80095de <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	889b      	ldrh	r3, [r3, #4]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	809a      	strh	r2, [r3, #4]
}
 80095fe:	bf00      	nop
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr
 8009608:	24924925 	.word	0x24924925
 800960c:	20002fd4 	.word	0x20002fd4

08009610 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8009618:	4b2a      	ldr	r3, [pc, #168]	@ (80096c4 <OSTmr_Task+0xb4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f107 020b 	add.w	r2, r7, #11
 8009620:	2100      	movs	r1, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff f956 	bl	80088d4 <OSSemPend>
        OSSchedLock();
 8009628:	f7fe fa16 	bl	8007a58 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 800962c:	4b26      	ldr	r3, [pc, #152]	@ (80096c8 <OSTmr_Task+0xb8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	4a25      	ldr	r2, [pc, #148]	@ (80096c8 <OSTmr_Task+0xb8>)
 8009634:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8009636:	4b24      	ldr	r3, [pc, #144]	@ (80096c8 <OSTmr_Task+0xb8>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b24      	ldr	r3, [pc, #144]	@ (80096cc <OSTmr_Task+0xbc>)
 800963c:	fba3 1302 	umull	r1, r3, r3, r2
 8009640:	1ad1      	subs	r1, r2, r3
 8009642:	0849      	lsrs	r1, r1, #1
 8009644:	440b      	add	r3, r1
 8009646:	0899      	lsrs	r1, r3, #2
 8009648:	460b      	mov	r3, r1
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	1a5b      	subs	r3, r3, r1
 800964e:	1ad1      	subs	r1, r2, r3
 8009650:	460b      	mov	r3, r1
 8009652:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8009654:	8b7b      	ldrh	r3, [r7, #26]
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4a1d      	ldr	r2, [pc, #116]	@ (80096d0 <OSTmr_Task+0xc0>)
 800965a:	4413      	add	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8009664:	e027      	b.n	80096b6 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	4b15      	ldr	r3, [pc, #84]	@ (80096c8 <OSTmr_Task+0xb8>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d11c      	bne.n	80096b2 <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8009678:	69f8      	ldr	r0, [r7, #28]
 800967a:	f7ff ff77 	bl	800956c <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009684:	2b02      	cmp	r3, #2
 8009686:	d104      	bne.n	8009692 <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8009688:	2101      	movs	r1, #1
 800968a:	69f8      	ldr	r0, [r7, #28]
 800968c:	f7ff ff04 	bl	8009498 <OSTmr_Link>
 8009690:	e003      	b.n	800969a <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4611      	mov	r1, r2
 80096ae:	69f8      	ldr	r0, [r7, #28]
 80096b0:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1d4      	bne.n	8009666 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 80096bc:	f7fe f9f2 	bl	8007aa4 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80096c0:	e7aa      	b.n	8009618 <OSTmr_Task+0x8>
 80096c2:	bf00      	nop
 80096c4:	20002b4c 	.word	0x20002b4c
 80096c8:	20002b44 	.word	0x20002b44
 80096cc:	24924925 	.word	0x24924925
 80096d0:	20002fd4 	.word	0x20002fd4

080096d4 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
}
 80096fc:	bf00      	nop
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr

08009722 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8009722:	b480      	push	{r7}
 8009724:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr

0800972e <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	bc80      	pop	{r7}
 800973e:	4770      	bx	lr

08009740 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7c1b      	ldrb	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d115      	bne.n	8009790 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009768:	2202      	movs	r2, #2
 800976a:	2181      	movs	r1, #129	@ 0x81
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 fe82 	bl	800b476 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800977c:	2202      	movs	r2, #2
 800977e:	2101      	movs	r1, #1
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fe78 	bl	800b476 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800978e:	e012      	b.n	80097b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	2202      	movs	r2, #2
 8009794:	2181      	movs	r1, #129	@ 0x81
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fe6d 	bl	800b476 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097a2:	2340      	movs	r3, #64	@ 0x40
 80097a4:	2202      	movs	r2, #2
 80097a6:	2101      	movs	r1, #1
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fe64 	bl	800b476 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097b6:	2308      	movs	r3, #8
 80097b8:	2203      	movs	r2, #3
 80097ba:	2182      	movs	r1, #130	@ 0x82
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fe5a 	bl	800b476 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80097cc:	f001 ff7a 	bl	800b6c4 <USBD_static_malloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80097e2:	2301      	movs	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e026      	b.n	8009836 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2200      	movs	r2, #0
 8009806:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	7c1b      	ldrb	r3, [r3, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800981c:	2101      	movs	r1, #1
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 ff1a 	bl	800b658 <USBD_LL_PrepareReceive>
 8009824:	e007      	b.n	8009836 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800982c:	2340      	movs	r3, #64	@ 0x40
 800982e:	2101      	movs	r1, #1
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 ff11 	bl	800b658 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009850:	2181      	movs	r1, #129	@ 0x81
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 fe35 	bl	800b4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800985e:	2101      	movs	r1, #1
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 fe2e 	bl	800b4c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800986e:	2182      	movs	r1, #130	@ 0x82
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fe26 	bl	800b4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009896:	4618      	mov	r0, r3
 8009898:	f001 ff20 	bl	800b6dc <USBD_static_free>
    pdev->pClassData = NULL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b086      	sub	sp, #24
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d039      	beq.n	800994c <USBD_CDC_Setup+0x9e>
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d17f      	bne.n	80099dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	88db      	ldrh	r3, [r3, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d029      	beq.n	8009938 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b25b      	sxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da11      	bge.n	8009912 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80098fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	88d2      	ldrh	r2, [r2, #6]
 8009900:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009902:	6939      	ldr	r1, [r7, #16]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	88db      	ldrh	r3, [r3, #6]
 8009908:	461a      	mov	r2, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f001 fa06 	bl	800ad1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009910:	e06b      	b.n	80099ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	785a      	ldrb	r2, [r3, #1]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	88db      	ldrh	r3, [r3, #6]
 8009920:	b2da      	uxtb	r2, r3
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009928:	6939      	ldr	r1, [r7, #16]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	88db      	ldrh	r3, [r3, #6]
 800992e:	461a      	mov	r2, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 fa21 	bl	800ad78 <USBD_CtlPrepareRx>
      break;
 8009936:	e058      	b.n	80099ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	7850      	ldrb	r0, [r2, #1]
 8009944:	2200      	movs	r2, #0
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	4798      	blx	r3
      break;
 800994a:	e04e      	b.n	80099ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b0b      	cmp	r3, #11
 8009952:	d02e      	beq.n	80099b2 <USBD_CDC_Setup+0x104>
 8009954:	2b0b      	cmp	r3, #11
 8009956:	dc38      	bgt.n	80099ca <USBD_CDC_Setup+0x11c>
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <USBD_CDC_Setup+0xb4>
 800995c:	2b0a      	cmp	r3, #10
 800995e:	d014      	beq.n	800998a <USBD_CDC_Setup+0xdc>
 8009960:	e033      	b.n	80099ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009968:	2b03      	cmp	r3, #3
 800996a:	d107      	bne.n	800997c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	2202      	movs	r2, #2
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 f9d1 	bl	800ad1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800997a:	e02e      	b.n	80099da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 f962 	bl	800ac48 <USBD_CtlError>
            ret = USBD_FAIL;
 8009984:	2302      	movs	r3, #2
 8009986:	75fb      	strb	r3, [r7, #23]
          break;
 8009988:	e027      	b.n	80099da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009990:	2b03      	cmp	r3, #3
 8009992:	d107      	bne.n	80099a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009994:	f107 030f 	add.w	r3, r7, #15
 8009998:	2201      	movs	r2, #1
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f9bd 	bl	800ad1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099a2:	e01a      	b.n	80099da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 f94e 	bl	800ac48 <USBD_CtlError>
            ret = USBD_FAIL;
 80099ac:	2302      	movs	r3, #2
 80099ae:	75fb      	strb	r3, [r7, #23]
          break;
 80099b0:	e013      	b.n	80099da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d00d      	beq.n	80099d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 f942 	bl	800ac48 <USBD_CtlError>
            ret = USBD_FAIL;
 80099c4:	2302      	movs	r3, #2
 80099c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099c8:	e006      	b.n	80099d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f001 f93b 	bl	800ac48 <USBD_CtlError>
          ret = USBD_FAIL;
 80099d2:	2302      	movs	r3, #2
 80099d4:	75fb      	strb	r3, [r7, #23]
          break;
 80099d6:	e000      	b.n	80099da <USBD_CDC_Setup+0x12c>
          break;
 80099d8:	bf00      	nop
      }
      break;
 80099da:	e006      	b.n	80099ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f932 	bl	800ac48 <USBD_CtlError>
      ret = USBD_FAIL;
 80099e4:	2302      	movs	r3, #2
 80099e6:	75fb      	strb	r3, [r7, #23]
      break;
 80099e8:	bf00      	nop
  }

  return ret;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a06:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a0e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d03a      	beq.n	8009a90 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	440b      	add	r3, r1
 8009a28:	331c      	adds	r3, #28
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d029      	beq.n	8009a84 <USBD_CDC_DataIn+0x90>
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	331c      	adds	r3, #28
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	78f9      	ldrb	r1, [r7, #3]
 8009a44:	68b8      	ldr	r0, [r7, #8]
 8009a46:	460b      	mov	r3, r1
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	4403      	add	r3, r0
 8009a50:	3338      	adds	r3, #56	@ 0x38
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d110      	bne.n	8009a84 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	440b      	add	r3, r1
 8009a70:	331c      	adds	r3, #28
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a76:	78f9      	ldrb	r1, [r7, #3]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 fdc8 	bl	800b612 <USBD_LL_Transmit>
 8009a82:	e003      	b.n	8009a8c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e000      	b.n	8009a92 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009a90:	2302      	movs	r3, #2
  }
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fdf3 	bl	800b69e <USBD_LL_GetRxDataSize>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00d      	beq.n	8009ae6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4798      	blx	r3

    return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e000      	b.n	8009ae8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ae6:	2302      	movs	r3, #2
  }
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009afe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d014      	beq.n	8009b34 <USBD_CDC_EP0_RxReady+0x44>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b10:	2bff      	cmp	r3, #255	@ 0xff
 8009b12:	d00f      	beq.n	8009b34 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	22ff      	movs	r2, #255	@ 0xff
 8009b30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2243      	movs	r2, #67	@ 0x43
 8009b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b4e:	4b03      	ldr	r3, [pc, #12]	@ (8009b5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc80      	pop	{r7}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	200000b8 	.word	0x200000b8

08009b60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2243      	movs	r2, #67	@ 0x43
 8009b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b6e:	4b03      	ldr	r3, [pc, #12]	@ (8009b7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bc80      	pop	{r7}
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	20000074 	.word	0x20000074

08009b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2243      	movs	r2, #67	@ 0x43
 8009b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	@ (8009b9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	200000fc 	.word	0x200000fc

08009ba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	220a      	movs	r2, #10
 8009bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009bae:	4b03      	ldr	r3, [pc, #12]	@ (8009bbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000030 	.word	0x20000030

08009bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bca:	2302      	movs	r3, #2
 8009bcc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bc80      	pop	{r7}
 8009bea:	4770      	bx	lr

08009bec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c0a:	88fa      	ldrh	r2, [r7, #6]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr

08009c1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01c      	beq.n	8009c98 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d115      	bne.n	8009c94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2181      	movs	r1, #129	@ 0x81
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fcc1 	bl	800b612 <USBD_LL_Transmit>

      return USBD_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	e002      	b.n	8009c9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d017      	beq.n	8009cec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7c1b      	ldrb	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d109      	bne.n	8009cd8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cce:	2101      	movs	r1, #1
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fcc1 	bl	800b658 <USBD_LL_PrepareReceive>
 8009cd6:	e007      	b.n	8009ce8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cde:	2340      	movs	r3, #64	@ 0x40
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fcb8 	bl	800b658 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e000      	b.n	8009cee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009cec:	2302      	movs	r3, #2
  }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	4613      	mov	r3, r2
 8009d02:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	e01a      	b.n	8009d44 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	79fa      	ldrb	r2, [r7, #7]
 8009d3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f001 fb25 	bl	800b38c <USBD_LL_Init>

  return USBD_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
 8009d6c:	e001      	b.n	8009d72 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bc80      	pop	{r7}
 8009d7c:	4770      	bx	lr

08009d7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fb5a 	bl	800b440 <USBD_LL_Start>

  return USBD_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009db6:	2302      	movs	r3, #2
 8009db8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00c      	beq.n	8009dde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	78fa      	ldrb	r2, [r7, #3]
 8009dfe:	4611      	mov	r1, r2
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	4798      	blx	r3

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fed8 	bl	800abd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e34:	461a      	mov	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d016      	beq.n	8009e78 <USBD_LL_SetupStage+0x6a>
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d81c      	bhi.n	8009e88 <USBD_LL_SetupStage+0x7a>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <USBD_LL_SetupStage+0x4a>
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d008      	beq.n	8009e68 <USBD_LL_SetupStage+0x5a>
 8009e56:	e017      	b.n	8009e88 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f9cb 	bl	800a1fc <USBD_StdDevReq>
      break;
 8009e66:	e01a      	b.n	8009e9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa2d 	bl	800a2d0 <USBD_StdItfReq>
      break;
 8009e76:	e012      	b.n	8009e9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa6d 	bl	800a360 <USBD_StdEPReq>
      break;
 8009e86:	e00a      	b.n	8009e9e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009e8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fb32 	bl	800b500 <USBD_LL_StallEP>
      break;
 8009e9c:	bf00      	nop
  }

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009eb6:	7afb      	ldrb	r3, [r7, #11]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d14b      	bne.n	8009f54 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ec2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d134      	bne.n	8009f38 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d919      	bls.n	8009f0e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	1ad2      	subs	r2, r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d203      	bcs.n	8009efc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	e002      	b.n	8009f02 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 ff54 	bl	800adb4 <USBD_CtlContinueRx>
 8009f0c:	e038      	b.n	8009f80 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d105      	bne.n	8009f30 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 ff51 	bl	800add8 <USBD_CtlSendStatus>
 8009f36:	e023      	b.n	8009f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d11e      	bne.n	8009f80 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f001 fad7 	bl	800b500 <USBD_LL_StallEP>
 8009f52:	e015      	b.n	8009f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00d      	beq.n	8009f7c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d108      	bne.n	8009f7c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	7afa      	ldrb	r2, [r7, #11]
 8009f74:	4611      	mov	r1, r2
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	4798      	blx	r3
 8009f7a:	e001      	b.n	8009f80 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	e000      	b.n	8009f82 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	460b      	mov	r3, r1
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d17f      	bne.n	800a09e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3314      	adds	r3, #20
 8009fa2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d15c      	bne.n	800a068 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d915      	bls.n	8009fe6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 febe 	bl	800ad54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2100      	movs	r1, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 fb3a 	bl	800b658 <USBD_LL_PrepareReceive>
 8009fe4:	e04e      	b.n	800a084 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	6912      	ldr	r2, [r2, #16]
 8009fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ff2:	fb01 f202 	mul.w	r2, r1, r2
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d11c      	bne.n	800a036 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a004:	429a      	cmp	r2, r3
 800a006:	d316      	bcc.n	800a036 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a012:	429a      	cmp	r2, r3
 800a014:	d20f      	bcs.n	800a036 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a016:	2200      	movs	r2, #0
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fe9a 	bl	800ad54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	2100      	movs	r1, #0
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 fb12 	bl	800b658 <USBD_LL_PrepareReceive>
 800a034:	e026      	b.n	800a084 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d105      	bne.n	800a058 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a058:	2180      	movs	r1, #128	@ 0x80
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f001 fa50 	bl	800b500 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 fecc 	bl	800adfe <USBD_CtlReceiveStatus>
 800a066:	e00d      	b.n	800a084 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d004      	beq.n	800a07c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a07c:	2180      	movs	r1, #128	@ 0x80
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f001 fa3e 	bl	800b500 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d11d      	bne.n	800a0ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fe81 	bl	8009d96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a09c:	e015      	b.n	800a0ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00d      	beq.n	800a0c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d108      	bne.n	800a0c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	7afa      	ldrb	r2, [r7, #11]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	4798      	blx	r3
 800a0c4:	e001      	b.n	800a0ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e000      	b.n	800a0cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0dc:	2340      	movs	r3, #64	@ 0x40
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 f9c7 	bl	800b476 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2240      	movs	r2, #64	@ 0x40
 800a0f4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2180      	movs	r1, #128	@ 0x80
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 f9b9 	bl	800b476 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2240      	movs	r2, #64	@ 0x40
 800a10e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a134:	2b00      	cmp	r3, #0
 800a136:	d009      	beq.n	800a14c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	6852      	ldr	r2, [r2, #4]
 800a144:	b2d2      	uxtb	r2, r2
 800a146:	4611      	mov	r1, r2
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
  }

  return USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2204      	movs	r2, #4
 800a18c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr

0800a19c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d105      	bne.n	800a1ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr

0800a1c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d10b      	bne.n	800a1f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a212:	2b40      	cmp	r3, #64	@ 0x40
 800a214:	d005      	beq.n	800a222 <USBD_StdDevReq+0x26>
 800a216:	2b40      	cmp	r3, #64	@ 0x40
 800a218:	d84f      	bhi.n	800a2ba <USBD_StdDevReq+0xbe>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d009      	beq.n	800a232 <USBD_StdDevReq+0x36>
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d14b      	bne.n	800a2ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	4798      	blx	r3
      break;
 800a230:	e048      	b.n	800a2c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b09      	cmp	r3, #9
 800a238:	d839      	bhi.n	800a2ae <USBD_StdDevReq+0xb2>
 800a23a:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <USBD_StdDevReq+0x44>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a291 	.word	0x0800a291
 800a244:	0800a2a5 	.word	0x0800a2a5
 800a248:	0800a2af 	.word	0x0800a2af
 800a24c:	0800a29b 	.word	0x0800a29b
 800a250:	0800a2af 	.word	0x0800a2af
 800a254:	0800a273 	.word	0x0800a273
 800a258:	0800a269 	.word	0x0800a269
 800a25c:	0800a2af 	.word	0x0800a2af
 800a260:	0800a287 	.word	0x0800a287
 800a264:	0800a27d 	.word	0x0800a27d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f9dc 	bl	800a628 <USBD_GetDescriptor>
          break;
 800a270:	e022      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fb3f 	bl	800a8f8 <USBD_SetAddress>
          break;
 800a27a:	e01d      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fb7e 	bl	800a980 <USBD_SetConfig>
          break;
 800a284:	e018      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fc07 	bl	800aa9c <USBD_GetConfig>
          break;
 800a28e:	e013      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fc37 	bl	800ab06 <USBD_GetStatus>
          break;
 800a298:	e00e      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fc65 	bl	800ab6c <USBD_SetFeature>
          break;
 800a2a2:	e009      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fc74 	bl	800ab94 <USBD_ClrFeature>
          break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fcc9 	bl	800ac48 <USBD_CtlError>
          break;
 800a2b6:	bf00      	nop
      }
      break;
 800a2b8:	e004      	b.n	800a2c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fcc3 	bl	800ac48 <USBD_CtlError>
      break;
 800a2c2:	bf00      	nop
  }

  return ret;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop

0800a2d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2e6:	2b40      	cmp	r3, #64	@ 0x40
 800a2e8:	d005      	beq.n	800a2f6 <USBD_StdItfReq+0x26>
 800a2ea:	2b40      	cmp	r3, #64	@ 0x40
 800a2ec:	d82e      	bhi.n	800a34c <USBD_StdItfReq+0x7c>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <USBD_StdItfReq+0x26>
 800a2f2:	2b20      	cmp	r3, #32
 800a2f4:	d12a      	bne.n	800a34c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d81d      	bhi.n	800a33e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	889b      	ldrh	r3, [r3, #4]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d813      	bhi.n	800a334 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	4798      	blx	r3
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d110      	bne.n	800a348 <USBD_StdItfReq+0x78>
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10d      	bne.n	800a348 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fd53 	bl	800add8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a332:	e009      	b.n	800a348 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fc86 	bl	800ac48 <USBD_CtlError>
          break;
 800a33c:	e004      	b.n	800a348 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc81 	bl	800ac48 <USBD_CtlError>
          break;
 800a346:	e000      	b.n	800a34a <USBD_StdItfReq+0x7a>
          break;
 800a348:	bf00      	nop
      }
      break;
 800a34a:	e004      	b.n	800a356 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fc7a 	bl	800ac48 <USBD_CtlError>
      break;
 800a354:	bf00      	nop
  }

  return USBD_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	889b      	ldrh	r3, [r3, #4]
 800a372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a37c:	2b40      	cmp	r3, #64	@ 0x40
 800a37e:	d007      	beq.n	800a390 <USBD_StdEPReq+0x30>
 800a380:	2b40      	cmp	r3, #64	@ 0x40
 800a382:	f200 8146 	bhi.w	800a612 <USBD_StdEPReq+0x2b2>
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <USBD_StdEPReq+0x40>
 800a38a:	2b20      	cmp	r3, #32
 800a38c:	f040 8141 	bne.w	800a612 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
      break;
 800a39e:	e13d      	b.n	800a61c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d10a      	bne.n	800a3c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	4798      	blx	r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	e12d      	b.n	800a61e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d007      	beq.n	800a3da <USBD_StdEPReq+0x7a>
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	f300 811b 	bgt.w	800a606 <USBD_StdEPReq+0x2a6>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d072      	beq.n	800a4ba <USBD_StdEPReq+0x15a>
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d03a      	beq.n	800a44e <USBD_StdEPReq+0xee>
 800a3d8:	e115      	b.n	800a606 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d002      	beq.n	800a3ea <USBD_StdEPReq+0x8a>
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d015      	beq.n	800a414 <USBD_StdEPReq+0xb4>
 800a3e8:	e02b      	b.n	800a442 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <USBD_StdEPReq+0xaa>
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	2b80      	cmp	r3, #128	@ 0x80
 800a3f4:	d009      	beq.n	800a40a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 f880 	bl	800b500 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a400:	2180      	movs	r1, #128	@ 0x80
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 f87c 	bl	800b500 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a408:	e020      	b.n	800a44c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fc1b 	bl	800ac48 <USBD_CtlError>
              break;
 800a412:	e01b      	b.n	800a44c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	885b      	ldrh	r3, [r3, #2]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10e      	bne.n	800a43a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <USBD_StdEPReq+0xda>
 800a422:	7bbb      	ldrb	r3, [r7, #14]
 800a424:	2b80      	cmp	r3, #128	@ 0x80
 800a426:	d008      	beq.n	800a43a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	88db      	ldrh	r3, [r3, #6]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d104      	bne.n	800a43a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f863 	bl	800b500 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fccc 	bl	800add8 <USBD_CtlSendStatus>

              break;
 800a440:	e004      	b.n	800a44c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fbff 	bl	800ac48 <USBD_CtlError>
              break;
 800a44a:	bf00      	nop
          }
          break;
 800a44c:	e0e0      	b.n	800a610 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a454:	2b02      	cmp	r3, #2
 800a456:	d002      	beq.n	800a45e <USBD_StdEPReq+0xfe>
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d015      	beq.n	800a488 <USBD_StdEPReq+0x128>
 800a45c:	e026      	b.n	800a4ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00c      	beq.n	800a47e <USBD_StdEPReq+0x11e>
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	2b80      	cmp	r3, #128	@ 0x80
 800a468:	d009      	beq.n	800a47e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 f846 	bl	800b500 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a474:	2180      	movs	r1, #128	@ 0x80
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 f842 	bl	800b500 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a47c:	e01c      	b.n	800a4b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fbe1 	bl	800ac48 <USBD_CtlError>
              break;
 800a486:	e017      	b.n	800a4b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	885b      	ldrh	r3, [r3, #2]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d112      	bne.n	800a4b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f84d 	bl	800b53e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fc97 	bl	800add8 <USBD_CtlSendStatus>
              }
              break;
 800a4aa:	e004      	b.n	800a4b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fbca 	bl	800ac48 <USBD_CtlError>
              break;
 800a4b4:	e000      	b.n	800a4b8 <USBD_StdEPReq+0x158>
              break;
 800a4b6:	bf00      	nop
          }
          break;
 800a4b8:	e0aa      	b.n	800a610 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d002      	beq.n	800a4ca <USBD_StdEPReq+0x16a>
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d032      	beq.n	800a52e <USBD_StdEPReq+0x1ce>
 800a4c8:	e097      	b.n	800a5fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d007      	beq.n	800a4e0 <USBD_StdEPReq+0x180>
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	2b80      	cmp	r3, #128	@ 0x80
 800a4d4:	d004      	beq.n	800a4e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fbb5 	bl	800ac48 <USBD_CtlError>
                break;
 800a4de:	e091      	b.n	800a604 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	da0b      	bge.n	800a500 <USBD_StdEPReq+0x1a0>
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	3310      	adds	r3, #16
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	e00b      	b.n	800a518 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4413      	add	r3, r2
 800a516:	3304      	adds	r3, #4
 800a518:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2202      	movs	r2, #2
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fbf8 	bl	800ad1c <USBD_CtlSendData>
              break;
 800a52c:	e06a      	b.n	800a604 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a52e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	da11      	bge.n	800a55a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	f003 020f 	and.w	r2, r3, #15
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	3318      	adds	r3, #24
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d117      	bne.n	800a580 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fb78 	bl	800ac48 <USBD_CtlError>
                  break;
 800a558:	e054      	b.n	800a604 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	f003 020f 	and.w	r2, r3, #15
 800a560:	6879      	ldr	r1, [r7, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	440b      	add	r3, r1
 800a56c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fb65 	bl	800ac48 <USBD_CtlError>
                  break;
 800a57e:	e041      	b.n	800a604 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a584:	2b00      	cmp	r3, #0
 800a586:	da0b      	bge.n	800a5a0 <USBD_StdEPReq+0x240>
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	3310      	adds	r3, #16
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	3304      	adds	r3, #4
 800a59e:	e00b      	b.n	800a5b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <USBD_StdEPReq+0x266>
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	2b80      	cmp	r3, #128	@ 0x80
 800a5c4:	d103      	bne.n	800a5ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
 800a5cc:	e00e      	b.n	800a5ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 ffd2 	bl	800b57c <USBD_LL_IsStallEP>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e002      	b.n	800a5ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fb92 	bl	800ad1c <USBD_CtlSendData>
              break;
 800a5f8:	e004      	b.n	800a604 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb23 	bl	800ac48 <USBD_CtlError>
              break;
 800a602:	bf00      	nop
          }
          break;
 800a604:	e004      	b.n	800a610 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fb1d 	bl	800ac48 <USBD_CtlError>
          break;
 800a60e:	bf00      	nop
      }
      break;
 800a610:	e004      	b.n	800a61c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fb17 	bl	800ac48 <USBD_CtlError>
      break;
 800a61a:	bf00      	nop
  }

  return ret;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	885b      	ldrh	r3, [r3, #2]
 800a642:	0a1b      	lsrs	r3, r3, #8
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	2b06      	cmp	r3, #6
 800a64a:	f200 8128 	bhi.w	800a89e <USBD_GetDescriptor+0x276>
 800a64e:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <USBD_GetDescriptor+0x2c>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a671 	.word	0x0800a671
 800a658:	0800a689 	.word	0x0800a689
 800a65c:	0800a6c9 	.word	0x0800a6c9
 800a660:	0800a89f 	.word	0x0800a89f
 800a664:	0800a89f 	.word	0x0800a89f
 800a668:	0800a83f 	.word	0x0800a83f
 800a66c:	0800a86b 	.word	0x0800a86b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7c12      	ldrb	r2, [r2, #16]
 800a67c:	f107 0108 	add.w	r1, r7, #8
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	60f8      	str	r0, [r7, #12]
      break;
 800a686:	e112      	b.n	800a8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7c1b      	ldrb	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10d      	bne.n	800a6ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a698:	f107 0208 	add.w	r2, r7, #8
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6aa:	e100      	b.n	800a8ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b4:	f107 0208 	add.w	r2, r7, #8
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	4798      	blx	r3
 800a6bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	e0f2      	b.n	800a8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	885b      	ldrh	r3, [r3, #2]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	f200 80ac 	bhi.w	800a82c <USBD_GetDescriptor+0x204>
 800a6d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6dc <USBD_GetDescriptor+0xb4>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a6f5 	.word	0x0800a6f5
 800a6e0:	0800a729 	.word	0x0800a729
 800a6e4:	0800a75d 	.word	0x0800a75d
 800a6e8:	0800a791 	.word	0x0800a791
 800a6ec:	0800a7c5 	.word	0x0800a7c5
 800a6f0:	0800a7f9 	.word	0x0800a7f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	7c12      	ldrb	r2, [r2, #16]
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
 800a714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a716:	e091      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa94 	bl	800ac48 <USBD_CtlError>
            err++;
 800a720:	7afb      	ldrb	r3, [r7, #11]
 800a722:	3301      	adds	r3, #1
 800a724:	72fb      	strb	r3, [r7, #11]
          break;
 800a726:	e089      	b.n	800a83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7c12      	ldrb	r2, [r2, #16]
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a74a:	e077      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa7a 	bl	800ac48 <USBD_CtlError>
            err++;
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	3301      	adds	r3, #1
 800a758:	72fb      	strb	r3, [r7, #11]
          break;
 800a75a:	e06f      	b.n	800a83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77e:	e05d      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa60 	bl	800ac48 <USBD_CtlError>
            err++;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	72fb      	strb	r3, [r7, #11]
          break;
 800a78e:	e055      	b.n	800a83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b2:	e043      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa46 	bl	800ac48 <USBD_CtlError>
            err++;
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c2:	e03b      	b.n	800a83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e6:	e029      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa2c 	bl	800ac48 <USBD_CtlError>
            err++;
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f6:	e021      	b.n	800a83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	7c12      	ldrb	r2, [r2, #16]
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	4610      	mov	r0, r2
 800a816:	4798      	blx	r3
 800a818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a81a:	e00f      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa12 	bl	800ac48 <USBD_CtlError>
            err++;
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	3301      	adds	r3, #1
 800a828:	72fb      	strb	r3, [r7, #11]
          break;
 800a82a:	e007      	b.n	800a83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa0a 	bl	800ac48 <USBD_CtlError>
          err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a83a:	e038      	b.n	800a8ae <USBD_GetDescriptor+0x286>
 800a83c:	e037      	b.n	800a8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7c1b      	ldrb	r3, [r3, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84e:	f107 0208 	add.w	r2, r7, #8
 800a852:	4610      	mov	r0, r2
 800a854:	4798      	blx	r3
 800a856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a858:	e029      	b.n	800a8ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f9f3 	bl	800ac48 <USBD_CtlError>
        err++;
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3301      	adds	r3, #1
 800a866:	72fb      	strb	r3, [r7, #11]
      break;
 800a868:	e021      	b.n	800a8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7c1b      	ldrb	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10d      	bne.n	800a88e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87a:	f107 0208 	add.w	r2, r7, #8
 800a87e:	4610      	mov	r0, r2
 800a880:	4798      	blx	r3
 800a882:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3301      	adds	r3, #1
 800a888:	2207      	movs	r2, #7
 800a88a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a88c:	e00f      	b.n	800a8ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9d9 	bl	800ac48 <USBD_CtlError>
        err++;
 800a896:	7afb      	ldrb	r3, [r7, #11]
 800a898:	3301      	adds	r3, #1
 800a89a:	72fb      	strb	r3, [r7, #11]
      break;
 800a89c:	e007      	b.n	800a8ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f9d1 	bl	800ac48 <USBD_CtlError>
      err++;
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ac:	bf00      	nop
  }

  if (err != 0U)
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11c      	bne.n	800a8ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a8b4:	893b      	ldrh	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d011      	beq.n	800a8de <USBD_GetDescriptor+0x2b6>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	88db      	ldrh	r3, [r3, #6]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	88da      	ldrh	r2, [r3, #6]
 800a8c6:	893b      	ldrh	r3, [r7, #8]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	bf28      	it	cs
 800a8cc:	4613      	movcs	r3, r2
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8d2:	893b      	ldrh	r3, [r7, #8]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68f9      	ldr	r1, [r7, #12]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fa1f 	bl	800ad1c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	88db      	ldrh	r3, [r3, #6]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d104      	bne.n	800a8f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fa76 	bl	800add8 <USBD_CtlSendStatus>
 800a8ec:	e000      	b.n	800a8f0 <USBD_GetDescriptor+0x2c8>
    return;
 800a8ee:	bf00      	nop
    }
  }
}
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop

0800a8f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	889b      	ldrh	r3, [r3, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d130      	bne.n	800a96c <USBD_SetAddress+0x74>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	88db      	ldrh	r3, [r3, #6]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d12c      	bne.n	800a96c <USBD_SetAddress+0x74>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	885b      	ldrh	r3, [r3, #2]
 800a916:	2b7f      	cmp	r3, #127	@ 0x7f
 800a918:	d828      	bhi.n	800a96c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	885b      	ldrh	r3, [r3, #2]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a924:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d104      	bne.n	800a93a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f988 	bl	800ac48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a938:	e01d      	b.n	800a976 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	7bfa      	ldrb	r2, [r7, #15]
 800a93e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fe44 	bl	800b5d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fa43 	bl	800add8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a960:	e009      	b.n	800a976 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96a:	e004      	b.n	800a976 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f96a 	bl	800ac48 <USBD_CtlError>
  }
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	885b      	ldrh	r3, [r3, #2]
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	4b41      	ldr	r3, [pc, #260]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a994:	4b40      	ldr	r3, [pc, #256]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d904      	bls.n	800a9a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f952 	bl	800ac48 <USBD_CtlError>
 800a9a4:	e075      	b.n	800aa92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d002      	beq.n	800a9b6 <USBD_SetConfig+0x36>
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d023      	beq.n	800a9fc <USBD_SetConfig+0x7c>
 800a9b4:	e062      	b.n	800aa7c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a9b6:	4b38      	ldr	r3, [pc, #224]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01a      	beq.n	800a9f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a9be:	4b36      	ldr	r3, [pc, #216]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9d0:	4b31      	ldr	r3, [pc, #196]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff f9e7 	bl	8009daa <USBD_SetClassConfig>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d104      	bne.n	800a9ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f92f 	bl	800ac48 <USBD_CtlError>
            return;
 800a9ea:	e052      	b.n	800aa92 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f9f3 	bl	800add8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a9f2:	e04e      	b.n	800aa92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f9ef 	bl	800add8 <USBD_CtlSendStatus>
        break;
 800a9fa:	e04a      	b.n	800aa92 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a9fc:	4b26      	ldr	r3, [pc, #152]	@ (800aa98 <USBD_SetConfig+0x118>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d112      	bne.n	800aa2a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800aa0c:	4b22      	ldr	r3, [pc, #136]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa16:	4b20      	ldr	r3, [pc, #128]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff f9e3 	bl	8009de8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f9d8 	bl	800add8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa28:	e033      	b.n	800aa92 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d01d      	beq.n	800aa74 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff f9d1 	bl	8009de8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa46:	4b14      	ldr	r3, [pc, #80]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa50:	4b11      	ldr	r3, [pc, #68]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff f9a7 	bl	8009daa <USBD_SetClassConfig>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d104      	bne.n	800aa6c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f8ef 	bl	800ac48 <USBD_CtlError>
            return;
 800aa6a:	e012      	b.n	800aa92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f9b3 	bl	800add8 <USBD_CtlSendStatus>
        break;
 800aa72:	e00e      	b.n	800aa92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f9af 	bl	800add8 <USBD_CtlSendStatus>
        break;
 800aa7a:	e00a      	b.n	800aa92 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f8e2 	bl	800ac48 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aa84:	4b04      	ldr	r3, [pc, #16]	@ (800aa98 <USBD_SetConfig+0x118>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff f9ac 	bl	8009de8 <USBD_ClrClassConfig>
        break;
 800aa90:	bf00      	nop
    }
  }
}
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	2000300c 	.word	0x2000300c

0800aa9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d004      	beq.n	800aab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f8c9 	bl	800ac48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aab6:	e022      	b.n	800aafe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	dc02      	bgt.n	800aac8 <USBD_GetConfig+0x2c>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dc03      	bgt.n	800aace <USBD_GetConfig+0x32>
 800aac6:	e015      	b.n	800aaf4 <USBD_GetConfig+0x58>
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d00b      	beq.n	800aae4 <USBD_GetConfig+0x48>
 800aacc:	e012      	b.n	800aaf4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3308      	adds	r3, #8
 800aad8:	2201      	movs	r2, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f91d 	bl	800ad1c <USBD_CtlSendData>
        break;
 800aae2:	e00c      	b.n	800aafe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3304      	adds	r3, #4
 800aae8:	2201      	movs	r2, #1
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f915 	bl	800ad1c <USBD_CtlSendData>
        break;
 800aaf2:	e004      	b.n	800aafe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f8a6 	bl	800ac48 <USBD_CtlError>
        break;
 800aafc:	bf00      	nop
}
 800aafe:	bf00      	nop
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab16:	3b01      	subs	r3, #1
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d81e      	bhi.n	800ab5a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	88db      	ldrh	r3, [r3, #6]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d004      	beq.n	800ab2e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f88e 	bl	800ac48 <USBD_CtlError>
        break;
 800ab2c:	e01a      	b.n	800ab64 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f043 0202 	orr.w	r2, r3, #2
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	330c      	adds	r3, #12
 800ab4e:	2202      	movs	r2, #2
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f8e2 	bl	800ad1c <USBD_CtlSendData>
      break;
 800ab58:	e004      	b.n	800ab64 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f873 	bl	800ac48 <USBD_CtlError>
      break;
 800ab62:	bf00      	nop
  }
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	885b      	ldrh	r3, [r3, #2]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d106      	bne.n	800ab8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f926 	bl	800add8 <USBD_CtlSendStatus>
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba4:	3b01      	subs	r3, #1
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d80b      	bhi.n	800abc2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	885b      	ldrh	r3, [r3, #2]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d10c      	bne.n	800abcc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f90c 	bl	800add8 <USBD_CtlSendStatus>
      }
      break;
 800abc0:	e004      	b.n	800abcc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f83f 	bl	800ac48 <USBD_CtlError>
      break;
 800abca:	e000      	b.n	800abce <USBD_ClrFeature+0x3a>
      break;
 800abcc:	bf00      	nop
  }
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	781a      	ldrb	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	785a      	ldrb	r2, [r3, #1]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	3302      	adds	r3, #2
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	3303      	adds	r3, #3
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4413      	add	r3, r2
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	3305      	adds	r3, #5
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	021b      	lsls	r3, r3, #8
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	3306      	adds	r3, #6
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	3307      	adds	r3, #7
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	4413      	add	r3, r2
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	80da      	strh	r2, [r3, #6]

}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bc80      	pop	{r7}
 800ac46:	4770      	bx	lr

0800ac48 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac52:	2180      	movs	r1, #128	@ 0x80
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fc53 	bl	800b500 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fc4f 	bl	800b500 <USBD_LL_StallEP>
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b086      	sub	sp, #24
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d032      	beq.n	800ace6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f834 	bl	800acee <USBD_GetLen>
 800ac86:	4603      	mov	r3, r0
 800ac88:	3301      	adds	r3, #1
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	75fa      	strb	r2, [r7, #23]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4413      	add	r3, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7812      	ldrb	r2, [r2, #0]
 800aca4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	75fa      	strb	r2, [r7, #23]
 800acac:	461a      	mov	r2, r3
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	4413      	add	r3, r2
 800acb2:	2203      	movs	r2, #3
 800acb4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800acb6:	e012      	b.n	800acde <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	60fa      	str	r2, [r7, #12]
 800acbe:	7dfa      	ldrb	r2, [r7, #23]
 800acc0:	1c51      	adds	r1, r2, #1
 800acc2:	75f9      	strb	r1, [r7, #23]
 800acc4:	4611      	mov	r1, r2
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	440a      	add	r2, r1
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	75fa      	strb	r2, [r7, #23]
 800acd4:	461a      	mov	r2, r3
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	4413      	add	r3, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e8      	bne.n	800acb8 <USBD_GetString+0x4e>
    }
  }
}
 800ace6:	bf00      	nop
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acee:	b480      	push	{r7}
 800acf0:	b085      	sub	sp, #20
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800acfa:	e005      	b.n	800ad08 <USBD_GetLen+0x1a>
  {
    len++;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	3301      	adds	r3, #1
 800ad00:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3301      	adds	r3, #1
 800ad06:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1f5      	bne.n	800acfc <USBD_GetLen+0xe>
  }

  return len;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr

0800ad1c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	4613      	mov	r3, r2
 800ad28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad32:	88fa      	ldrh	r2, [r7, #6]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ad38:	88fa      	ldrh	r2, [r7, #6]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	2100      	movs	r1, #0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 fc64 	bl	800b612 <USBD_LL_Transmit>

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	2100      	movs	r1, #0
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 fc52 	bl	800b612 <USBD_LL_Transmit>

  return USBD_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	4613      	mov	r3, r2
 800ad84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2203      	movs	r2, #3
 800ad8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad8e:	88fa      	ldrh	r2, [r7, #6]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	2100      	movs	r1, #0
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 fc57 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	4613      	mov	r3, r2
 800adc0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	2100      	movs	r1, #0
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 fc45 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2204      	movs	r2, #4
 800ade4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ade8:	2300      	movs	r3, #0
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fc0f 	bl	800b612 <USBD_LL_Transmit>

  return USBD_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2205      	movs	r2, #5
 800ae0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2200      	movs	r2, #0
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fc1f 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4912      	ldr	r1, [pc, #72]	@ (800ae74 <MX_USB_DEVICE_Init+0x50>)
 800ae2c:	4812      	ldr	r0, [pc, #72]	@ (800ae78 <MX_USB_DEVICE_Init+0x54>)
 800ae2e:	f7fe ff62 	bl	8009cf6 <USBD_Init>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae38:	f7f6 fe38 	bl	8001aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae3c:	490f      	ldr	r1, [pc, #60]	@ (800ae7c <MX_USB_DEVICE_Init+0x58>)
 800ae3e:	480e      	ldr	r0, [pc, #56]	@ (800ae78 <MX_USB_DEVICE_Init+0x54>)
 800ae40:	f7fe ff84 	bl	8009d4c <USBD_RegisterClass>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae4a:	f7f6 fe2f 	bl	8001aac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae4e:	490c      	ldr	r1, [pc, #48]	@ (800ae80 <MX_USB_DEVICE_Init+0x5c>)
 800ae50:	4809      	ldr	r0, [pc, #36]	@ (800ae78 <MX_USB_DEVICE_Init+0x54>)
 800ae52:	f7fe feb5 	bl	8009bc0 <USBD_CDC_RegisterInterface>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae5c:	f7f6 fe26 	bl	8001aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae60:	4805      	ldr	r0, [pc, #20]	@ (800ae78 <MX_USB_DEVICE_Init+0x54>)
 800ae62:	f7fe ff8c 	bl	8009d7e <USBD_Start>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae6c:	f7f6 fe1e 	bl	8001aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae70:	bf00      	nop
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000150 	.word	0x20000150
 800ae78:	20003010 	.word	0x20003010
 800ae7c:	2000003c 	.word	0x2000003c
 800ae80:	20000140 	.word	0x20000140

0800ae84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4905      	ldr	r1, [pc, #20]	@ (800aea0 <CDC_Init_FS+0x1c>)
 800ae8c:	4805      	ldr	r0, [pc, #20]	@ (800aea4 <CDC_Init_FS+0x20>)
 800ae8e:	f7fe fead 	bl	8009bec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae92:	4905      	ldr	r1, [pc, #20]	@ (800aea8 <CDC_Init_FS+0x24>)
 800ae94:	4803      	ldr	r0, [pc, #12]	@ (800aea4 <CDC_Init_FS+0x20>)
 800ae96:	f7fe fec2 	bl	8009c1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	200036bc 	.word	0x200036bc
 800aea4:	20003010 	.word	0x20003010
 800aea8:	200032d4 	.word	0x200032d4

0800aeac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aeb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bc80      	pop	{r7}
 800aeb8:	4770      	bx	lr
	...

0800aebc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	6039      	str	r1, [r7, #0]
 800aec6:	71fb      	strb	r3, [r7, #7]
 800aec8:	4613      	mov	r3, r2
 800aeca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	2b23      	cmp	r3, #35	@ 0x23
 800aed0:	d84a      	bhi.n	800af68 <CDC_Control_FS+0xac>
 800aed2:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <CDC_Control_FS+0x1c>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800af69 	.word	0x0800af69
 800aedc:	0800af69 	.word	0x0800af69
 800aee0:	0800af69 	.word	0x0800af69
 800aee4:	0800af69 	.word	0x0800af69
 800aee8:	0800af69 	.word	0x0800af69
 800aeec:	0800af69 	.word	0x0800af69
 800aef0:	0800af69 	.word	0x0800af69
 800aef4:	0800af69 	.word	0x0800af69
 800aef8:	0800af69 	.word	0x0800af69
 800aefc:	0800af69 	.word	0x0800af69
 800af00:	0800af69 	.word	0x0800af69
 800af04:	0800af69 	.word	0x0800af69
 800af08:	0800af69 	.word	0x0800af69
 800af0c:	0800af69 	.word	0x0800af69
 800af10:	0800af69 	.word	0x0800af69
 800af14:	0800af69 	.word	0x0800af69
 800af18:	0800af69 	.word	0x0800af69
 800af1c:	0800af69 	.word	0x0800af69
 800af20:	0800af69 	.word	0x0800af69
 800af24:	0800af69 	.word	0x0800af69
 800af28:	0800af69 	.word	0x0800af69
 800af2c:	0800af69 	.word	0x0800af69
 800af30:	0800af69 	.word	0x0800af69
 800af34:	0800af69 	.word	0x0800af69
 800af38:	0800af69 	.word	0x0800af69
 800af3c:	0800af69 	.word	0x0800af69
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af69 	.word	0x0800af69
 800af48:	0800af69 	.word	0x0800af69
 800af4c:	0800af69 	.word	0x0800af69
 800af50:	0800af69 	.word	0x0800af69
 800af54:	0800af69 	.word	0x0800af69
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af69 	.word	0x0800af69
 800af60:	0800af69 	.word	0x0800af69
 800af64:	0800af69 	.word	0x0800af69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af68:	bf00      	nop
  }

  return (USBD_OK);
 800af6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop

0800af78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	4805      	ldr	r0, [pc, #20]	@ (800af9c <CDC_Receive_FS+0x24>)
 800af86:	f7fe fe4a 	bl	8009c1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af8a:	4804      	ldr	r0, [pc, #16]	@ (800af9c <CDC_Receive_FS+0x24>)
 800af8c:	f7fe fe89 	bl	8009ca2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20003010 	.word	0x20003010

0800afa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800afb0:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <CDC_Transmit_FS+0x48>)
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e00b      	b.n	800afde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800afc6:	887b      	ldrh	r3, [r7, #2]
 800afc8:	461a      	mov	r2, r3
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	4806      	ldr	r0, [pc, #24]	@ (800afe8 <CDC_Transmit_FS+0x48>)
 800afce:	f7fe fe0d 	bl	8009bec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800afd2:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <CDC_Transmit_FS+0x48>)
 800afd4:	f7fe fe36 	bl	8009c44 <USBD_CDC_TransmitPacket>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20003010 	.word	0x20003010

0800afec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2212      	movs	r2, #18
 800affc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800affe:	4b03      	ldr	r3, [pc, #12]	@ (800b00c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	bc80      	pop	{r7}
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	2000016c 	.word	0x2000016c

0800b010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	6039      	str	r1, [r7, #0]
 800b01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2204      	movs	r2, #4
 800b020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b022:	4b03      	ldr	r3, [pc, #12]	@ (800b030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	bc80      	pop	{r7}
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	20000180 	.word	0x20000180

0800b034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d105      	bne.n	800b052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4907      	ldr	r1, [pc, #28]	@ (800b068 <USBD_FS_ProductStrDescriptor+0x34>)
 800b04a:	4808      	ldr	r0, [pc, #32]	@ (800b06c <USBD_FS_ProductStrDescriptor+0x38>)
 800b04c:	f7ff fe0d 	bl	800ac6a <USBD_GetString>
 800b050:	e004      	b.n	800b05c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4904      	ldr	r1, [pc, #16]	@ (800b068 <USBD_FS_ProductStrDescriptor+0x34>)
 800b056:	4805      	ldr	r0, [pc, #20]	@ (800b06c <USBD_FS_ProductStrDescriptor+0x38>)
 800b058:	f7ff fe07 	bl	800ac6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b05c:	4b02      	ldr	r3, [pc, #8]	@ (800b068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20003aa4 	.word	0x20003aa4
 800b06c:	0800d1b8 	.word	0x0800d1b8

0800b070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	6039      	str	r1, [r7, #0]
 800b07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	4904      	ldr	r1, [pc, #16]	@ (800b090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b080:	4804      	ldr	r0, [pc, #16]	@ (800b094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b082:	f7ff fdf2 	bl	800ac6a <USBD_GetString>
  return USBD_StrDesc;
 800b086:	4b02      	ldr	r3, [pc, #8]	@ (800b090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	20003aa4 	.word	0x20003aa4
 800b094:	0800d1d0 	.word	0x0800d1d0

0800b098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	6039      	str	r1, [r7, #0]
 800b0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	221a      	movs	r2, #26
 800b0a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0aa:	f000 f843 	bl	800b134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0ae:	4b02      	ldr	r3, [pc, #8]	@ (800b0b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	20000184 	.word	0x20000184

0800b0bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	6039      	str	r1, [r7, #0]
 800b0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d105      	bne.n	800b0da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	4907      	ldr	r1, [pc, #28]	@ (800b0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0d2:	4808      	ldr	r0, [pc, #32]	@ (800b0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0d4:	f7ff fdc9 	bl	800ac6a <USBD_GetString>
 800b0d8:	e004      	b.n	800b0e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	4904      	ldr	r1, [pc, #16]	@ (800b0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0de:	4805      	ldr	r0, [pc, #20]	@ (800b0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0e0:	f7ff fdc3 	bl	800ac6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20003aa4 	.word	0x20003aa4
 800b0f4:	0800d1e4 	.word	0x0800d1e4

0800b0f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d105      	bne.n	800b116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4907      	ldr	r1, [pc, #28]	@ (800b12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b10e:	4808      	ldr	r0, [pc, #32]	@ (800b130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b110:	f7ff fdab 	bl	800ac6a <USBD_GetString>
 800b114:	e004      	b.n	800b120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	4904      	ldr	r1, [pc, #16]	@ (800b12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b11a:	4805      	ldr	r0, [pc, #20]	@ (800b130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b11c:	f7ff fda5 	bl	800ac6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b120:	4b02      	ldr	r3, [pc, #8]	@ (800b12c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20003aa4 	.word	0x20003aa4
 800b130:	0800d1f0 	.word	0x0800d1f0

0800b134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b13a:	4b0f      	ldr	r3, [pc, #60]	@ (800b178 <Get_SerialNum+0x44>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b140:	4b0e      	ldr	r3, [pc, #56]	@ (800b17c <Get_SerialNum+0x48>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b146:	4b0e      	ldr	r3, [pc, #56]	@ (800b180 <Get_SerialNum+0x4c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d009      	beq.n	800b16e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b15a:	2208      	movs	r2, #8
 800b15c:	4909      	ldr	r1, [pc, #36]	@ (800b184 <Get_SerialNum+0x50>)
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f814 	bl	800b18c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b164:	2204      	movs	r2, #4
 800b166:	4908      	ldr	r1, [pc, #32]	@ (800b188 <Get_SerialNum+0x54>)
 800b168:	68b8      	ldr	r0, [r7, #8]
 800b16a:	f000 f80f 	bl	800b18c <IntToUnicode>
  }
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	1ffff7e8 	.word	0x1ffff7e8
 800b17c:	1ffff7ec 	.word	0x1ffff7ec
 800b180:	1ffff7f0 	.word	0x1ffff7f0
 800b184:	20000186 	.word	0x20000186
 800b188:	20000196 	.word	0x20000196

0800b18c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b19e:	2300      	movs	r3, #0
 800b1a0:	75fb      	strb	r3, [r7, #23]
 800b1a2:	e027      	b.n	800b1f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	0f1b      	lsrs	r3, r3, #28
 800b1a8:	2b09      	cmp	r3, #9
 800b1aa:	d80b      	bhi.n	800b1c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	0f1b      	lsrs	r3, r3, #28
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3230      	adds	r2, #48	@ 0x30
 800b1be:	b2d2      	uxtb	r2, r2
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e00a      	b.n	800b1da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	0f1b      	lsrs	r3, r3, #28
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	440b      	add	r3, r1
 800b1d4:	3237      	adds	r2, #55	@ 0x37
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	011b      	lsls	r3, r3, #4
 800b1de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	75fb      	strb	r3, [r7, #23]
 800b1f4:	7dfa      	ldrb	r2, [r7, #23]
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d3d3      	bcc.n	800b1a4 <IntToUnicode+0x18>
  }
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	bc80      	pop	{r7}
 800b206:	4770      	bx	lr

0800b208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a0d      	ldr	r2, [pc, #52]	@ (800b24c <HAL_PCD_MspInit+0x44>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d113      	bne.n	800b242 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b21a:	4b0d      	ldr	r3, [pc, #52]	@ (800b250 <HAL_PCD_MspInit+0x48>)
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	4a0c      	ldr	r2, [pc, #48]	@ (800b250 <HAL_PCD_MspInit+0x48>)
 800b220:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b224:	61d3      	str	r3, [r2, #28]
 800b226:	4b0a      	ldr	r3, [pc, #40]	@ (800b250 <HAL_PCD_MspInit+0x48>)
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b232:	2200      	movs	r2, #0
 800b234:	2100      	movs	r1, #0
 800b236:	2014      	movs	r0, #20
 800b238:	f7f6 fe39 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b23c:	2014      	movs	r0, #20
 800b23e:	f7f6 fe52 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40005c00 	.word	0x40005c00
 800b250:	40021000 	.word	0x40021000

0800b254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800b268:	4619      	mov	r1, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	f7fe fdcf 	bl	8009e0e <USBD_LL_SetupStage>
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b28a:	78fa      	ldrb	r2, [r7, #3]
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	440b      	add	r3, r1
 800b298:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	f7fe fe01 	bl	8009ea8 <USBD_LL_DataOutStage>
}
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b2c0:	78fa      	ldrb	r2, [r7, #3]
 800b2c2:	6879      	ldr	r1, [r7, #4]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	440b      	add	r3, r1
 800b2ce:	333c      	adds	r3, #60	@ 0x3c
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	78fb      	ldrb	r3, [r7, #3]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	f7fe fe58 	bl	8009f8a <USBD_LL_DataInStage>
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe ff68 	bl	800a1c6 <USBD_LL_SOF>
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b306:	2301      	movs	r3, #1
 800b308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d001      	beq.n	800b316 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b312:	f7f6 fbcb 	bl	8001aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b31c:	7bfa      	ldrb	r2, [r7, #15]
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe ff18 	bl	800a156 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fed1 	bl	800a0d4 <USBD_LL_Reset>
}
 800b332:	bf00      	nop
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe ff12 	bl	800a174 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <HAL_PCD_SuspendCallback+0x30>)
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	4a03      	ldr	r2, [pc, #12]	@ (800b36c <HAL_PCD_SuspendCallback+0x30>)
 800b35e:	f043 0306 	orr.w	r3, r3, #6
 800b362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	e000ed00 	.word	0xe000ed00

0800b370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe ff0c 	bl	800a19c <USBD_LL_Resume>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b394:	4a28      	ldr	r2, [pc, #160]	@ (800b438 <USBD_LL_Init+0xac>)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a26      	ldr	r2, [pc, #152]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3a0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b3a4:	4b24      	ldr	r3, [pc, #144]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3a6:	4a25      	ldr	r2, [pc, #148]	@ (800b43c <USBD_LL_Init+0xb0>)
 800b3a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b3aa:	4b23      	ldr	r3, [pc, #140]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3ac:	2208      	movs	r2, #8
 800b3ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b3b0:	4b21      	ldr	r3, [pc, #132]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b3b6:	4b20      	ldr	r3, [pc, #128]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b3bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b3c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b3c8:	481b      	ldr	r0, [pc, #108]	@ (800b438 <USBD_LL_Init+0xac>)
 800b3ca:	f7f6 ff4e 	bl	800226a <HAL_PCD_Init>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b3d4:	f7f6 fb6a 	bl	8001aac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b3de:	2318      	movs	r3, #24
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f7f8 fc6c 	bl	8003cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b3ee:	2358      	movs	r3, #88	@ 0x58
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2180      	movs	r1, #128	@ 0x80
 800b3f4:	f7f8 fc64 	bl	8003cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b3fe:	23c0      	movs	r3, #192	@ 0xc0
 800b400:	2200      	movs	r2, #0
 800b402:	2181      	movs	r1, #129	@ 0x81
 800b404:	f7f8 fc5c 	bl	8003cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b40e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b412:	2200      	movs	r2, #0
 800b414:	2101      	movs	r1, #1
 800b416:	f7f8 fc53 	bl	8003cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b424:	2200      	movs	r2, #0
 800b426:	2182      	movs	r1, #130	@ 0x82
 800b428:	f7f8 fc4a 	bl	8003cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20003ca4 	.word	0x20003ca4
 800b43c:	40005c00 	.word	0x40005c00

0800b440 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b456:	4618      	mov	r0, r3
 800b458:	f7f7 f806 	bl	8002468 <HAL_PCD_Start>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f94e 	bl	800b704 <USBD_Get_USB_Status>
 800b468:	4603      	mov	r3, r0
 800b46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	4608      	mov	r0, r1
 800b480:	4611      	mov	r1, r2
 800b482:	461a      	mov	r2, r3
 800b484:	4603      	mov	r3, r0
 800b486:	70fb      	strb	r3, [r7, #3]
 800b488:	460b      	mov	r3, r1
 800b48a:	70bb      	strb	r3, [r7, #2]
 800b48c:	4613      	mov	r3, r2
 800b48e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b49e:	78bb      	ldrb	r3, [r7, #2]
 800b4a0:	883a      	ldrh	r2, [r7, #0]
 800b4a2:	78f9      	ldrb	r1, [r7, #3]
 800b4a4:	f7f7 f95b 	bl	800275e <HAL_PCD_EP_Open>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 f928 	bl	800b704 <USBD_Get_USB_Status>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b4dc:	78fa      	ldrb	r2, [r7, #3]
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f7 f999 	bl	8002818 <HAL_PCD_EP_Close>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 f909 	bl	800b704 <USBD_Get_USB_Status>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f7 fa41 	bl	80029a6 <HAL_PCD_EP_SetStall>
 800b524:	4603      	mov	r3, r0
 800b526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f8ea 	bl	800b704 <USBD_Get_USB_Status>
 800b530:	4603      	mov	r3, r0
 800b532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b534:	7bbb      	ldrb	r3, [r7, #14]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	460b      	mov	r3, r1
 800b548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b558:	78fa      	ldrb	r2, [r7, #3]
 800b55a:	4611      	mov	r1, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7f7 fa82 	bl	8002a66 <HAL_PCD_EP_ClrStall>
 800b562:	4603      	mov	r3, r0
 800b564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 f8cb 	bl	800b704 <USBD_Get_USB_Status>
 800b56e:	4603      	mov	r3, r0
 800b570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b572:	7bbb      	ldrb	r3, [r7, #14]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b58e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da0c      	bge.n	800b5b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b598:	78fb      	ldrb	r3, [r7, #3]
 800b59a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	e00b      	b.n	800b5ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5b2:	78fb      	ldrb	r3, [r7, #3]
 800b5b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5b8:	68f9      	ldr	r1, [r7, #12]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800b5c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bc80      	pop	{r7}
 800b5d2:	4770      	bx	lr

0800b5d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5ee:	78fa      	ldrb	r2, [r7, #3]
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7f7 f88e 	bl	8002714 <HAL_PCD_SetAddress>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 f880 	bl	800b704 <USBD_Get_USB_Status>
 800b604:	4603      	mov	r3, r0
 800b606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b608:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b086      	sub	sp, #24
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	461a      	mov	r2, r3
 800b61e:	460b      	mov	r3, r1
 800b620:	72fb      	strb	r3, [r7, #11]
 800b622:	4613      	mov	r3, r2
 800b624:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b634:	893b      	ldrh	r3, [r7, #8]
 800b636:	7af9      	ldrb	r1, [r7, #11]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f7f7 f97d 	bl	8002938 <HAL_PCD_EP_Transmit>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	4618      	mov	r0, r3
 800b646:	f000 f85d 	bl	800b704 <USBD_Get_USB_Status>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b64e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	461a      	mov	r2, r3
 800b664:	460b      	mov	r3, r1
 800b666:	72fb      	strb	r3, [r7, #11]
 800b668:	4613      	mov	r3, r2
 800b66a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b67a:	893b      	ldrh	r3, [r7, #8]
 800b67c:	7af9      	ldrb	r1, [r7, #11]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	f7f7 f912 	bl	80028a8 <HAL_PCD_EP_Receive>
 800b684:	4603      	mov	r3, r0
 800b686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f83a 	bl	800b704 <USBD_Get_USB_Status>
 800b690:	4603      	mov	r3, r0
 800b692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b694:	7dbb      	ldrb	r3, [r7, #22]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7f7 f928 	bl	800290a <HAL_PCD_EP_GetRxCount>
 800b6ba:	4603      	mov	r3, r0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6cc:	4b02      	ldr	r3, [pc, #8]	@ (800b6d8 <USBD_static_malloc+0x14>)
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bc80      	pop	{r7}
 800b6d6:	4770      	bx	lr
 800b6d8:	20003f94 	.word	0x20003f94

0800b6dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]

}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bc80      	pop	{r7}
 800b6ec:	4770      	bx	lr

0800b6ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr

0800b704 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	2b03      	cmp	r3, #3
 800b716:	d817      	bhi.n	800b748 <USBD_Get_USB_Status+0x44>
 800b718:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <USBD_Get_USB_Status+0x1c>)
 800b71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71e:	bf00      	nop
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b737 	.word	0x0800b737
 800b728:	0800b73d 	.word	0x0800b73d
 800b72c:	0800b743 	.word	0x0800b743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	73fb      	strb	r3, [r7, #15]
    break;
 800b734:	e00b      	b.n	800b74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b736:	2302      	movs	r3, #2
 800b738:	73fb      	strb	r3, [r7, #15]
    break;
 800b73a:	e008      	b.n	800b74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b73c:	2301      	movs	r3, #1
 800b73e:	73fb      	strb	r3, [r7, #15]
    break;
 800b740:	e005      	b.n	800b74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b742:	2302      	movs	r3, #2
 800b744:	73fb      	strb	r3, [r7, #15]
    break;
 800b746:	e002      	b.n	800b74e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b748:	2302      	movs	r3, #2
 800b74a:	73fb      	strb	r3, [r7, #15]
    break;
 800b74c:	bf00      	nop
  }
  return usb_status;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop

0800b75c <siprintf>:
 800b75c:	b40e      	push	{r1, r2, r3}
 800b75e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b762:	b500      	push	{lr}
 800b764:	b09c      	sub	sp, #112	@ 0x70
 800b766:	ab1d      	add	r3, sp, #116	@ 0x74
 800b768:	9002      	str	r0, [sp, #8]
 800b76a:	9006      	str	r0, [sp, #24]
 800b76c:	9107      	str	r1, [sp, #28]
 800b76e:	9104      	str	r1, [sp, #16]
 800b770:	4808      	ldr	r0, [pc, #32]	@ (800b794 <siprintf+0x38>)
 800b772:	4909      	ldr	r1, [pc, #36]	@ (800b798 <siprintf+0x3c>)
 800b774:	f853 2b04 	ldr.w	r2, [r3], #4
 800b778:	9105      	str	r1, [sp, #20]
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	a902      	add	r1, sp, #8
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	f000 f9b2 	bl	800bae8 <_svfiprintf_r>
 800b784:	2200      	movs	r2, #0
 800b786:	9b02      	ldr	r3, [sp, #8]
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	b01c      	add	sp, #112	@ 0x70
 800b78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b790:	b003      	add	sp, #12
 800b792:	4770      	bx	lr
 800b794:	200001a0 	.word	0x200001a0
 800b798:	ffff0208 	.word	0xffff0208

0800b79c <_vsiprintf_r>:
 800b79c:	b500      	push	{lr}
 800b79e:	b09b      	sub	sp, #108	@ 0x6c
 800b7a0:	9100      	str	r1, [sp, #0]
 800b7a2:	9104      	str	r1, [sp, #16]
 800b7a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b7a8:	9105      	str	r1, [sp, #20]
 800b7aa:	9102      	str	r1, [sp, #8]
 800b7ac:	4905      	ldr	r1, [pc, #20]	@ (800b7c4 <_vsiprintf_r+0x28>)
 800b7ae:	9103      	str	r1, [sp, #12]
 800b7b0:	4669      	mov	r1, sp
 800b7b2:	f000 f999 	bl	800bae8 <_svfiprintf_r>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	9b00      	ldr	r3, [sp, #0]
 800b7ba:	701a      	strb	r2, [r3, #0]
 800b7bc:	b01b      	add	sp, #108	@ 0x6c
 800b7be:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7c2:	bf00      	nop
 800b7c4:	ffff0208 	.word	0xffff0208

0800b7c8 <vsiprintf>:
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	460a      	mov	r2, r1
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	4802      	ldr	r0, [pc, #8]	@ (800b7d8 <vsiprintf+0x10>)
 800b7d0:	6800      	ldr	r0, [r0, #0]
 800b7d2:	f7ff bfe3 	b.w	800b79c <_vsiprintf_r>
 800b7d6:	bf00      	nop
 800b7d8:	200001a0 	.word	0x200001a0

0800b7dc <memset>:
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4402      	add	r2, r0
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d100      	bne.n	800b7e6 <memset+0xa>
 800b7e4:	4770      	bx	lr
 800b7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ea:	e7f9      	b.n	800b7e0 <memset+0x4>

0800b7ec <__errno>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	@ (800b7f4 <__errno+0x8>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	200001a0 	.word	0x200001a0

0800b7f8 <__libc_init_array>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	4d0c      	ldr	r5, [pc, #48]	@ (800b830 <__libc_init_array+0x38>)
 800b7fe:	4c0d      	ldr	r4, [pc, #52]	@ (800b834 <__libc_init_array+0x3c>)
 800b800:	1b64      	subs	r4, r4, r5
 800b802:	10a4      	asrs	r4, r4, #2
 800b804:	42a6      	cmp	r6, r4
 800b806:	d109      	bne.n	800b81c <__libc_init_array+0x24>
 800b808:	f001 fc4e 	bl	800d0a8 <_init>
 800b80c:	2600      	movs	r6, #0
 800b80e:	4d0a      	ldr	r5, [pc, #40]	@ (800b838 <__libc_init_array+0x40>)
 800b810:	4c0a      	ldr	r4, [pc, #40]	@ (800b83c <__libc_init_array+0x44>)
 800b812:	1b64      	subs	r4, r4, r5
 800b814:	10a4      	asrs	r4, r4, #2
 800b816:	42a6      	cmp	r6, r4
 800b818:	d105      	bne.n	800b826 <__libc_init_array+0x2e>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b820:	4798      	blx	r3
 800b822:	3601      	adds	r6, #1
 800b824:	e7ee      	b.n	800b804 <__libc_init_array+0xc>
 800b826:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82a:	4798      	blx	r3
 800b82c:	3601      	adds	r6, #1
 800b82e:	e7f2      	b.n	800b816 <__libc_init_array+0x1e>
 800b830:	0800d5b0 	.word	0x0800d5b0
 800b834:	0800d5b0 	.word	0x0800d5b0
 800b838:	0800d5b0 	.word	0x0800d5b0
 800b83c:	0800d5b4 	.word	0x0800d5b4

0800b840 <__retarget_lock_acquire_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_release_recursive>:
 800b842:	4770      	bx	lr

0800b844 <_free_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4605      	mov	r5, r0
 800b848:	2900      	cmp	r1, #0
 800b84a:	d040      	beq.n	800b8ce <_free_r+0x8a>
 800b84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b850:	1f0c      	subs	r4, r1, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	bfb8      	it	lt
 800b856:	18e4      	addlt	r4, r4, r3
 800b858:	f000 f8de 	bl	800ba18 <__malloc_lock>
 800b85c:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d0 <_free_r+0x8c>)
 800b85e:	6813      	ldr	r3, [r2, #0]
 800b860:	b933      	cbnz	r3, 800b870 <_free_r+0x2c>
 800b862:	6063      	str	r3, [r4, #4]
 800b864:	6014      	str	r4, [r2, #0]
 800b866:	4628      	mov	r0, r5
 800b868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86c:	f000 b8da 	b.w	800ba24 <__malloc_unlock>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d908      	bls.n	800b886 <_free_r+0x42>
 800b874:	6820      	ldr	r0, [r4, #0]
 800b876:	1821      	adds	r1, r4, r0
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf01      	itttt	eq
 800b87c:	6819      	ldreq	r1, [r3, #0]
 800b87e:	685b      	ldreq	r3, [r3, #4]
 800b880:	1809      	addeq	r1, r1, r0
 800b882:	6021      	streq	r1, [r4, #0]
 800b884:	e7ed      	b.n	800b862 <_free_r+0x1e>
 800b886:	461a      	mov	r2, r3
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	b10b      	cbz	r3, 800b890 <_free_r+0x4c>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d9fa      	bls.n	800b886 <_free_r+0x42>
 800b890:	6811      	ldr	r1, [r2, #0]
 800b892:	1850      	adds	r0, r2, r1
 800b894:	42a0      	cmp	r0, r4
 800b896:	d10b      	bne.n	800b8b0 <_free_r+0x6c>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	4401      	add	r1, r0
 800b89c:	1850      	adds	r0, r2, r1
 800b89e:	4283      	cmp	r3, r0
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	d1e0      	bne.n	800b866 <_free_r+0x22>
 800b8a4:	6818      	ldr	r0, [r3, #0]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	4408      	add	r0, r1
 800b8aa:	6010      	str	r0, [r2, #0]
 800b8ac:	6053      	str	r3, [r2, #4]
 800b8ae:	e7da      	b.n	800b866 <_free_r+0x22>
 800b8b0:	d902      	bls.n	800b8b8 <_free_r+0x74>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	e7d6      	b.n	800b866 <_free_r+0x22>
 800b8b8:	6820      	ldr	r0, [r4, #0]
 800b8ba:	1821      	adds	r1, r4, r0
 800b8bc:	428b      	cmp	r3, r1
 800b8be:	bf01      	itttt	eq
 800b8c0:	6819      	ldreq	r1, [r3, #0]
 800b8c2:	685b      	ldreq	r3, [r3, #4]
 800b8c4:	1809      	addeq	r1, r1, r0
 800b8c6:	6021      	streq	r1, [r4, #0]
 800b8c8:	6063      	str	r3, [r4, #4]
 800b8ca:	6054      	str	r4, [r2, #4]
 800b8cc:	e7cb      	b.n	800b866 <_free_r+0x22>
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	200042f8 	.word	0x200042f8

0800b8d4 <sbrk_aligned>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b914 <sbrk_aligned+0x40>)
 800b8d8:	460c      	mov	r4, r1
 800b8da:	6831      	ldr	r1, [r6, #0]
 800b8dc:	4605      	mov	r5, r0
 800b8de:	b911      	cbnz	r1, 800b8e6 <sbrk_aligned+0x12>
 800b8e0:	f000 fbaa 	bl	800c038 <_sbrk_r>
 800b8e4:	6030      	str	r0, [r6, #0]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f000 fba5 	bl	800c038 <_sbrk_r>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d103      	bne.n	800b8fa <sbrk_aligned+0x26>
 800b8f2:	f04f 34ff 	mov.w	r4, #4294967295
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	bd70      	pop	{r4, r5, r6, pc}
 800b8fa:	1cc4      	adds	r4, r0, #3
 800b8fc:	f024 0403 	bic.w	r4, r4, #3
 800b900:	42a0      	cmp	r0, r4
 800b902:	d0f8      	beq.n	800b8f6 <sbrk_aligned+0x22>
 800b904:	1a21      	subs	r1, r4, r0
 800b906:	4628      	mov	r0, r5
 800b908:	f000 fb96 	bl	800c038 <_sbrk_r>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d1f2      	bne.n	800b8f6 <sbrk_aligned+0x22>
 800b910:	e7ef      	b.n	800b8f2 <sbrk_aligned+0x1e>
 800b912:	bf00      	nop
 800b914:	200042f4 	.word	0x200042f4

0800b918 <_malloc_r>:
 800b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b91c:	1ccd      	adds	r5, r1, #3
 800b91e:	f025 0503 	bic.w	r5, r5, #3
 800b922:	3508      	adds	r5, #8
 800b924:	2d0c      	cmp	r5, #12
 800b926:	bf38      	it	cc
 800b928:	250c      	movcc	r5, #12
 800b92a:	2d00      	cmp	r5, #0
 800b92c:	4606      	mov	r6, r0
 800b92e:	db01      	blt.n	800b934 <_malloc_r+0x1c>
 800b930:	42a9      	cmp	r1, r5
 800b932:	d904      	bls.n	800b93e <_malloc_r+0x26>
 800b934:	230c      	movs	r3, #12
 800b936:	6033      	str	r3, [r6, #0]
 800b938:	2000      	movs	r0, #0
 800b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba14 <_malloc_r+0xfc>
 800b942:	f000 f869 	bl	800ba18 <__malloc_lock>
 800b946:	f8d8 3000 	ldr.w	r3, [r8]
 800b94a:	461c      	mov	r4, r3
 800b94c:	bb44      	cbnz	r4, 800b9a0 <_malloc_r+0x88>
 800b94e:	4629      	mov	r1, r5
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff ffbf 	bl	800b8d4 <sbrk_aligned>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	4604      	mov	r4, r0
 800b95a:	d158      	bne.n	800ba0e <_malloc_r+0xf6>
 800b95c:	f8d8 4000 	ldr.w	r4, [r8]
 800b960:	4627      	mov	r7, r4
 800b962:	2f00      	cmp	r7, #0
 800b964:	d143      	bne.n	800b9ee <_malloc_r+0xd6>
 800b966:	2c00      	cmp	r4, #0
 800b968:	d04b      	beq.n	800ba02 <_malloc_r+0xea>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	4639      	mov	r1, r7
 800b96e:	4630      	mov	r0, r6
 800b970:	eb04 0903 	add.w	r9, r4, r3
 800b974:	f000 fb60 	bl	800c038 <_sbrk_r>
 800b978:	4581      	cmp	r9, r0
 800b97a:	d142      	bne.n	800ba02 <_malloc_r+0xea>
 800b97c:	6821      	ldr	r1, [r4, #0]
 800b97e:	4630      	mov	r0, r6
 800b980:	1a6d      	subs	r5, r5, r1
 800b982:	4629      	mov	r1, r5
 800b984:	f7ff ffa6 	bl	800b8d4 <sbrk_aligned>
 800b988:	3001      	adds	r0, #1
 800b98a:	d03a      	beq.n	800ba02 <_malloc_r+0xea>
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	442b      	add	r3, r5
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	f8d8 3000 	ldr.w	r3, [r8]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	bb62      	cbnz	r2, 800b9f4 <_malloc_r+0xdc>
 800b99a:	f8c8 7000 	str.w	r7, [r8]
 800b99e:	e00f      	b.n	800b9c0 <_malloc_r+0xa8>
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	1b52      	subs	r2, r2, r5
 800b9a4:	d420      	bmi.n	800b9e8 <_malloc_r+0xd0>
 800b9a6:	2a0b      	cmp	r2, #11
 800b9a8:	d917      	bls.n	800b9da <_malloc_r+0xc2>
 800b9aa:	1961      	adds	r1, r4, r5
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	6025      	str	r5, [r4, #0]
 800b9b0:	bf18      	it	ne
 800b9b2:	6059      	strne	r1, [r3, #4]
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	bf08      	it	eq
 800b9b8:	f8c8 1000 	streq.w	r1, [r8]
 800b9bc:	5162      	str	r2, [r4, r5]
 800b9be:	604b      	str	r3, [r1, #4]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f82f 	bl	800ba24 <__malloc_unlock>
 800b9c6:	f104 000b 	add.w	r0, r4, #11
 800b9ca:	1d23      	adds	r3, r4, #4
 800b9cc:	f020 0007 	bic.w	r0, r0, #7
 800b9d0:	1ac2      	subs	r2, r0, r3
 800b9d2:	bf1c      	itt	ne
 800b9d4:	1a1b      	subne	r3, r3, r0
 800b9d6:	50a3      	strne	r3, [r4, r2]
 800b9d8:	e7af      	b.n	800b93a <_malloc_r+0x22>
 800b9da:	6862      	ldr	r2, [r4, #4]
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	bf0c      	ite	eq
 800b9e0:	f8c8 2000 	streq.w	r2, [r8]
 800b9e4:	605a      	strne	r2, [r3, #4]
 800b9e6:	e7eb      	b.n	800b9c0 <_malloc_r+0xa8>
 800b9e8:	4623      	mov	r3, r4
 800b9ea:	6864      	ldr	r4, [r4, #4]
 800b9ec:	e7ae      	b.n	800b94c <_malloc_r+0x34>
 800b9ee:	463c      	mov	r4, r7
 800b9f0:	687f      	ldr	r7, [r7, #4]
 800b9f2:	e7b6      	b.n	800b962 <_malloc_r+0x4a>
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	d1fb      	bne.n	800b9f4 <_malloc_r+0xdc>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	6053      	str	r3, [r2, #4]
 800ba00:	e7de      	b.n	800b9c0 <_malloc_r+0xa8>
 800ba02:	230c      	movs	r3, #12
 800ba04:	4630      	mov	r0, r6
 800ba06:	6033      	str	r3, [r6, #0]
 800ba08:	f000 f80c 	bl	800ba24 <__malloc_unlock>
 800ba0c:	e794      	b.n	800b938 <_malloc_r+0x20>
 800ba0e:	6005      	str	r5, [r0, #0]
 800ba10:	e7d6      	b.n	800b9c0 <_malloc_r+0xa8>
 800ba12:	bf00      	nop
 800ba14:	200042f8 	.word	0x200042f8

0800ba18 <__malloc_lock>:
 800ba18:	4801      	ldr	r0, [pc, #4]	@ (800ba20 <__malloc_lock+0x8>)
 800ba1a:	f7ff bf11 	b.w	800b840 <__retarget_lock_acquire_recursive>
 800ba1e:	bf00      	nop
 800ba20:	200042f0 	.word	0x200042f0

0800ba24 <__malloc_unlock>:
 800ba24:	4801      	ldr	r0, [pc, #4]	@ (800ba2c <__malloc_unlock+0x8>)
 800ba26:	f7ff bf0c 	b.w	800b842 <__retarget_lock_release_recursive>
 800ba2a:	bf00      	nop
 800ba2c:	200042f0 	.word	0x200042f0

0800ba30 <__ssputs_r>:
 800ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba34:	461f      	mov	r7, r3
 800ba36:	688e      	ldr	r6, [r1, #8]
 800ba38:	4682      	mov	sl, r0
 800ba3a:	42be      	cmp	r6, r7
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	4690      	mov	r8, r2
 800ba40:	680b      	ldr	r3, [r1, #0]
 800ba42:	d82d      	bhi.n	800baa0 <__ssputs_r+0x70>
 800ba44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba4c:	d026      	beq.n	800ba9c <__ssputs_r+0x6c>
 800ba4e:	6965      	ldr	r5, [r4, #20]
 800ba50:	6909      	ldr	r1, [r1, #16]
 800ba52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba56:	eba3 0901 	sub.w	r9, r3, r1
 800ba5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba5e:	1c7b      	adds	r3, r7, #1
 800ba60:	444b      	add	r3, r9
 800ba62:	106d      	asrs	r5, r5, #1
 800ba64:	429d      	cmp	r5, r3
 800ba66:	bf38      	it	cc
 800ba68:	461d      	movcc	r5, r3
 800ba6a:	0553      	lsls	r3, r2, #21
 800ba6c:	d527      	bpl.n	800babe <__ssputs_r+0x8e>
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7ff ff52 	bl	800b918 <_malloc_r>
 800ba74:	4606      	mov	r6, r0
 800ba76:	b360      	cbz	r0, 800bad2 <__ssputs_r+0xa2>
 800ba78:	464a      	mov	r2, r9
 800ba7a:	6921      	ldr	r1, [r4, #16]
 800ba7c:	f000 fafa 	bl	800c074 <memcpy>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	6126      	str	r6, [r4, #16]
 800ba8e:	444e      	add	r6, r9
 800ba90:	6026      	str	r6, [r4, #0]
 800ba92:	463e      	mov	r6, r7
 800ba94:	6165      	str	r5, [r4, #20]
 800ba96:	eba5 0509 	sub.w	r5, r5, r9
 800ba9a:	60a5      	str	r5, [r4, #8]
 800ba9c:	42be      	cmp	r6, r7
 800ba9e:	d900      	bls.n	800baa2 <__ssputs_r+0x72>
 800baa0:	463e      	mov	r6, r7
 800baa2:	4632      	mov	r2, r6
 800baa4:	4641      	mov	r1, r8
 800baa6:	6820      	ldr	r0, [r4, #0]
 800baa8:	f000 faac 	bl	800c004 <memmove>
 800baac:	2000      	movs	r0, #0
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	1b9b      	subs	r3, r3, r6
 800bab2:	60a3      	str	r3, [r4, #8]
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	4433      	add	r3, r6
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babe:	462a      	mov	r2, r5
 800bac0:	f000 fae6 	bl	800c090 <_realloc_r>
 800bac4:	4606      	mov	r6, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d1e0      	bne.n	800ba8c <__ssputs_r+0x5c>
 800baca:	4650      	mov	r0, sl
 800bacc:	6921      	ldr	r1, [r4, #16]
 800bace:	f7ff feb9 	bl	800b844 <_free_r>
 800bad2:	230c      	movs	r3, #12
 800bad4:	f8ca 3000 	str.w	r3, [sl]
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f04f 30ff 	mov.w	r0, #4294967295
 800bade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	e7e9      	b.n	800baba <__ssputs_r+0x8a>
	...

0800bae8 <_svfiprintf_r>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	4698      	mov	r8, r3
 800baee:	898b      	ldrh	r3, [r1, #12]
 800baf0:	4607      	mov	r7, r0
 800baf2:	061b      	lsls	r3, r3, #24
 800baf4:	460d      	mov	r5, r1
 800baf6:	4614      	mov	r4, r2
 800baf8:	b09d      	sub	sp, #116	@ 0x74
 800bafa:	d510      	bpl.n	800bb1e <_svfiprintf_r+0x36>
 800bafc:	690b      	ldr	r3, [r1, #16]
 800bafe:	b973      	cbnz	r3, 800bb1e <_svfiprintf_r+0x36>
 800bb00:	2140      	movs	r1, #64	@ 0x40
 800bb02:	f7ff ff09 	bl	800b918 <_malloc_r>
 800bb06:	6028      	str	r0, [r5, #0]
 800bb08:	6128      	str	r0, [r5, #16]
 800bb0a:	b930      	cbnz	r0, 800bb1a <_svfiprintf_r+0x32>
 800bb0c:	230c      	movs	r3, #12
 800bb0e:	603b      	str	r3, [r7, #0]
 800bb10:	f04f 30ff 	mov.w	r0, #4294967295
 800bb14:	b01d      	add	sp, #116	@ 0x74
 800bb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1a:	2340      	movs	r3, #64	@ 0x40
 800bb1c:	616b      	str	r3, [r5, #20]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb22:	2320      	movs	r3, #32
 800bb24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb28:	2330      	movs	r3, #48	@ 0x30
 800bb2a:	f04f 0901 	mov.w	r9, #1
 800bb2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bccc <_svfiprintf_r+0x1e4>
 800bb36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3a:	4623      	mov	r3, r4
 800bb3c:	469a      	mov	sl, r3
 800bb3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb42:	b10a      	cbz	r2, 800bb48 <_svfiprintf_r+0x60>
 800bb44:	2a25      	cmp	r2, #37	@ 0x25
 800bb46:	d1f9      	bne.n	800bb3c <_svfiprintf_r+0x54>
 800bb48:	ebba 0b04 	subs.w	fp, sl, r4
 800bb4c:	d00b      	beq.n	800bb66 <_svfiprintf_r+0x7e>
 800bb4e:	465b      	mov	r3, fp
 800bb50:	4622      	mov	r2, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	4638      	mov	r0, r7
 800bb56:	f7ff ff6b 	bl	800ba30 <__ssputs_r>
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	f000 80a7 	beq.w	800bcae <_svfiprintf_r+0x1c6>
 800bb60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb62:	445a      	add	r2, fp
 800bb64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb66:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 809f 	beq.w	800bcae <_svfiprintf_r+0x1c6>
 800bb70:	2300      	movs	r3, #0
 800bb72:	f04f 32ff 	mov.w	r2, #4294967295
 800bb76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb7a:	f10a 0a01 	add.w	sl, sl, #1
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	9307      	str	r3, [sp, #28]
 800bb82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb86:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb88:	4654      	mov	r4, sl
 800bb8a:	2205      	movs	r2, #5
 800bb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb90:	484e      	ldr	r0, [pc, #312]	@ (800bccc <_svfiprintf_r+0x1e4>)
 800bb92:	f000 fa61 	bl	800c058 <memchr>
 800bb96:	9a04      	ldr	r2, [sp, #16]
 800bb98:	b9d8      	cbnz	r0, 800bbd2 <_svfiprintf_r+0xea>
 800bb9a:	06d0      	lsls	r0, r2, #27
 800bb9c:	bf44      	itt	mi
 800bb9e:	2320      	movmi	r3, #32
 800bba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bba4:	0711      	lsls	r1, r2, #28
 800bba6:	bf44      	itt	mi
 800bba8:	232b      	movmi	r3, #43	@ 0x2b
 800bbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbae:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbb4:	d015      	beq.n	800bbe2 <_svfiprintf_r+0xfa>
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f04f 0c0a 	mov.w	ip, #10
 800bbbe:	9a07      	ldr	r2, [sp, #28]
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc6:	3b30      	subs	r3, #48	@ 0x30
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	d94b      	bls.n	800bc64 <_svfiprintf_r+0x17c>
 800bbcc:	b1b0      	cbz	r0, 800bbfc <_svfiprintf_r+0x114>
 800bbce:	9207      	str	r2, [sp, #28]
 800bbd0:	e014      	b.n	800bbfc <_svfiprintf_r+0x114>
 800bbd2:	eba0 0308 	sub.w	r3, r0, r8
 800bbd6:	fa09 f303 	lsl.w	r3, r9, r3
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	46a2      	mov	sl, r4
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	e7d2      	b.n	800bb88 <_svfiprintf_r+0xa0>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	1d19      	adds	r1, r3, #4
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	9103      	str	r1, [sp, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bfbb      	ittet	lt
 800bbee:	425b      	neglt	r3, r3
 800bbf0:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf4:	9307      	strge	r3, [sp, #28]
 800bbf6:	9307      	strlt	r3, [sp, #28]
 800bbf8:	bfb8      	it	lt
 800bbfa:	9204      	strlt	r2, [sp, #16]
 800bbfc:	7823      	ldrb	r3, [r4, #0]
 800bbfe:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc00:	d10a      	bne.n	800bc18 <_svfiprintf_r+0x130>
 800bc02:	7863      	ldrb	r3, [r4, #1]
 800bc04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc06:	d132      	bne.n	800bc6e <_svfiprintf_r+0x186>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	3402      	adds	r4, #2
 800bc0c:	1d1a      	adds	r2, r3, #4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	9203      	str	r2, [sp, #12]
 800bc12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc16:	9305      	str	r3, [sp, #20]
 800bc18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bcd0 <_svfiprintf_r+0x1e8>
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	4650      	mov	r0, sl
 800bc20:	7821      	ldrb	r1, [r4, #0]
 800bc22:	f000 fa19 	bl	800c058 <memchr>
 800bc26:	b138      	cbz	r0, 800bc38 <_svfiprintf_r+0x150>
 800bc28:	2240      	movs	r2, #64	@ 0x40
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	eba0 000a 	sub.w	r0, r0, sl
 800bc30:	4082      	lsls	r2, r0
 800bc32:	4313      	orrs	r3, r2
 800bc34:	3401      	adds	r4, #1
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3c:	2206      	movs	r2, #6
 800bc3e:	4825      	ldr	r0, [pc, #148]	@ (800bcd4 <_svfiprintf_r+0x1ec>)
 800bc40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc44:	f000 fa08 	bl	800c058 <memchr>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d036      	beq.n	800bcba <_svfiprintf_r+0x1d2>
 800bc4c:	4b22      	ldr	r3, [pc, #136]	@ (800bcd8 <_svfiprintf_r+0x1f0>)
 800bc4e:	bb1b      	cbnz	r3, 800bc98 <_svfiprintf_r+0x1b0>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	3307      	adds	r3, #7
 800bc54:	f023 0307 	bic.w	r3, r3, #7
 800bc58:	3308      	adds	r3, #8
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5e:	4433      	add	r3, r6
 800bc60:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc62:	e76a      	b.n	800bb3a <_svfiprintf_r+0x52>
 800bc64:	460c      	mov	r4, r1
 800bc66:	2001      	movs	r0, #1
 800bc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6c:	e7a8      	b.n	800bbc0 <_svfiprintf_r+0xd8>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f04f 0c0a 	mov.w	ip, #10
 800bc74:	4619      	mov	r1, r3
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc80:	3a30      	subs	r2, #48	@ 0x30
 800bc82:	2a09      	cmp	r2, #9
 800bc84:	d903      	bls.n	800bc8e <_svfiprintf_r+0x1a6>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c6      	beq.n	800bc18 <_svfiprintf_r+0x130>
 800bc8a:	9105      	str	r1, [sp, #20]
 800bc8c:	e7c4      	b.n	800bc18 <_svfiprintf_r+0x130>
 800bc8e:	4604      	mov	r4, r0
 800bc90:	2301      	movs	r3, #1
 800bc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc96:	e7f0      	b.n	800bc7a <_svfiprintf_r+0x192>
 800bc98:	ab03      	add	r3, sp, #12
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4638      	mov	r0, r7
 800bca0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcdc <_svfiprintf_r+0x1f4>)
 800bca2:	a904      	add	r1, sp, #16
 800bca4:	f3af 8000 	nop.w
 800bca8:	1c42      	adds	r2, r0, #1
 800bcaa:	4606      	mov	r6, r0
 800bcac:	d1d6      	bne.n	800bc5c <_svfiprintf_r+0x174>
 800bcae:	89ab      	ldrh	r3, [r5, #12]
 800bcb0:	065b      	lsls	r3, r3, #25
 800bcb2:	f53f af2d 	bmi.w	800bb10 <_svfiprintf_r+0x28>
 800bcb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcb8:	e72c      	b.n	800bb14 <_svfiprintf_r+0x2c>
 800bcba:	ab03      	add	r3, sp, #12
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <_svfiprintf_r+0x1f4>)
 800bcc4:	a904      	add	r1, sp, #16
 800bcc6:	f000 f87d 	bl	800bdc4 <_printf_i>
 800bcca:	e7ed      	b.n	800bca8 <_svfiprintf_r+0x1c0>
 800bccc:	0800d39c 	.word	0x0800d39c
 800bcd0:	0800d3a2 	.word	0x0800d3a2
 800bcd4:	0800d3a6 	.word	0x0800d3a6
 800bcd8:	00000000 	.word	0x00000000
 800bcdc:	0800ba31 	.word	0x0800ba31

0800bce0 <_printf_common>:
 800bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce4:	4616      	mov	r6, r2
 800bce6:	4698      	mov	r8, r3
 800bce8:	688a      	ldr	r2, [r1, #8]
 800bcea:	690b      	ldr	r3, [r1, #16]
 800bcec:	4607      	mov	r7, r0
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	bfb8      	it	lt
 800bcf2:	4613      	movlt	r3, r2
 800bcf4:	6033      	str	r3, [r6, #0]
 800bcf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd00:	b10a      	cbz	r2, 800bd06 <_printf_common+0x26>
 800bd02:	3301      	adds	r3, #1
 800bd04:	6033      	str	r3, [r6, #0]
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	0699      	lsls	r1, r3, #26
 800bd0a:	bf42      	ittt	mi
 800bd0c:	6833      	ldrmi	r3, [r6, #0]
 800bd0e:	3302      	addmi	r3, #2
 800bd10:	6033      	strmi	r3, [r6, #0]
 800bd12:	6825      	ldr	r5, [r4, #0]
 800bd14:	f015 0506 	ands.w	r5, r5, #6
 800bd18:	d106      	bne.n	800bd28 <_printf_common+0x48>
 800bd1a:	f104 0a19 	add.w	sl, r4, #25
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	6832      	ldr	r2, [r6, #0]
 800bd22:	1a9b      	subs	r3, r3, r2
 800bd24:	42ab      	cmp	r3, r5
 800bd26:	dc2b      	bgt.n	800bd80 <_printf_common+0xa0>
 800bd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd2c:	6822      	ldr	r2, [r4, #0]
 800bd2e:	3b00      	subs	r3, #0
 800bd30:	bf18      	it	ne
 800bd32:	2301      	movne	r3, #1
 800bd34:	0692      	lsls	r2, r2, #26
 800bd36:	d430      	bmi.n	800bd9a <_printf_common+0xba>
 800bd38:	4641      	mov	r1, r8
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd40:	47c8      	blx	r9
 800bd42:	3001      	adds	r0, #1
 800bd44:	d023      	beq.n	800bd8e <_printf_common+0xae>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	6922      	ldr	r2, [r4, #16]
 800bd4a:	f003 0306 	and.w	r3, r3, #6
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	bf14      	ite	ne
 800bd52:	2500      	movne	r5, #0
 800bd54:	6833      	ldreq	r3, [r6, #0]
 800bd56:	f04f 0600 	mov.w	r6, #0
 800bd5a:	bf08      	it	eq
 800bd5c:	68e5      	ldreq	r5, [r4, #12]
 800bd5e:	f104 041a 	add.w	r4, r4, #26
 800bd62:	bf08      	it	eq
 800bd64:	1aed      	subeq	r5, r5, r3
 800bd66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bd6a:	bf08      	it	eq
 800bd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bfc4      	itt	gt
 800bd74:	1a9b      	subgt	r3, r3, r2
 800bd76:	18ed      	addgt	r5, r5, r3
 800bd78:	42b5      	cmp	r5, r6
 800bd7a:	d11a      	bne.n	800bdb2 <_printf_common+0xd2>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	e008      	b.n	800bd92 <_printf_common+0xb2>
 800bd80:	2301      	movs	r3, #1
 800bd82:	4652      	mov	r2, sl
 800bd84:	4641      	mov	r1, r8
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c8      	blx	r9
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d103      	bne.n	800bd96 <_printf_common+0xb6>
 800bd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd96:	3501      	adds	r5, #1
 800bd98:	e7c1      	b.n	800bd1e <_printf_common+0x3e>
 800bd9a:	2030      	movs	r0, #48	@ 0x30
 800bd9c:	18e1      	adds	r1, r4, r3
 800bd9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bda8:	4422      	add	r2, r4
 800bdaa:	3302      	adds	r3, #2
 800bdac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdb0:	e7c2      	b.n	800bd38 <_printf_common+0x58>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4641      	mov	r1, r8
 800bdb8:	4638      	mov	r0, r7
 800bdba:	47c8      	blx	r9
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d0e6      	beq.n	800bd8e <_printf_common+0xae>
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	e7d9      	b.n	800bd78 <_printf_common+0x98>

0800bdc4 <_printf_i>:
 800bdc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	7e0f      	ldrb	r7, [r1, #24]
 800bdca:	4691      	mov	r9, r2
 800bdcc:	2f78      	cmp	r7, #120	@ 0x78
 800bdce:	4680      	mov	r8, r0
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	469a      	mov	sl, r3
 800bdd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bdd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdda:	d807      	bhi.n	800bdec <_printf_i+0x28>
 800bddc:	2f62      	cmp	r7, #98	@ 0x62
 800bdde:	d80a      	bhi.n	800bdf6 <_printf_i+0x32>
 800bde0:	2f00      	cmp	r7, #0
 800bde2:	f000 80d3 	beq.w	800bf8c <_printf_i+0x1c8>
 800bde6:	2f58      	cmp	r7, #88	@ 0x58
 800bde8:	f000 80ba 	beq.w	800bf60 <_printf_i+0x19c>
 800bdec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bdf4:	e03a      	b.n	800be6c <_printf_i+0xa8>
 800bdf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdfa:	2b15      	cmp	r3, #21
 800bdfc:	d8f6      	bhi.n	800bdec <_printf_i+0x28>
 800bdfe:	a101      	add	r1, pc, #4	@ (adr r1, 800be04 <_printf_i+0x40>)
 800be00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be04:	0800be5d 	.word	0x0800be5d
 800be08:	0800be71 	.word	0x0800be71
 800be0c:	0800bded 	.word	0x0800bded
 800be10:	0800bded 	.word	0x0800bded
 800be14:	0800bded 	.word	0x0800bded
 800be18:	0800bded 	.word	0x0800bded
 800be1c:	0800be71 	.word	0x0800be71
 800be20:	0800bded 	.word	0x0800bded
 800be24:	0800bded 	.word	0x0800bded
 800be28:	0800bded 	.word	0x0800bded
 800be2c:	0800bded 	.word	0x0800bded
 800be30:	0800bf73 	.word	0x0800bf73
 800be34:	0800be9b 	.word	0x0800be9b
 800be38:	0800bf2d 	.word	0x0800bf2d
 800be3c:	0800bded 	.word	0x0800bded
 800be40:	0800bded 	.word	0x0800bded
 800be44:	0800bf95 	.word	0x0800bf95
 800be48:	0800bded 	.word	0x0800bded
 800be4c:	0800be9b 	.word	0x0800be9b
 800be50:	0800bded 	.word	0x0800bded
 800be54:	0800bded 	.word	0x0800bded
 800be58:	0800bf35 	.word	0x0800bf35
 800be5c:	6833      	ldr	r3, [r6, #0]
 800be5e:	1d1a      	adds	r2, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6032      	str	r2, [r6, #0]
 800be64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be6c:	2301      	movs	r3, #1
 800be6e:	e09e      	b.n	800bfae <_printf_i+0x1ea>
 800be70:	6833      	ldr	r3, [r6, #0]
 800be72:	6820      	ldr	r0, [r4, #0]
 800be74:	1d19      	adds	r1, r3, #4
 800be76:	6031      	str	r1, [r6, #0]
 800be78:	0606      	lsls	r6, r0, #24
 800be7a:	d501      	bpl.n	800be80 <_printf_i+0xbc>
 800be7c:	681d      	ldr	r5, [r3, #0]
 800be7e:	e003      	b.n	800be88 <_printf_i+0xc4>
 800be80:	0645      	lsls	r5, r0, #25
 800be82:	d5fb      	bpl.n	800be7c <_printf_i+0xb8>
 800be84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be88:	2d00      	cmp	r5, #0
 800be8a:	da03      	bge.n	800be94 <_printf_i+0xd0>
 800be8c:	232d      	movs	r3, #45	@ 0x2d
 800be8e:	426d      	negs	r5, r5
 800be90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be94:	230a      	movs	r3, #10
 800be96:	4859      	ldr	r0, [pc, #356]	@ (800bffc <_printf_i+0x238>)
 800be98:	e011      	b.n	800bebe <_printf_i+0xfa>
 800be9a:	6821      	ldr	r1, [r4, #0]
 800be9c:	6833      	ldr	r3, [r6, #0]
 800be9e:	0608      	lsls	r0, r1, #24
 800bea0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bea4:	d402      	bmi.n	800beac <_printf_i+0xe8>
 800bea6:	0649      	lsls	r1, r1, #25
 800bea8:	bf48      	it	mi
 800beaa:	b2ad      	uxthmi	r5, r5
 800beac:	2f6f      	cmp	r7, #111	@ 0x6f
 800beae:	6033      	str	r3, [r6, #0]
 800beb0:	bf14      	ite	ne
 800beb2:	230a      	movne	r3, #10
 800beb4:	2308      	moveq	r3, #8
 800beb6:	4851      	ldr	r0, [pc, #324]	@ (800bffc <_printf_i+0x238>)
 800beb8:	2100      	movs	r1, #0
 800beba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bebe:	6866      	ldr	r6, [r4, #4]
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	bfa8      	it	ge
 800bec4:	6821      	ldrge	r1, [r4, #0]
 800bec6:	60a6      	str	r6, [r4, #8]
 800bec8:	bfa4      	itt	ge
 800beca:	f021 0104 	bicge.w	r1, r1, #4
 800bece:	6021      	strge	r1, [r4, #0]
 800bed0:	b90d      	cbnz	r5, 800bed6 <_printf_i+0x112>
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d04b      	beq.n	800bf6e <_printf_i+0x1aa>
 800bed6:	4616      	mov	r6, r2
 800bed8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bedc:	fb03 5711 	mls	r7, r3, r1, r5
 800bee0:	5dc7      	ldrb	r7, [r0, r7]
 800bee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bee6:	462f      	mov	r7, r5
 800bee8:	42bb      	cmp	r3, r7
 800beea:	460d      	mov	r5, r1
 800beec:	d9f4      	bls.n	800bed8 <_printf_i+0x114>
 800beee:	2b08      	cmp	r3, #8
 800bef0:	d10b      	bne.n	800bf0a <_printf_i+0x146>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	07df      	lsls	r7, r3, #31
 800bef6:	d508      	bpl.n	800bf0a <_printf_i+0x146>
 800bef8:	6923      	ldr	r3, [r4, #16]
 800befa:	6861      	ldr	r1, [r4, #4]
 800befc:	4299      	cmp	r1, r3
 800befe:	bfde      	ittt	le
 800bf00:	2330      	movle	r3, #48	@ 0x30
 800bf02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf0a:	1b92      	subs	r2, r2, r6
 800bf0c:	6122      	str	r2, [r4, #16]
 800bf0e:	464b      	mov	r3, r9
 800bf10:	4621      	mov	r1, r4
 800bf12:	4640      	mov	r0, r8
 800bf14:	f8cd a000 	str.w	sl, [sp]
 800bf18:	aa03      	add	r2, sp, #12
 800bf1a:	f7ff fee1 	bl	800bce0 <_printf_common>
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d14a      	bne.n	800bfb8 <_printf_i+0x1f4>
 800bf22:	f04f 30ff 	mov.w	r0, #4294967295
 800bf26:	b004      	add	sp, #16
 800bf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	f043 0320 	orr.w	r3, r3, #32
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	2778      	movs	r7, #120	@ 0x78
 800bf36:	4832      	ldr	r0, [pc, #200]	@ (800c000 <_printf_i+0x23c>)
 800bf38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	6831      	ldr	r1, [r6, #0]
 800bf40:	061f      	lsls	r7, r3, #24
 800bf42:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf46:	d402      	bmi.n	800bf4e <_printf_i+0x18a>
 800bf48:	065f      	lsls	r7, r3, #25
 800bf4a:	bf48      	it	mi
 800bf4c:	b2ad      	uxthmi	r5, r5
 800bf4e:	6031      	str	r1, [r6, #0]
 800bf50:	07d9      	lsls	r1, r3, #31
 800bf52:	bf44      	itt	mi
 800bf54:	f043 0320 	orrmi.w	r3, r3, #32
 800bf58:	6023      	strmi	r3, [r4, #0]
 800bf5a:	b11d      	cbz	r5, 800bf64 <_printf_i+0x1a0>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	e7ab      	b.n	800beb8 <_printf_i+0xf4>
 800bf60:	4826      	ldr	r0, [pc, #152]	@ (800bffc <_printf_i+0x238>)
 800bf62:	e7e9      	b.n	800bf38 <_printf_i+0x174>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	f023 0320 	bic.w	r3, r3, #32
 800bf6a:	6023      	str	r3, [r4, #0]
 800bf6c:	e7f6      	b.n	800bf5c <_printf_i+0x198>
 800bf6e:	4616      	mov	r6, r2
 800bf70:	e7bd      	b.n	800beee <_printf_i+0x12a>
 800bf72:	6833      	ldr	r3, [r6, #0]
 800bf74:	6825      	ldr	r5, [r4, #0]
 800bf76:	1d18      	adds	r0, r3, #4
 800bf78:	6961      	ldr	r1, [r4, #20]
 800bf7a:	6030      	str	r0, [r6, #0]
 800bf7c:	062e      	lsls	r6, r5, #24
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	d501      	bpl.n	800bf86 <_printf_i+0x1c2>
 800bf82:	6019      	str	r1, [r3, #0]
 800bf84:	e002      	b.n	800bf8c <_printf_i+0x1c8>
 800bf86:	0668      	lsls	r0, r5, #25
 800bf88:	d5fb      	bpl.n	800bf82 <_printf_i+0x1be>
 800bf8a:	8019      	strh	r1, [r3, #0]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4616      	mov	r6, r2
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	e7bc      	b.n	800bf0e <_printf_i+0x14a>
 800bf94:	6833      	ldr	r3, [r6, #0]
 800bf96:	2100      	movs	r1, #0
 800bf98:	1d1a      	adds	r2, r3, #4
 800bf9a:	6032      	str	r2, [r6, #0]
 800bf9c:	681e      	ldr	r6, [r3, #0]
 800bf9e:	6862      	ldr	r2, [r4, #4]
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 f859 	bl	800c058 <memchr>
 800bfa6:	b108      	cbz	r0, 800bfac <_printf_i+0x1e8>
 800bfa8:	1b80      	subs	r0, r0, r6
 800bfaa:	6060      	str	r0, [r4, #4]
 800bfac:	6863      	ldr	r3, [r4, #4]
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfb6:	e7aa      	b.n	800bf0e <_printf_i+0x14a>
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4649      	mov	r1, r9
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	47d0      	blx	sl
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	d0ad      	beq.n	800bf22 <_printf_i+0x15e>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	079b      	lsls	r3, r3, #30
 800bfca:	d413      	bmi.n	800bff4 <_printf_i+0x230>
 800bfcc:	68e0      	ldr	r0, [r4, #12]
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	4298      	cmp	r0, r3
 800bfd2:	bfb8      	it	lt
 800bfd4:	4618      	movlt	r0, r3
 800bfd6:	e7a6      	b.n	800bf26 <_printf_i+0x162>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4632      	mov	r2, r6
 800bfdc:	4649      	mov	r1, r9
 800bfde:	4640      	mov	r0, r8
 800bfe0:	47d0      	blx	sl
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d09d      	beq.n	800bf22 <_printf_i+0x15e>
 800bfe6:	3501      	adds	r5, #1
 800bfe8:	68e3      	ldr	r3, [r4, #12]
 800bfea:	9903      	ldr	r1, [sp, #12]
 800bfec:	1a5b      	subs	r3, r3, r1
 800bfee:	42ab      	cmp	r3, r5
 800bff0:	dcf2      	bgt.n	800bfd8 <_printf_i+0x214>
 800bff2:	e7eb      	b.n	800bfcc <_printf_i+0x208>
 800bff4:	2500      	movs	r5, #0
 800bff6:	f104 0619 	add.w	r6, r4, #25
 800bffa:	e7f5      	b.n	800bfe8 <_printf_i+0x224>
 800bffc:	0800d3ad 	.word	0x0800d3ad
 800c000:	0800d3be 	.word	0x0800d3be

0800c004 <memmove>:
 800c004:	4288      	cmp	r0, r1
 800c006:	b510      	push	{r4, lr}
 800c008:	eb01 0402 	add.w	r4, r1, r2
 800c00c:	d902      	bls.n	800c014 <memmove+0x10>
 800c00e:	4284      	cmp	r4, r0
 800c010:	4623      	mov	r3, r4
 800c012:	d807      	bhi.n	800c024 <memmove+0x20>
 800c014:	1e43      	subs	r3, r0, #1
 800c016:	42a1      	cmp	r1, r4
 800c018:	d008      	beq.n	800c02c <memmove+0x28>
 800c01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c022:	e7f8      	b.n	800c016 <memmove+0x12>
 800c024:	4601      	mov	r1, r0
 800c026:	4402      	add	r2, r0
 800c028:	428a      	cmp	r2, r1
 800c02a:	d100      	bne.n	800c02e <memmove+0x2a>
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c036:	e7f7      	b.n	800c028 <memmove+0x24>

0800c038 <_sbrk_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	2300      	movs	r3, #0
 800c03c:	4d05      	ldr	r5, [pc, #20]	@ (800c054 <_sbrk_r+0x1c>)
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f5 fde2 	bl	8001c0c <_sbrk>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_sbrk_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_sbrk_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	200042ec 	.word	0x200042ec

0800c058 <memchr>:
 800c058:	4603      	mov	r3, r0
 800c05a:	b510      	push	{r4, lr}
 800c05c:	b2c9      	uxtb	r1, r1
 800c05e:	4402      	add	r2, r0
 800c060:	4293      	cmp	r3, r2
 800c062:	4618      	mov	r0, r3
 800c064:	d101      	bne.n	800c06a <memchr+0x12>
 800c066:	2000      	movs	r0, #0
 800c068:	e003      	b.n	800c072 <memchr+0x1a>
 800c06a:	7804      	ldrb	r4, [r0, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	428c      	cmp	r4, r1
 800c070:	d1f6      	bne.n	800c060 <memchr+0x8>
 800c072:	bd10      	pop	{r4, pc}

0800c074 <memcpy>:
 800c074:	440a      	add	r2, r1
 800c076:	4291      	cmp	r1, r2
 800c078:	f100 33ff 	add.w	r3, r0, #4294967295
 800c07c:	d100      	bne.n	800c080 <memcpy+0xc>
 800c07e:	4770      	bx	lr
 800c080:	b510      	push	{r4, lr}
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	4291      	cmp	r1, r2
 800c088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c08c:	d1f9      	bne.n	800c082 <memcpy+0xe>
 800c08e:	bd10      	pop	{r4, pc}

0800c090 <_realloc_r>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	4680      	mov	r8, r0
 800c096:	4615      	mov	r5, r2
 800c098:	460c      	mov	r4, r1
 800c09a:	b921      	cbnz	r1, 800c0a6 <_realloc_r+0x16>
 800c09c:	4611      	mov	r1, r2
 800c09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a2:	f7ff bc39 	b.w	800b918 <_malloc_r>
 800c0a6:	b92a      	cbnz	r2, 800c0b4 <_realloc_r+0x24>
 800c0a8:	f7ff fbcc 	bl	800b844 <_free_r>
 800c0ac:	2400      	movs	r4, #0
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b4:	f000 f81a 	bl	800c0ec <_malloc_usable_size_r>
 800c0b8:	4285      	cmp	r5, r0
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	d802      	bhi.n	800c0c4 <_realloc_r+0x34>
 800c0be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0c2:	d8f4      	bhi.n	800c0ae <_realloc_r+0x1e>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f7ff fc26 	bl	800b918 <_malloc_r>
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d0ec      	beq.n	800c0ac <_realloc_r+0x1c>
 800c0d2:	42b5      	cmp	r5, r6
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	bf28      	it	cs
 800c0da:	4632      	movcs	r2, r6
 800c0dc:	f7ff ffca 	bl	800c074 <memcpy>
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	f7ff fbae 	bl	800b844 <_free_r>
 800c0e8:	463c      	mov	r4, r7
 800c0ea:	e7e0      	b.n	800c0ae <_realloc_r+0x1e>

0800c0ec <_malloc_usable_size_r>:
 800c0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0f0:	1f18      	subs	r0, r3, #4
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bfbc      	itt	lt
 800c0f6:	580b      	ldrlt	r3, [r1, r0]
 800c0f8:	18c0      	addlt	r0, r0, r3
 800c0fa:	4770      	bx	lr

0800c0fc <sin>:
 800c0fc:	b530      	push	{r4, r5, lr}
 800c0fe:	4d20      	ldr	r5, [pc, #128]	@ (800c180 <sin+0x84>)
 800c100:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800c104:	42ac      	cmp	r4, r5
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	b087      	sub	sp, #28
 800c10c:	d806      	bhi.n	800c11c <sin+0x20>
 800c10e:	2300      	movs	r3, #0
 800c110:	2200      	movs	r2, #0
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	2300      	movs	r3, #0
 800c116:	f000 f8f7 	bl	800c308 <__kernel_sin>
 800c11a:	e004      	b.n	800c126 <sin+0x2a>
 800c11c:	4d19      	ldr	r5, [pc, #100]	@ (800c184 <sin+0x88>)
 800c11e:	42ac      	cmp	r4, r5
 800c120:	d903      	bls.n	800c12a <sin+0x2e>
 800c122:	f7f4 f8e1 	bl	80002e8 <__aeabi_dsub>
 800c126:	b007      	add	sp, #28
 800c128:	bd30      	pop	{r4, r5, pc}
 800c12a:	aa02      	add	r2, sp, #8
 800c12c:	f000 f9a4 	bl	800c478 <__ieee754_rem_pio2>
 800c130:	f000 0003 	and.w	r0, r0, #3
 800c134:	2801      	cmp	r0, #1
 800c136:	d009      	beq.n	800c14c <sin+0x50>
 800c138:	2802      	cmp	r0, #2
 800c13a:	d00e      	beq.n	800c15a <sin+0x5e>
 800c13c:	b9c0      	cbnz	r0, 800c170 <sin+0x74>
 800c13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c142:	2301      	movs	r3, #1
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14a:	e7e4      	b.n	800c116 <sin+0x1a>
 800c14c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c154:	f000 f818 	bl	800c188 <__kernel_cos>
 800c158:	e7e5      	b.n	800c126 <sin+0x2a>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c166:	f000 f8cf 	bl	800c308 <__kernel_sin>
 800c16a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800c16e:	e7da      	b.n	800c126 <sin+0x2a>
 800c170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c178:	f000 f806 	bl	800c188 <__kernel_cos>
 800c17c:	e7f5      	b.n	800c16a <sin+0x6e>
 800c17e:	bf00      	nop
 800c180:	3fe921fb 	.word	0x3fe921fb
 800c184:	7fefffff 	.word	0x7fefffff

0800c188 <__kernel_cos>:
 800c188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800c190:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	e9cd 2300 	strd	r2, r3, [sp]
 800c19c:	d204      	bcs.n	800c1a8 <__kernel_cos+0x20>
 800c19e:	f7f4 fcf5 	bl	8000b8c <__aeabi_d2iz>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f000 8086 	beq.w	800c2b4 <__kernel_cos+0x12c>
 800c1a8:	4642      	mov	r2, r8
 800c1aa:	464b      	mov	r3, r9
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	f7f4 fa52 	bl	8000658 <__aeabi_dmul>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4b4e      	ldr	r3, [pc, #312]	@ (800c2f0 <__kernel_cos+0x168>)
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	f7f4 fa4c 	bl	8000658 <__aeabi_dmul>
 800c1c0:	a33f      	add	r3, pc, #252	@ (adr r3, 800c2c0 <__kernel_cos+0x138>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	4682      	mov	sl, r0
 800c1c8:	468b      	mov	fp, r1
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7f4 fa43 	bl	8000658 <__aeabi_dmul>
 800c1d2:	a33d      	add	r3, pc, #244	@ (adr r3, 800c2c8 <__kernel_cos+0x140>)
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f7f4 f888 	bl	80002ec <__adddf3>
 800c1dc:	4622      	mov	r2, r4
 800c1de:	462b      	mov	r3, r5
 800c1e0:	f7f4 fa3a 	bl	8000658 <__aeabi_dmul>
 800c1e4:	a33a      	add	r3, pc, #232	@ (adr r3, 800c2d0 <__kernel_cos+0x148>)
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	f7f4 f87d 	bl	80002e8 <__aeabi_dsub>
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	f7f4 fa31 	bl	8000658 <__aeabi_dmul>
 800c1f6:	a338      	add	r3, pc, #224	@ (adr r3, 800c2d8 <__kernel_cos+0x150>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f7f4 f876 	bl	80002ec <__adddf3>
 800c200:	4622      	mov	r2, r4
 800c202:	462b      	mov	r3, r5
 800c204:	f7f4 fa28 	bl	8000658 <__aeabi_dmul>
 800c208:	a335      	add	r3, pc, #212	@ (adr r3, 800c2e0 <__kernel_cos+0x158>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 f86b 	bl	80002e8 <__aeabi_dsub>
 800c212:	4622      	mov	r2, r4
 800c214:	462b      	mov	r3, r5
 800c216:	f7f4 fa1f 	bl	8000658 <__aeabi_dmul>
 800c21a:	a333      	add	r3, pc, #204	@ (adr r3, 800c2e8 <__kernel_cos+0x160>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f4 f864 	bl	80002ec <__adddf3>
 800c224:	4622      	mov	r2, r4
 800c226:	462b      	mov	r3, r5
 800c228:	f7f4 fa16 	bl	8000658 <__aeabi_dmul>
 800c22c:	4622      	mov	r2, r4
 800c22e:	462b      	mov	r3, r5
 800c230:	f7f4 fa12 	bl	8000658 <__aeabi_dmul>
 800c234:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c238:	4604      	mov	r4, r0
 800c23a:	460d      	mov	r5, r1
 800c23c:	4640      	mov	r0, r8
 800c23e:	4649      	mov	r1, r9
 800c240:	f7f4 fa0a 	bl	8000658 <__aeabi_dmul>
 800c244:	460b      	mov	r3, r1
 800c246:	4602      	mov	r2, r0
 800c248:	4629      	mov	r1, r5
 800c24a:	4620      	mov	r0, r4
 800c24c:	f7f4 f84c 	bl	80002e8 <__aeabi_dsub>
 800c250:	4b28      	ldr	r3, [pc, #160]	@ (800c2f4 <__kernel_cos+0x16c>)
 800c252:	4680      	mov	r8, r0
 800c254:	429e      	cmp	r6, r3
 800c256:	4689      	mov	r9, r1
 800c258:	d80e      	bhi.n	800c278 <__kernel_cos+0xf0>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4650      	mov	r0, sl
 800c260:	4659      	mov	r1, fp
 800c262:	f7f4 f841 	bl	80002e8 <__aeabi_dsub>
 800c266:	4602      	mov	r2, r0
 800c268:	2000      	movs	r0, #0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4922      	ldr	r1, [pc, #136]	@ (800c2f8 <__kernel_cos+0x170>)
 800c26e:	f7f4 f83b 	bl	80002e8 <__aeabi_dsub>
 800c272:	b003      	add	sp, #12
 800c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c278:	2400      	movs	r4, #0
 800c27a:	4b20      	ldr	r3, [pc, #128]	@ (800c2fc <__kernel_cos+0x174>)
 800c27c:	4622      	mov	r2, r4
 800c27e:	429e      	cmp	r6, r3
 800c280:	bf8c      	ite	hi
 800c282:	4d1f      	ldrhi	r5, [pc, #124]	@ (800c300 <__kernel_cos+0x178>)
 800c284:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800c288:	462b      	mov	r3, r5
 800c28a:	2000      	movs	r0, #0
 800c28c:	491a      	ldr	r1, [pc, #104]	@ (800c2f8 <__kernel_cos+0x170>)
 800c28e:	f7f4 f82b 	bl	80002e8 <__aeabi_dsub>
 800c292:	4622      	mov	r2, r4
 800c294:	4606      	mov	r6, r0
 800c296:	460f      	mov	r7, r1
 800c298:	462b      	mov	r3, r5
 800c29a:	4650      	mov	r0, sl
 800c29c:	4659      	mov	r1, fp
 800c29e:	f7f4 f823 	bl	80002e8 <__aeabi_dsub>
 800c2a2:	4642      	mov	r2, r8
 800c2a4:	464b      	mov	r3, r9
 800c2a6:	f7f4 f81f 	bl	80002e8 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	e7dc      	b.n	800c26e <__kernel_cos+0xe6>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4910      	ldr	r1, [pc, #64]	@ (800c2f8 <__kernel_cos+0x170>)
 800c2b8:	e7db      	b.n	800c272 <__kernel_cos+0xea>
 800c2ba:	bf00      	nop
 800c2bc:	f3af 8000 	nop.w
 800c2c0:	be8838d4 	.word	0xbe8838d4
 800c2c4:	bda8fae9 	.word	0xbda8fae9
 800c2c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2cc:	3e21ee9e 	.word	0x3e21ee9e
 800c2d0:	809c52ad 	.word	0x809c52ad
 800c2d4:	3e927e4f 	.word	0x3e927e4f
 800c2d8:	19cb1590 	.word	0x19cb1590
 800c2dc:	3efa01a0 	.word	0x3efa01a0
 800c2e0:	16c15177 	.word	0x16c15177
 800c2e4:	3f56c16c 	.word	0x3f56c16c
 800c2e8:	5555554c 	.word	0x5555554c
 800c2ec:	3fa55555 	.word	0x3fa55555
 800c2f0:	3fe00000 	.word	0x3fe00000
 800c2f4:	3fd33332 	.word	0x3fd33332
 800c2f8:	3ff00000 	.word	0x3ff00000
 800c2fc:	3fe90000 	.word	0x3fe90000
 800c300:	3fd20000 	.word	0x3fd20000
 800c304:	00000000 	.word	0x00000000

0800c308 <__kernel_sin>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	461f      	mov	r7, r3
 800c30e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c312:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c316:	4604      	mov	r4, r0
 800c318:	460d      	mov	r5, r1
 800c31a:	4616      	mov	r6, r2
 800c31c:	b085      	sub	sp, #20
 800c31e:	d203      	bcs.n	800c328 <__kernel_sin+0x20>
 800c320:	f7f4 fc34 	bl	8000b8c <__aeabi_d2iz>
 800c324:	2800      	cmp	r0, #0
 800c326:	d051      	beq.n	800c3cc <__kernel_sin+0xc4>
 800c328:	4622      	mov	r2, r4
 800c32a:	462b      	mov	r3, r5
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 f992 	bl	8000658 <__aeabi_dmul>
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4620      	mov	r0, r4
 800c33e:	4629      	mov	r1, r5
 800c340:	f7f4 f98a 	bl	8000658 <__aeabi_dmul>
 800c344:	a33e      	add	r3, pc, #248	@ (adr r3, 800c440 <__kernel_sin+0x138>)
 800c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34a:	4680      	mov	r8, r0
 800c34c:	4689      	mov	r9, r1
 800c34e:	4650      	mov	r0, sl
 800c350:	4659      	mov	r1, fp
 800c352:	f7f4 f981 	bl	8000658 <__aeabi_dmul>
 800c356:	a33c      	add	r3, pc, #240	@ (adr r3, 800c448 <__kernel_sin+0x140>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f3 ffc4 	bl	80002e8 <__aeabi_dsub>
 800c360:	4652      	mov	r2, sl
 800c362:	465b      	mov	r3, fp
 800c364:	f7f4 f978 	bl	8000658 <__aeabi_dmul>
 800c368:	a339      	add	r3, pc, #228	@ (adr r3, 800c450 <__kernel_sin+0x148>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f3 ffbd 	bl	80002ec <__adddf3>
 800c372:	4652      	mov	r2, sl
 800c374:	465b      	mov	r3, fp
 800c376:	f7f4 f96f 	bl	8000658 <__aeabi_dmul>
 800c37a:	a337      	add	r3, pc, #220	@ (adr r3, 800c458 <__kernel_sin+0x150>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f3 ffb2 	bl	80002e8 <__aeabi_dsub>
 800c384:	4652      	mov	r2, sl
 800c386:	465b      	mov	r3, fp
 800c388:	f7f4 f966 	bl	8000658 <__aeabi_dmul>
 800c38c:	a334      	add	r3, pc, #208	@ (adr r3, 800c460 <__kernel_sin+0x158>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ffab 	bl	80002ec <__adddf3>
 800c396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c398:	e9cd 0100 	strd	r0, r1, [sp]
 800c39c:	b9db      	cbnz	r3, 800c3d6 <__kernel_sin+0xce>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	f7f4 f957 	bl	8000658 <__aeabi_dmul>
 800c3aa:	a32f      	add	r3, pc, #188	@ (adr r3, 800c468 <__kernel_sin+0x160>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f3 ff9a 	bl	80002e8 <__aeabi_dsub>
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	f7f4 f94e 	bl	8000658 <__aeabi_dmul>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	f7f3 ff92 	bl	80002ec <__adddf3>
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	460d      	mov	r5, r1
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	b005      	add	sp, #20
 800c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4b24      	ldr	r3, [pc, #144]	@ (800c470 <__kernel_sin+0x168>)
 800c3de:	f7f4 f93b 	bl	8000658 <__aeabi_dmul>
 800c3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f4 f933 	bl	8000658 <__aeabi_dmul>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fa:	f7f3 ff75 	bl	80002e8 <__aeabi_dsub>
 800c3fe:	4652      	mov	r2, sl
 800c400:	465b      	mov	r3, fp
 800c402:	f7f4 f929 	bl	8000658 <__aeabi_dmul>
 800c406:	4632      	mov	r2, r6
 800c408:	463b      	mov	r3, r7
 800c40a:	f7f3 ff6d 	bl	80002e8 <__aeabi_dsub>
 800c40e:	a316      	add	r3, pc, #88	@ (adr r3, 800c468 <__kernel_sin+0x160>)
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f4 f91c 	bl	8000658 <__aeabi_dmul>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f3 ff60 	bl	80002ec <__adddf3>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	4620      	mov	r0, r4
 800c432:	4629      	mov	r1, r5
 800c434:	f7f3 ff58 	bl	80002e8 <__aeabi_dsub>
 800c438:	e7c6      	b.n	800c3c8 <__kernel_sin+0xc0>
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	5acfd57c 	.word	0x5acfd57c
 800c444:	3de5d93a 	.word	0x3de5d93a
 800c448:	8a2b9ceb 	.word	0x8a2b9ceb
 800c44c:	3e5ae5e6 	.word	0x3e5ae5e6
 800c450:	57b1fe7d 	.word	0x57b1fe7d
 800c454:	3ec71de3 	.word	0x3ec71de3
 800c458:	19c161d5 	.word	0x19c161d5
 800c45c:	3f2a01a0 	.word	0x3f2a01a0
 800c460:	1110f8a6 	.word	0x1110f8a6
 800c464:	3f811111 	.word	0x3f811111
 800c468:	55555549 	.word	0x55555549
 800c46c:	3fc55555 	.word	0x3fc55555
 800c470:	3fe00000 	.word	0x3fe00000
 800c474:	00000000 	.word	0x00000000

0800c478 <__ieee754_rem_pio2>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	4bc4      	ldr	r3, [pc, #784]	@ (800c790 <__ieee754_rem_pio2+0x318>)
 800c47e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800c482:	b08d      	sub	sp, #52	@ 0x34
 800c484:	4598      	cmp	r8, r3
 800c486:	4606      	mov	r6, r0
 800c488:	460f      	mov	r7, r1
 800c48a:	4614      	mov	r4, r2
 800c48c:	9104      	str	r1, [sp, #16]
 800c48e:	d807      	bhi.n	800c4a0 <__ieee754_rem_pio2+0x28>
 800c490:	e9c2 6700 	strd	r6, r7, [r2]
 800c494:	2300      	movs	r3, #0
 800c496:	2200      	movs	r2, #0
 800c498:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c49c:	2500      	movs	r5, #0
 800c49e:	e026      	b.n	800c4ee <__ieee754_rem_pio2+0x76>
 800c4a0:	4bbc      	ldr	r3, [pc, #752]	@ (800c794 <__ieee754_rem_pio2+0x31c>)
 800c4a2:	4598      	cmp	r8, r3
 800c4a4:	d876      	bhi.n	800c594 <__ieee754_rem_pio2+0x11c>
 800c4a6:	9b04      	ldr	r3, [sp, #16]
 800c4a8:	4dbb      	ldr	r5, [pc, #748]	@ (800c798 <__ieee754_rem_pio2+0x320>)
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	a3aa      	add	r3, pc, #680	@ (adr r3, 800c758 <__ieee754_rem_pio2+0x2e0>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	dd38      	ble.n	800c526 <__ieee754_rem_pio2+0xae>
 800c4b4:	f7f3 ff18 	bl	80002e8 <__aeabi_dsub>
 800c4b8:	45a8      	cmp	r8, r5
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	d01a      	beq.n	800c4f6 <__ieee754_rem_pio2+0x7e>
 800c4c0:	a3a7      	add	r3, pc, #668	@ (adr r3, 800c760 <__ieee754_rem_pio2+0x2e8>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f3 ff0f 	bl	80002e8 <__aeabi_dsub>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4680      	mov	r8, r0
 800c4d0:	4689      	mov	r9, r1
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f3 ff07 	bl	80002e8 <__aeabi_dsub>
 800c4da:	a3a1      	add	r3, pc, #644	@ (adr r3, 800c760 <__ieee754_rem_pio2+0x2e8>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f7f3 ff02 	bl	80002e8 <__aeabi_dsub>
 800c4e4:	2501      	movs	r5, #1
 800c4e6:	e9c4 8900 	strd	r8, r9, [r4]
 800c4ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	b00d      	add	sp, #52	@ 0x34
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	a39c      	add	r3, pc, #624	@ (adr r3, 800c768 <__ieee754_rem_pio2+0x2f0>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 fef4 	bl	80002e8 <__aeabi_dsub>
 800c500:	a39b      	add	r3, pc, #620	@ (adr r3, 800c770 <__ieee754_rem_pio2+0x2f8>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	4606      	mov	r6, r0
 800c508:	460f      	mov	r7, r1
 800c50a:	f7f3 feed 	bl	80002e8 <__aeabi_dsub>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4680      	mov	r8, r0
 800c514:	4689      	mov	r9, r1
 800c516:	4630      	mov	r0, r6
 800c518:	4639      	mov	r1, r7
 800c51a:	f7f3 fee5 	bl	80002e8 <__aeabi_dsub>
 800c51e:	a394      	add	r3, pc, #592	@ (adr r3, 800c770 <__ieee754_rem_pio2+0x2f8>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	e7dc      	b.n	800c4e0 <__ieee754_rem_pio2+0x68>
 800c526:	f7f3 fee1 	bl	80002ec <__adddf3>
 800c52a:	45a8      	cmp	r8, r5
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	d018      	beq.n	800c564 <__ieee754_rem_pio2+0xec>
 800c532:	a38b      	add	r3, pc, #556	@ (adr r3, 800c760 <__ieee754_rem_pio2+0x2e8>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f3 fed8 	bl	80002ec <__adddf3>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	4680      	mov	r8, r0
 800c542:	4689      	mov	r9, r1
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	f7f3 fece 	bl	80002e8 <__aeabi_dsub>
 800c54c:	a384      	add	r3, pc, #528	@ (adr r3, 800c760 <__ieee754_rem_pio2+0x2e8>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f7f3 fecb 	bl	80002ec <__adddf3>
 800c556:	f04f 35ff 	mov.w	r5, #4294967295
 800c55a:	e9c4 8900 	strd	r8, r9, [r4]
 800c55e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c562:	e7c4      	b.n	800c4ee <__ieee754_rem_pio2+0x76>
 800c564:	a380      	add	r3, pc, #512	@ (adr r3, 800c768 <__ieee754_rem_pio2+0x2f0>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f7f3 febf 	bl	80002ec <__adddf3>
 800c56e:	a380      	add	r3, pc, #512	@ (adr r3, 800c770 <__ieee754_rem_pio2+0x2f8>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	f7f3 feb8 	bl	80002ec <__adddf3>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4680      	mov	r8, r0
 800c582:	4689      	mov	r9, r1
 800c584:	4630      	mov	r0, r6
 800c586:	4639      	mov	r1, r7
 800c588:	f7f3 feae 	bl	80002e8 <__aeabi_dsub>
 800c58c:	a378      	add	r3, pc, #480	@ (adr r3, 800c770 <__ieee754_rem_pio2+0x2f8>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	e7de      	b.n	800c552 <__ieee754_rem_pio2+0xda>
 800c594:	4b81      	ldr	r3, [pc, #516]	@ (800c79c <__ieee754_rem_pio2+0x324>)
 800c596:	4598      	cmp	r8, r3
 800c598:	f200 80cf 	bhi.w	800c73a <__ieee754_rem_pio2+0x2c2>
 800c59c:	f000 f962 	bl	800c864 <fabs>
 800c5a0:	a375      	add	r3, pc, #468	@ (adr r3, 800c778 <__ieee754_rem_pio2+0x300>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	f7f4 f855 	bl	8000658 <__aeabi_dmul>
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4b7b      	ldr	r3, [pc, #492]	@ (800c7a0 <__ieee754_rem_pio2+0x328>)
 800c5b2:	f7f3 fe9b 	bl	80002ec <__adddf3>
 800c5b6:	f7f4 fae9 	bl	8000b8c <__aeabi_d2iz>
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	f7f3 ffe2 	bl	8000584 <__aeabi_i2d>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5c8:	a363      	add	r3, pc, #396	@ (adr r3, 800c758 <__ieee754_rem_pio2+0x2e0>)
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f7f4 f843 	bl	8000658 <__aeabi_dmul>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fe85 	bl	80002e8 <__aeabi_dsub>
 800c5de:	a360      	add	r3, pc, #384	@ (adr r3, 800c760 <__ieee754_rem_pio2+0x2e8>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	4682      	mov	sl, r0
 800c5e6:	468b      	mov	fp, r1
 800c5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ec:	f7f4 f834 	bl	8000658 <__aeabi_dmul>
 800c5f0:	2d1f      	cmp	r5, #31
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	dc0c      	bgt.n	800c612 <__ieee754_rem_pio2+0x19a>
 800c5f8:	4b6a      	ldr	r3, [pc, #424]	@ (800c7a4 <__ieee754_rem_pio2+0x32c>)
 800c5fa:	1e6a      	subs	r2, r5, #1
 800c5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c600:	4543      	cmp	r3, r8
 800c602:	d006      	beq.n	800c612 <__ieee754_rem_pio2+0x19a>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	4650      	mov	r0, sl
 800c60a:	4659      	mov	r1, fp
 800c60c:	f7f3 fe6c 	bl	80002e8 <__aeabi_dsub>
 800c610:	e00e      	b.n	800c630 <__ieee754_rem_pio2+0x1b8>
 800c612:	463b      	mov	r3, r7
 800c614:	4632      	mov	r2, r6
 800c616:	4650      	mov	r0, sl
 800c618:	4659      	mov	r1, fp
 800c61a:	f7f3 fe65 	bl	80002e8 <__aeabi_dsub>
 800c61e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c628:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c62c:	2b10      	cmp	r3, #16
 800c62e:	dc02      	bgt.n	800c636 <__ieee754_rem_pio2+0x1be>
 800c630:	e9c4 0100 	strd	r0, r1, [r4]
 800c634:	e039      	b.n	800c6aa <__ieee754_rem_pio2+0x232>
 800c636:	a34c      	add	r3, pc, #304	@ (adr r3, 800c768 <__ieee754_rem_pio2+0x2f0>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c640:	f7f4 f80a 	bl	8000658 <__aeabi_dmul>
 800c644:	4606      	mov	r6, r0
 800c646:	460f      	mov	r7, r1
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4650      	mov	r0, sl
 800c64e:	4659      	mov	r1, fp
 800c650:	f7f3 fe4a 	bl	80002e8 <__aeabi_dsub>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4680      	mov	r8, r0
 800c65a:	4689      	mov	r9, r1
 800c65c:	4650      	mov	r0, sl
 800c65e:	4659      	mov	r1, fp
 800c660:	f7f3 fe42 	bl	80002e8 <__aeabi_dsub>
 800c664:	4632      	mov	r2, r6
 800c666:	463b      	mov	r3, r7
 800c668:	f7f3 fe3e 	bl	80002e8 <__aeabi_dsub>
 800c66c:	a340      	add	r3, pc, #256	@ (adr r3, 800c770 <__ieee754_rem_pio2+0x2f8>)
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	4606      	mov	r6, r0
 800c674:	460f      	mov	r7, r1
 800c676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c67a:	f7f3 ffed 	bl	8000658 <__aeabi_dmul>
 800c67e:	4632      	mov	r2, r6
 800c680:	463b      	mov	r3, r7
 800c682:	f7f3 fe31 	bl	80002e8 <__aeabi_dsub>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	4640      	mov	r0, r8
 800c690:	4649      	mov	r1, r9
 800c692:	f7f3 fe29 	bl	80002e8 <__aeabi_dsub>
 800c696:	9a05      	ldr	r2, [sp, #20]
 800c698:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	2b31      	cmp	r3, #49	@ 0x31
 800c6a0:	dc20      	bgt.n	800c6e4 <__ieee754_rem_pio2+0x26c>
 800c6a2:	46c2      	mov	sl, r8
 800c6a4:	46cb      	mov	fp, r9
 800c6a6:	e9c4 0100 	strd	r0, r1, [r4]
 800c6aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	464b      	mov	r3, r9
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	f7f3 fe17 	bl	80002e8 <__aeabi_dsub>
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4632      	mov	r2, r6
 800c6be:	f7f3 fe13 	bl	80002e8 <__aeabi_dsub>
 800c6c2:	9b04      	ldr	r3, [sp, #16]
 800c6c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f6bf af10 	bge.w	800c4ee <__ieee754_rem_pio2+0x76>
 800c6ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c6d2:	6063      	str	r3, [r4, #4]
 800c6d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6d8:	f8c4 8000 	str.w	r8, [r4]
 800c6dc:	60a0      	str	r0, [r4, #8]
 800c6de:	60e3      	str	r3, [r4, #12]
 800c6e0:	426d      	negs	r5, r5
 800c6e2:	e704      	b.n	800c4ee <__ieee754_rem_pio2+0x76>
 800c6e4:	a326      	add	r3, pc, #152	@ (adr r3, 800c780 <__ieee754_rem_pio2+0x308>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ee:	f7f3 ffb3 	bl	8000658 <__aeabi_dmul>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	4649      	mov	r1, r9
 800c6fe:	f7f3 fdf3 	bl	80002e8 <__aeabi_dsub>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4682      	mov	sl, r0
 800c708:	468b      	mov	fp, r1
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f7f3 fdeb 	bl	80002e8 <__aeabi_dsub>
 800c712:	4632      	mov	r2, r6
 800c714:	463b      	mov	r3, r7
 800c716:	f7f3 fde7 	bl	80002e8 <__aeabi_dsub>
 800c71a:	a31b      	add	r3, pc, #108	@ (adr r3, 800c788 <__ieee754_rem_pio2+0x310>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	4606      	mov	r6, r0
 800c722:	460f      	mov	r7, r1
 800c724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c728:	f7f3 ff96 	bl	8000658 <__aeabi_dmul>
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	f7f3 fdda 	bl	80002e8 <__aeabi_dsub>
 800c734:	4606      	mov	r6, r0
 800c736:	460f      	mov	r7, r1
 800c738:	e764      	b.n	800c604 <__ieee754_rem_pio2+0x18c>
 800c73a:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a8 <__ieee754_rem_pio2+0x330>)
 800c73c:	4598      	cmp	r8, r3
 800c73e:	d935      	bls.n	800c7ac <__ieee754_rem_pio2+0x334>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	f7f3 fdd0 	bl	80002e8 <__aeabi_dsub>
 800c748:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c74c:	e9c4 0100 	strd	r0, r1, [r4]
 800c750:	e6a4      	b.n	800c49c <__ieee754_rem_pio2+0x24>
 800c752:	bf00      	nop
 800c754:	f3af 8000 	nop.w
 800c758:	54400000 	.word	0x54400000
 800c75c:	3ff921fb 	.word	0x3ff921fb
 800c760:	1a626331 	.word	0x1a626331
 800c764:	3dd0b461 	.word	0x3dd0b461
 800c768:	1a600000 	.word	0x1a600000
 800c76c:	3dd0b461 	.word	0x3dd0b461
 800c770:	2e037073 	.word	0x2e037073
 800c774:	3ba3198a 	.word	0x3ba3198a
 800c778:	6dc9c883 	.word	0x6dc9c883
 800c77c:	3fe45f30 	.word	0x3fe45f30
 800c780:	2e000000 	.word	0x2e000000
 800c784:	3ba3198a 	.word	0x3ba3198a
 800c788:	252049c1 	.word	0x252049c1
 800c78c:	397b839a 	.word	0x397b839a
 800c790:	3fe921fb 	.word	0x3fe921fb
 800c794:	4002d97b 	.word	0x4002d97b
 800c798:	3ff921fb 	.word	0x3ff921fb
 800c79c:	413921fb 	.word	0x413921fb
 800c7a0:	3fe00000 	.word	0x3fe00000
 800c7a4:	0800d3d0 	.word	0x0800d3d0
 800c7a8:	7fefffff 	.word	0x7fefffff
 800c7ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c7b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c7b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	f7f4 f9e7 	bl	8000b8c <__aeabi_d2iz>
 800c7be:	f7f3 fee1 	bl	8000584 <__aeabi_i2d>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	4639      	mov	r1, r7
 800c7ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7ce:	f7f3 fd8b 	bl	80002e8 <__aeabi_dsub>
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4b21      	ldr	r3, [pc, #132]	@ (800c85c <__ieee754_rem_pio2+0x3e4>)
 800c7d6:	f7f3 ff3f 	bl	8000658 <__aeabi_dmul>
 800c7da:	460f      	mov	r7, r1
 800c7dc:	4606      	mov	r6, r0
 800c7de:	f7f4 f9d5 	bl	8000b8c <__aeabi_d2iz>
 800c7e2:	f7f3 fecf 	bl	8000584 <__aeabi_i2d>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7f2:	f7f3 fd79 	bl	80002e8 <__aeabi_dsub>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4b18      	ldr	r3, [pc, #96]	@ (800c85c <__ieee754_rem_pio2+0x3e4>)
 800c7fa:	f7f3 ff2d 	bl	8000658 <__aeabi_dmul>
 800c7fe:	f04f 0803 	mov.w	r8, #3
 800c802:	2600      	movs	r6, #0
 800c804:	2700      	movs	r7, #0
 800c806:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c80a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c80e:	4632      	mov	r2, r6
 800c810:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c814:	463b      	mov	r3, r7
 800c816:	46c2      	mov	sl, r8
 800c818:	f108 38ff 	add.w	r8, r8, #4294967295
 800c81c:	f7f4 f984 	bl	8000b28 <__aeabi_dcmpeq>
 800c820:	2800      	cmp	r0, #0
 800c822:	d1f4      	bne.n	800c80e <__ieee754_rem_pio2+0x396>
 800c824:	4b0e      	ldr	r3, [pc, #56]	@ (800c860 <__ieee754_rem_pio2+0x3e8>)
 800c826:	462a      	mov	r2, r5
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	2302      	movs	r3, #2
 800c82c:	4621      	mov	r1, r4
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	a806      	add	r0, sp, #24
 800c832:	4653      	mov	r3, sl
 800c834:	f000 f81a 	bl	800c86c <__kernel_rem_pio2>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	4605      	mov	r5, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f6bf ae56 	bge.w	800c4ee <__ieee754_rem_pio2+0x76>
 800c842:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c846:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c84a:	e9c4 2300 	strd	r2, r3, [r4]
 800c84e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c852:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c856:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c85a:	e741      	b.n	800c6e0 <__ieee754_rem_pio2+0x268>
 800c85c:	41700000 	.word	0x41700000
 800c860:	0800d450 	.word	0x0800d450

0800c864 <fabs>:
 800c864:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c868:	4619      	mov	r1, r3
 800c86a:	4770      	bx	lr

0800c86c <__kernel_rem_pio2>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c874:	9308      	str	r3, [sp, #32]
 800c876:	9104      	str	r1, [sp, #16]
 800c878:	4bb6      	ldr	r3, [pc, #728]	@ (800cb54 <__kernel_rem_pio2+0x2e8>)
 800c87a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800c87c:	f112 0f14 	cmn.w	r2, #20
 800c880:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c884:	bfa8      	it	ge
 800c886:	1ed4      	subge	r4, r2, #3
 800c888:	9302      	str	r3, [sp, #8]
 800c88a:	9b08      	ldr	r3, [sp, #32]
 800c88c:	bfb8      	it	lt
 800c88e:	2400      	movlt	r4, #0
 800c890:	f103 33ff 	add.w	r3, r3, #4294967295
 800c894:	9306      	str	r3, [sp, #24]
 800c896:	bfa4      	itt	ge
 800c898:	2318      	movge	r3, #24
 800c89a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c89e:	f06f 0317 	mvn.w	r3, #23
 800c8a2:	fb04 3303 	mla	r3, r4, r3, r3
 800c8a6:	eb03 0a02 	add.w	sl, r3, r2
 800c8aa:	9a06      	ldr	r2, [sp, #24]
 800c8ac:	9b02      	ldr	r3, [sp, #8]
 800c8ae:	1aa7      	subs	r7, r4, r2
 800c8b0:	eb03 0802 	add.w	r8, r3, r2
 800c8b4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c8b6:	2500      	movs	r5, #0
 800c8b8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800c8c2:	ae20      	add	r6, sp, #128	@ 0x80
 800c8c4:	4545      	cmp	r5, r8
 800c8c6:	dd14      	ble.n	800c8f2 <__kernel_rem_pio2+0x86>
 800c8c8:	f04f 0800 	mov.w	r8, #0
 800c8cc:	9a08      	ldr	r2, [sp, #32]
 800c8ce:	ab20      	add	r3, sp, #128	@ 0x80
 800c8d0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c8d4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800c8d8:	9b02      	ldr	r3, [sp, #8]
 800c8da:	4598      	cmp	r8, r3
 800c8dc:	dc35      	bgt.n	800c94a <__kernel_rem_pio2+0xde>
 800c8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f1a3 0908 	sub.w	r9, r3, #8
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	462f      	mov	r7, r5
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	e9cd 2300 	strd	r2, r3, [sp]
 800c8f0:	e01f      	b.n	800c932 <__kernel_rem_pio2+0xc6>
 800c8f2:	42ef      	cmn	r7, r5
 800c8f4:	d40b      	bmi.n	800c90e <__kernel_rem_pio2+0xa2>
 800c8f6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c8fa:	e9cd 2300 	strd	r2, r3, [sp]
 800c8fe:	f7f3 fe41 	bl	8000584 <__aeabi_i2d>
 800c902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c906:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c90a:	3501      	adds	r5, #1
 800c90c:	e7da      	b.n	800c8c4 <__kernel_rem_pio2+0x58>
 800c90e:	4610      	mov	r0, r2
 800c910:	4619      	mov	r1, r3
 800c912:	e7f8      	b.n	800c906 <__kernel_rem_pio2+0x9a>
 800c914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c918:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c91c:	f7f3 fe9c 	bl	8000658 <__aeabi_dmul>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c928:	f7f3 fce0 	bl	80002ec <__adddf3>
 800c92c:	e9cd 0100 	strd	r0, r1, [sp]
 800c930:	3601      	adds	r6, #1
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	3f08      	subs	r7, #8
 800c936:	429e      	cmp	r6, r3
 800c938:	ddec      	ble.n	800c914 <__kernel_rem_pio2+0xa8>
 800c93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c93e:	f108 0801 	add.w	r8, r8, #1
 800c942:	e8eb 2302 	strd	r2, r3, [fp], #8
 800c946:	3508      	adds	r5, #8
 800c948:	e7c6      	b.n	800c8d8 <__kernel_rem_pio2+0x6c>
 800c94a:	9b02      	ldr	r3, [sp, #8]
 800c94c:	aa0c      	add	r2, sp, #48	@ 0x30
 800c94e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c952:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c954:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c956:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c95a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c960:	ab98      	add	r3, sp, #608	@ 0x260
 800c962:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c966:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800c96a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c96c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c970:	ae0c      	add	r6, sp, #48	@ 0x30
 800c972:	4698      	mov	r8, r3
 800c974:	46b1      	mov	r9, r6
 800c976:	465f      	mov	r7, fp
 800c978:	9307      	str	r3, [sp, #28]
 800c97a:	2f00      	cmp	r7, #0
 800c97c:	f1a8 0808 	sub.w	r8, r8, #8
 800c980:	dc71      	bgt.n	800ca66 <__kernel_rem_pio2+0x1fa>
 800c982:	4652      	mov	r2, sl
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f000 fa96 	bl	800ceb8 <scalbn>
 800c98c:	2200      	movs	r2, #0
 800c98e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c992:	4604      	mov	r4, r0
 800c994:	460d      	mov	r5, r1
 800c996:	f7f3 fe5f 	bl	8000658 <__aeabi_dmul>
 800c99a:	f000 fb05 	bl	800cfa8 <floor>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	4b6d      	ldr	r3, [pc, #436]	@ (800cb58 <__kernel_rem_pio2+0x2ec>)
 800c9a2:	f7f3 fe59 	bl	8000658 <__aeabi_dmul>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f7f3 fc9b 	bl	80002e8 <__aeabi_dsub>
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	f7f4 f8e9 	bl	8000b8c <__aeabi_d2iz>
 800c9ba:	9005      	str	r0, [sp, #20]
 800c9bc:	f7f3 fde2 	bl	8000584 <__aeabi_i2d>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	f7f3 fc8e 	bl	80002e8 <__aeabi_dsub>
 800c9cc:	f1ba 0f00 	cmp.w	sl, #0
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	4689      	mov	r9, r1
 800c9d4:	dd6d      	ble.n	800cab2 <__kernel_rem_pio2+0x246>
 800c9d6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c9da:	ab0c      	add	r3, sp, #48	@ 0x30
 800c9dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9e0:	9c05      	ldr	r4, [sp, #20]
 800c9e2:	f1ca 0018 	rsb	r0, sl, #24
 800c9e6:	fa43 f200 	asr.w	r2, r3, r0
 800c9ea:	4414      	add	r4, r2
 800c9ec:	4082      	lsls	r2, r0
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	aa0c      	add	r2, sp, #48	@ 0x30
 800c9f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c9f6:	f1ca 0217 	rsb	r2, sl, #23
 800c9fa:	9405      	str	r4, [sp, #20]
 800c9fc:	4113      	asrs	r3, r2
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	9b00      	ldr	r3, [sp, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd64      	ble.n	800cad0 <__kernel_rem_pio2+0x264>
 800ca06:	2200      	movs	r2, #0
 800ca08:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	3301      	adds	r3, #1
 800ca12:	9305      	str	r3, [sp, #20]
 800ca14:	4593      	cmp	fp, r2
 800ca16:	f300 80ab 	bgt.w	800cb70 <__kernel_rem_pio2+0x304>
 800ca1a:	f1ba 0f00 	cmp.w	sl, #0
 800ca1e:	dd07      	ble.n	800ca30 <__kernel_rem_pio2+0x1c4>
 800ca20:	f1ba 0f01 	cmp.w	sl, #1
 800ca24:	f000 80b2 	beq.w	800cb8c <__kernel_rem_pio2+0x320>
 800ca28:	f1ba 0f02 	cmp.w	sl, #2
 800ca2c:	f000 80b9 	beq.w	800cba2 <__kernel_rem_pio2+0x336>
 800ca30:	9b00      	ldr	r3, [sp, #0]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d14c      	bne.n	800cad0 <__kernel_rem_pio2+0x264>
 800ca36:	4642      	mov	r2, r8
 800ca38:	464b      	mov	r3, r9
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	4947      	ldr	r1, [pc, #284]	@ (800cb5c <__kernel_rem_pio2+0x2f0>)
 800ca3e:	f7f3 fc53 	bl	80002e8 <__aeabi_dsub>
 800ca42:	4680      	mov	r8, r0
 800ca44:	4689      	mov	r9, r1
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d042      	beq.n	800cad0 <__kernel_rem_pio2+0x264>
 800ca4a:	4652      	mov	r2, sl
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	4943      	ldr	r1, [pc, #268]	@ (800cb5c <__kernel_rem_pio2+0x2f0>)
 800ca50:	f000 fa32 	bl	800ceb8 <scalbn>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	f7f3 fc44 	bl	80002e8 <__aeabi_dsub>
 800ca60:	4680      	mov	r8, r0
 800ca62:	4689      	mov	r9, r1
 800ca64:	e034      	b.n	800cad0 <__kernel_rem_pio2+0x264>
 800ca66:	2200      	movs	r2, #0
 800ca68:	4b3d      	ldr	r3, [pc, #244]	@ (800cb60 <__kernel_rem_pio2+0x2f4>)
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7f3 fdf3 	bl	8000658 <__aeabi_dmul>
 800ca72:	f7f4 f88b 	bl	8000b8c <__aeabi_d2iz>
 800ca76:	f7f3 fd85 	bl	8000584 <__aeabi_i2d>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ca82:	2200      	movs	r2, #0
 800ca84:	4b37      	ldr	r3, [pc, #220]	@ (800cb64 <__kernel_rem_pio2+0x2f8>)
 800ca86:	f7f3 fde7 	bl	8000658 <__aeabi_dmul>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc29 	bl	80002e8 <__aeabi_dsub>
 800ca96:	f7f4 f879 	bl	8000b8c <__aeabi_d2iz>
 800ca9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ca9e:	f849 0b04 	str.w	r0, [r9], #4
 800caa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caa6:	f7f3 fc21 	bl	80002ec <__adddf3>
 800caaa:	3f01      	subs	r7, #1
 800caac:	4604      	mov	r4, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	e763      	b.n	800c97a <__kernel_rem_pio2+0x10e>
 800cab2:	d106      	bne.n	800cac2 <__kernel_rem_pio2+0x256>
 800cab4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cab8:	aa0c      	add	r2, sp, #48	@ 0x30
 800caba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cabe:	15db      	asrs	r3, r3, #23
 800cac0:	e79d      	b.n	800c9fe <__kernel_rem_pio2+0x192>
 800cac2:	2200      	movs	r2, #0
 800cac4:	4b28      	ldr	r3, [pc, #160]	@ (800cb68 <__kernel_rem_pio2+0x2fc>)
 800cac6:	f7f4 f84d 	bl	8000b64 <__aeabi_dcmpge>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d13f      	bne.n	800cb4e <__kernel_rem_pio2+0x2e2>
 800cace:	9000      	str	r0, [sp, #0]
 800cad0:	2200      	movs	r2, #0
 800cad2:	2300      	movs	r3, #0
 800cad4:	4640      	mov	r0, r8
 800cad6:	4649      	mov	r1, r9
 800cad8:	f7f4 f826 	bl	8000b28 <__aeabi_dcmpeq>
 800cadc:	2800      	cmp	r0, #0
 800cade:	f000 80af 	beq.w	800cc40 <__kernel_rem_pio2+0x3d4>
 800cae2:	2200      	movs	r2, #0
 800cae4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cae8:	9902      	ldr	r1, [sp, #8]
 800caea:	428b      	cmp	r3, r1
 800caec:	da61      	bge.n	800cbb2 <__kernel_rem_pio2+0x346>
 800caee:	2a00      	cmp	r2, #0
 800caf0:	d076      	beq.n	800cbe0 <__kernel_rem_pio2+0x374>
 800caf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caf6:	ab0c      	add	r3, sp, #48	@ 0x30
 800caf8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800cafc:	f1aa 0a18 	sub.w	sl, sl, #24
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f6      	beq.n	800caf2 <__kernel_rem_pio2+0x286>
 800cb04:	4652      	mov	r2, sl
 800cb06:	2000      	movs	r0, #0
 800cb08:	4914      	ldr	r1, [pc, #80]	@ (800cb5c <__kernel_rem_pio2+0x2f0>)
 800cb0a:	f000 f9d5 	bl	800ceb8 <scalbn>
 800cb0e:	465d      	mov	r5, fp
 800cb10:	4606      	mov	r6, r0
 800cb12:	460f      	mov	r7, r1
 800cb14:	f04f 0900 	mov.w	r9, #0
 800cb18:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cb1a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800cb60 <__kernel_rem_pio2+0x2f4>
 800cb1e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800cb22:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	f280 80c0 	bge.w	800ccac <__kernel_rem_pio2+0x440>
 800cb2c:	465d      	mov	r5, fp
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	f2c0 80f0 	blt.w	800cd14 <__kernel_rem_pio2+0x4a8>
 800cb34:	4b0d      	ldr	r3, [pc, #52]	@ (800cb6c <__kernel_rem_pio2+0x300>)
 800cb36:	f04f 0900 	mov.w	r9, #0
 800cb3a:	9306      	str	r3, [sp, #24]
 800cb3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cb3e:	f04f 0a00 	mov.w	sl, #0
 800cb42:	2700      	movs	r7, #0
 800cb44:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800cb48:	ebab 0605 	sub.w	r6, fp, r5
 800cb4c:	e0d6      	b.n	800ccfc <__kernel_rem_pio2+0x490>
 800cb4e:	2302      	movs	r3, #2
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	e758      	b.n	800ca06 <__kernel_rem_pio2+0x19a>
 800cb54:	0800d598 	.word	0x0800d598
 800cb58:	40200000 	.word	0x40200000
 800cb5c:	3ff00000 	.word	0x3ff00000
 800cb60:	3e700000 	.word	0x3e700000
 800cb64:	41700000 	.word	0x41700000
 800cb68:	3fe00000 	.word	0x3fe00000
 800cb6c:	0800d558 	.word	0x0800d558
 800cb70:	f856 3b04 	ldr.w	r3, [r6], #4
 800cb74:	b944      	cbnz	r4, 800cb88 <__kernel_rem_pio2+0x31c>
 800cb76:	b123      	cbz	r3, 800cb82 <__kernel_rem_pio2+0x316>
 800cb78:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cb7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb80:	2301      	movs	r3, #1
 800cb82:	461c      	mov	r4, r3
 800cb84:	3201      	adds	r2, #1
 800cb86:	e745      	b.n	800ca14 <__kernel_rem_pio2+0x1a8>
 800cb88:	1acb      	subs	r3, r1, r3
 800cb8a:	e7f7      	b.n	800cb7c <__kernel_rem_pio2+0x310>
 800cb8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cb90:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb9a:	a90c      	add	r1, sp, #48	@ 0x30
 800cb9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cba0:	e746      	b.n	800ca30 <__kernel_rem_pio2+0x1c4>
 800cba2:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cba6:	ab0c      	add	r3, sp, #48	@ 0x30
 800cba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cbb0:	e7f3      	b.n	800cb9a <__kernel_rem_pio2+0x32e>
 800cbb2:	a90c      	add	r1, sp, #48	@ 0x30
 800cbb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	e794      	b.n	800cae8 <__kernel_rem_pio2+0x27c>
 800cbbe:	3401      	adds	r4, #1
 800cbc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	d0fa      	beq.n	800cbbe <__kernel_rem_pio2+0x352>
 800cbc8:	9b08      	ldr	r3, [sp, #32]
 800cbca:	aa20      	add	r2, sp, #128	@ 0x80
 800cbcc:	445b      	add	r3, fp
 800cbce:	f10b 0801 	add.w	r8, fp, #1
 800cbd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cbd6:	445c      	add	r4, fp
 800cbd8:	4544      	cmp	r4, r8
 800cbda:	da04      	bge.n	800cbe6 <__kernel_rem_pio2+0x37a>
 800cbdc:	46a3      	mov	fp, r4
 800cbde:	e6bf      	b.n	800c960 <__kernel_rem_pio2+0xf4>
 800cbe0:	2401      	movs	r4, #1
 800cbe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbe4:	e7ec      	b.n	800cbc0 <__kernel_rem_pio2+0x354>
 800cbe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbe8:	46ab      	mov	fp, r5
 800cbea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cbee:	f7f3 fcc9 	bl	8000584 <__aeabi_i2d>
 800cbf2:	f04f 0900 	mov.w	r9, #0
 800cbf6:	2600      	movs	r6, #0
 800cbf8:	2700      	movs	r7, #0
 800cbfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbfc:	e9c5 0100 	strd	r0, r1, [r5]
 800cc00:	3b08      	subs	r3, #8
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	9b06      	ldr	r3, [sp, #24]
 800cc06:	4599      	cmp	r9, r3
 800cc08:	dd07      	ble.n	800cc1a <__kernel_rem_pio2+0x3ae>
 800cc0a:	9b07      	ldr	r3, [sp, #28]
 800cc0c:	f108 0801 	add.w	r8, r8, #1
 800cc10:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800cc14:	3508      	adds	r5, #8
 800cc16:	9307      	str	r3, [sp, #28]
 800cc18:	e7de      	b.n	800cbd8 <__kernel_rem_pio2+0x36c>
 800cc1a:	9900      	ldr	r1, [sp, #0]
 800cc1c:	f109 0901 	add.w	r9, r9, #1
 800cc20:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800cc24:	9100      	str	r1, [sp, #0]
 800cc26:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800cc2a:	f7f3 fd15 	bl	8000658 <__aeabi_dmul>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fb59 	bl	80002ec <__adddf3>
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	e7e1      	b.n	800cc04 <__kernel_rem_pio2+0x398>
 800cc40:	f1ca 0200 	rsb	r2, sl, #0
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f000 f936 	bl	800ceb8 <scalbn>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	4b97      	ldr	r3, [pc, #604]	@ (800ceac <__kernel_rem_pio2+0x640>)
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	f7f3 ff86 	bl	8000b64 <__aeabi_dcmpge>
 800cc58:	b300      	cbz	r0, 800cc9c <__kernel_rem_pio2+0x430>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4b94      	ldr	r3, [pc, #592]	@ (800ceb0 <__kernel_rem_pio2+0x644>)
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fcf9 	bl	8000658 <__aeabi_dmul>
 800cc66:	f7f3 ff91 	bl	8000b8c <__aeabi_d2iz>
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	f7f3 fc8a 	bl	8000584 <__aeabi_i2d>
 800cc70:	2200      	movs	r2, #0
 800cc72:	4b8e      	ldr	r3, [pc, #568]	@ (800ceac <__kernel_rem_pio2+0x640>)
 800cc74:	f7f3 fcf0 	bl	8000658 <__aeabi_dmul>
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f7f3 fb32 	bl	80002e8 <__aeabi_dsub>
 800cc84:	f7f3 ff82 	bl	8000b8c <__aeabi_d2iz>
 800cc88:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc8a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800cc8e:	f10b 0b01 	add.w	fp, fp, #1
 800cc92:	f10a 0a18 	add.w	sl, sl, #24
 800cc96:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800cc9a:	e733      	b.n	800cb04 <__kernel_rem_pio2+0x298>
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7f3 ff74 	bl	8000b8c <__aeabi_d2iz>
 800cca4:	ab0c      	add	r3, sp, #48	@ 0x30
 800cca6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800ccaa:	e72b      	b.n	800cb04 <__kernel_rem_pio2+0x298>
 800ccac:	ab0c      	add	r3, sp, #48	@ 0x30
 800ccae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccb2:	f7f3 fc67 	bl	8000584 <__aeabi_i2d>
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	463b      	mov	r3, r7
 800ccba:	f7f3 fccd 	bl	8000658 <__aeabi_dmul>
 800ccbe:	464a      	mov	r2, r9
 800ccc0:	e868 0102 	strd	r0, r1, [r8], #-8
 800ccc4:	4653      	mov	r3, sl
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fcc5 	bl	8000658 <__aeabi_dmul>
 800ccce:	3d01      	subs	r5, #1
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	460f      	mov	r7, r1
 800ccd4:	e727      	b.n	800cb26 <__kernel_rem_pio2+0x2ba>
 800ccd6:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ccda:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ccde:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cce2:	f8cd c018 	str.w	ip, [sp, #24]
 800cce6:	f7f3 fcb7 	bl	8000658 <__aeabi_dmul>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4648      	mov	r0, r9
 800ccf0:	4651      	mov	r1, sl
 800ccf2:	f7f3 fafb 	bl	80002ec <__adddf3>
 800ccf6:	4681      	mov	r9, r0
 800ccf8:	468a      	mov	sl, r1
 800ccfa:	3701      	adds	r7, #1
 800ccfc:	9b02      	ldr	r3, [sp, #8]
 800ccfe:	429f      	cmp	r7, r3
 800cd00:	dc01      	bgt.n	800cd06 <__kernel_rem_pio2+0x49a>
 800cd02:	42be      	cmp	r6, r7
 800cd04:	dae7      	bge.n	800ccd6 <__kernel_rem_pio2+0x46a>
 800cd06:	ab48      	add	r3, sp, #288	@ 0x120
 800cd08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cd0c:	e9c6 9a00 	strd	r9, sl, [r6]
 800cd10:	3d01      	subs	r5, #1
 800cd12:	e70c      	b.n	800cb2e <__kernel_rem_pio2+0x2c2>
 800cd14:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	dc09      	bgt.n	800cd2e <__kernel_rem_pio2+0x4c2>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dc2c      	bgt.n	800cd78 <__kernel_rem_pio2+0x50c>
 800cd1e:	d04e      	beq.n	800cdbe <__kernel_rem_pio2+0x552>
 800cd20:	9b05      	ldr	r3, [sp, #20]
 800cd22:	f003 0007 	and.w	r0, r3, #7
 800cd26:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d1f5      	bne.n	800cd20 <__kernel_rem_pio2+0x4b4>
 800cd34:	ab48      	add	r3, sp, #288	@ 0x120
 800cd36:	441c      	add	r4, r3
 800cd38:	4625      	mov	r5, r4
 800cd3a:	46da      	mov	sl, fp
 800cd3c:	f1ba 0f00 	cmp.w	sl, #0
 800cd40:	dc63      	bgt.n	800ce0a <__kernel_rem_pio2+0x59e>
 800cd42:	4625      	mov	r5, r4
 800cd44:	46da      	mov	sl, fp
 800cd46:	f1ba 0f01 	cmp.w	sl, #1
 800cd4a:	dc7b      	bgt.n	800ce44 <__kernel_rem_pio2+0x5d8>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	2100      	movs	r1, #0
 800cd50:	f1bb 0f01 	cmp.w	fp, #1
 800cd54:	f300 8093 	bgt.w	800ce7e <__kernel_rem_pio2+0x612>
 800cd58:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800cd5c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800cd60:	9b00      	ldr	r3, [sp, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 8092 	bne.w	800ce8c <__kernel_rem_pio2+0x620>
 800cd68:	9b04      	ldr	r3, [sp, #16]
 800cd6a:	e9c3 7800 	strd	r7, r8, [r3]
 800cd6e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cd72:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cd76:	e7d3      	b.n	800cd20 <__kernel_rem_pio2+0x4b4>
 800cd78:	465d      	mov	r5, fp
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	ab48      	add	r3, sp, #288	@ 0x120
 800cd80:	441c      	add	r4, r3
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	da32      	bge.n	800cdec <__kernel_rem_pio2+0x580>
 800cd86:	9b00      	ldr	r3, [sp, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d035      	beq.n	800cdf8 <__kernel_rem_pio2+0x58c>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd92:	9c04      	ldr	r4, [sp, #16]
 800cd94:	2501      	movs	r5, #1
 800cd96:	e9c4 2300 	strd	r2, r3, [r4]
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800cda2:	f7f3 faa1 	bl	80002e8 <__aeabi_dsub>
 800cda6:	ac48      	add	r4, sp, #288	@ 0x120
 800cda8:	45ab      	cmp	fp, r5
 800cdaa:	da28      	bge.n	800cdfe <__kernel_rem_pio2+0x592>
 800cdac:	9b00      	ldr	r3, [sp, #0]
 800cdae:	b113      	cbz	r3, 800cdb6 <__kernel_rem_pio2+0x54a>
 800cdb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cdbc:	e7b0      	b.n	800cd20 <__kernel_rem_pio2+0x4b4>
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	ab48      	add	r3, sp, #288	@ 0x120
 800cdc4:	441c      	add	r4, r3
 800cdc6:	f1bb 0f00 	cmp.w	fp, #0
 800cdca:	da08      	bge.n	800cdde <__kernel_rem_pio2+0x572>
 800cdcc:	9b00      	ldr	r3, [sp, #0]
 800cdce:	b113      	cbz	r3, 800cdd6 <__kernel_rem_pio2+0x56a>
 800cdd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	9b04      	ldr	r3, [sp, #16]
 800cdd8:	e9c3 0100 	strd	r0, r1, [r3]
 800cddc:	e7a0      	b.n	800cd20 <__kernel_rem_pio2+0x4b4>
 800cdde:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800cde2:	f7f3 fa83 	bl	80002ec <__adddf3>
 800cde6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdea:	e7ec      	b.n	800cdc6 <__kernel_rem_pio2+0x55a>
 800cdec:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800cdf0:	f7f3 fa7c 	bl	80002ec <__adddf3>
 800cdf4:	3d01      	subs	r5, #1
 800cdf6:	e7c4      	b.n	800cd82 <__kernel_rem_pio2+0x516>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	e7c9      	b.n	800cd92 <__kernel_rem_pio2+0x526>
 800cdfe:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800ce02:	f7f3 fa73 	bl	80002ec <__adddf3>
 800ce06:	3501      	adds	r5, #1
 800ce08:	e7ce      	b.n	800cda8 <__kernel_rem_pio2+0x53c>
 800ce0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce0e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ce12:	4640      	mov	r0, r8
 800ce14:	4649      	mov	r1, r9
 800ce16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce1a:	f7f3 fa67 	bl	80002ec <__adddf3>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	4640      	mov	r0, r8
 800ce28:	4649      	mov	r1, r9
 800ce2a:	f7f3 fa5d 	bl	80002e8 <__aeabi_dsub>
 800ce2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce32:	f7f3 fa5b 	bl	80002ec <__adddf3>
 800ce36:	e865 0102 	strd	r0, r1, [r5], #-8
 800ce3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce3e:	e9c5 6700 	strd	r6, r7, [r5]
 800ce42:	e77b      	b.n	800cd3c <__kernel_rem_pio2+0x4d0>
 800ce44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce48:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4649      	mov	r1, r9
 800ce50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce54:	f7f3 fa4a 	bl	80002ec <__adddf3>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4606      	mov	r6, r0
 800ce5e:	460f      	mov	r7, r1
 800ce60:	4640      	mov	r0, r8
 800ce62:	4649      	mov	r1, r9
 800ce64:	f7f3 fa40 	bl	80002e8 <__aeabi_dsub>
 800ce68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce6c:	f7f3 fa3e 	bl	80002ec <__adddf3>
 800ce70:	e865 0102 	strd	r0, r1, [r5], #-8
 800ce74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce78:	e9c5 6700 	strd	r6, r7, [r5]
 800ce7c:	e763      	b.n	800cd46 <__kernel_rem_pio2+0x4da>
 800ce7e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ce82:	f7f3 fa33 	bl	80002ec <__adddf3>
 800ce86:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce8a:	e761      	b.n	800cd50 <__kernel_rem_pio2+0x4e4>
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	9a04      	ldr	r2, [sp, #16]
 800ce90:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ce94:	601f      	str	r7, [r3, #0]
 800ce96:	605c      	str	r4, [r3, #4]
 800ce98:	609d      	str	r5, [r3, #8]
 800ce9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce9e:	60d3      	str	r3, [r2, #12]
 800cea0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cea4:	6110      	str	r0, [r2, #16]
 800cea6:	6153      	str	r3, [r2, #20]
 800cea8:	e73a      	b.n	800cd20 <__kernel_rem_pio2+0x4b4>
 800ceaa:	bf00      	nop
 800ceac:	41700000 	.word	0x41700000
 800ceb0:	3e700000 	.word	0x3e700000
 800ceb4:	00000000 	.word	0x00000000

0800ceb8 <scalbn>:
 800ceb8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800cebc:	4616      	mov	r6, r2
 800cebe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cec2:	4683      	mov	fp, r0
 800cec4:	468c      	mov	ip, r1
 800cec6:	460b      	mov	r3, r1
 800cec8:	b982      	cbnz	r2, 800ceec <scalbn+0x34>
 800ceca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cece:	4303      	orrs	r3, r0
 800ced0:	d039      	beq.n	800cf46 <scalbn+0x8e>
 800ced2:	4b2f      	ldr	r3, [pc, #188]	@ (800cf90 <scalbn+0xd8>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	f7f3 fbbf 	bl	8000658 <__aeabi_dmul>
 800ceda:	4b2e      	ldr	r3, [pc, #184]	@ (800cf94 <scalbn+0xdc>)
 800cedc:	4683      	mov	fp, r0
 800cede:	429e      	cmp	r6, r3
 800cee0:	468c      	mov	ip, r1
 800cee2:	da0d      	bge.n	800cf00 <scalbn+0x48>
 800cee4:	a326      	add	r3, pc, #152	@ (adr r3, 800cf80 <scalbn+0xc8>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	e01b      	b.n	800cf24 <scalbn+0x6c>
 800ceec:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800cef0:	42ba      	cmp	r2, r7
 800cef2:	d109      	bne.n	800cf08 <scalbn+0x50>
 800cef4:	4602      	mov	r2, r0
 800cef6:	f7f3 f9f9 	bl	80002ec <__adddf3>
 800cefa:	4683      	mov	fp, r0
 800cefc:	468c      	mov	ip, r1
 800cefe:	e022      	b.n	800cf46 <scalbn+0x8e>
 800cf00:	460b      	mov	r3, r1
 800cf02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf06:	3a36      	subs	r2, #54	@ 0x36
 800cf08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cf0c:	428e      	cmp	r6, r1
 800cf0e:	dd0c      	ble.n	800cf2a <scalbn+0x72>
 800cf10:	a31d      	add	r3, pc, #116	@ (adr r3, 800cf88 <scalbn+0xd0>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	461c      	mov	r4, r3
 800cf18:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800cf1c:	f361 74df 	bfi	r4, r1, #31, #1
 800cf20:	4621      	mov	r1, r4
 800cf22:	481d      	ldr	r0, [pc, #116]	@ (800cf98 <scalbn+0xe0>)
 800cf24:	f7f3 fb98 	bl	8000658 <__aeabi_dmul>
 800cf28:	e7e7      	b.n	800cefa <scalbn+0x42>
 800cf2a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cf2e:	4432      	add	r2, r6
 800cf30:	428a      	cmp	r2, r1
 800cf32:	dced      	bgt.n	800cf10 <scalbn+0x58>
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	dd0a      	ble.n	800cf4e <scalbn+0x96>
 800cf38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf44:	46ac      	mov	ip, r5
 800cf46:	4658      	mov	r0, fp
 800cf48:	4661      	mov	r1, ip
 800cf4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800cf4e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cf52:	da09      	bge.n	800cf68 <scalbn+0xb0>
 800cf54:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800cf58:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800cf5c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800cf60:	480e      	ldr	r0, [pc, #56]	@ (800cf9c <scalbn+0xe4>)
 800cf62:	f041 011f 	orr.w	r1, r1, #31
 800cf66:	e7bd      	b.n	800cee4 <scalbn+0x2c>
 800cf68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf6c:	3236      	adds	r2, #54	@ 0x36
 800cf6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf76:	4658      	mov	r0, fp
 800cf78:	4629      	mov	r1, r5
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	4b08      	ldr	r3, [pc, #32]	@ (800cfa0 <scalbn+0xe8>)
 800cf7e:	e7d1      	b.n	800cf24 <scalbn+0x6c>
 800cf80:	c2f8f359 	.word	0xc2f8f359
 800cf84:	01a56e1f 	.word	0x01a56e1f
 800cf88:	8800759c 	.word	0x8800759c
 800cf8c:	7e37e43c 	.word	0x7e37e43c
 800cf90:	43500000 	.word	0x43500000
 800cf94:	ffff3cb0 	.word	0xffff3cb0
 800cf98:	8800759c 	.word	0x8800759c
 800cf9c:	c2f8f359 	.word	0xc2f8f359
 800cfa0:	3c900000 	.word	0x3c900000
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <floor>:
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cfb0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800cfb4:	2e13      	cmp	r6, #19
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	460c      	mov	r4, r1
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	4680      	mov	r8, r0
 800cfc0:	dc35      	bgt.n	800d02e <floor+0x86>
 800cfc2:	2e00      	cmp	r6, #0
 800cfc4:	da17      	bge.n	800cff6 <floor+0x4e>
 800cfc6:	a334      	add	r3, pc, #208	@ (adr r3, 800d098 <floor+0xf0>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	f7f3 f98e 	bl	80002ec <__adddf3>
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f7f3 fdd0 	bl	8000b78 <__aeabi_dcmpgt>
 800cfd8:	b150      	cbz	r0, 800cff0 <floor+0x48>
 800cfda:	2c00      	cmp	r4, #0
 800cfdc:	da57      	bge.n	800d08e <floor+0xe6>
 800cfde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cfe2:	432c      	orrs	r4, r5
 800cfe4:	2500      	movs	r5, #0
 800cfe6:	42ac      	cmp	r4, r5
 800cfe8:	4c2d      	ldr	r4, [pc, #180]	@ (800d0a0 <floor+0xf8>)
 800cfea:	bf08      	it	eq
 800cfec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cff0:	4623      	mov	r3, r4
 800cff2:	462a      	mov	r2, r5
 800cff4:	e024      	b.n	800d040 <floor+0x98>
 800cff6:	4f2b      	ldr	r7, [pc, #172]	@ (800d0a4 <floor+0xfc>)
 800cff8:	4137      	asrs	r7, r6
 800cffa:	ea01 0c07 	and.w	ip, r1, r7
 800cffe:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d002:	d01d      	beq.n	800d040 <floor+0x98>
 800d004:	a324      	add	r3, pc, #144	@ (adr r3, 800d098 <floor+0xf0>)
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f7f3 f96f 	bl	80002ec <__adddf3>
 800d00e:	2200      	movs	r2, #0
 800d010:	2300      	movs	r3, #0
 800d012:	f7f3 fdb1 	bl	8000b78 <__aeabi_dcmpgt>
 800d016:	2800      	cmp	r0, #0
 800d018:	d0ea      	beq.n	800cff0 <floor+0x48>
 800d01a:	2c00      	cmp	r4, #0
 800d01c:	bfbe      	ittt	lt
 800d01e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d022:	4133      	asrlt	r3, r6
 800d024:	18e4      	addlt	r4, r4, r3
 800d026:	2500      	movs	r5, #0
 800d028:	ea24 0407 	bic.w	r4, r4, r7
 800d02c:	e7e0      	b.n	800cff0 <floor+0x48>
 800d02e:	2e33      	cmp	r6, #51	@ 0x33
 800d030:	dd0a      	ble.n	800d048 <floor+0xa0>
 800d032:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d036:	d103      	bne.n	800d040 <floor+0x98>
 800d038:	f7f3 f958 	bl	80002ec <__adddf3>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4610      	mov	r0, r2
 800d042:	4619      	mov	r1, r3
 800d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d048:	f04f 3cff 	mov.w	ip, #4294967295
 800d04c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800d050:	fa2c f707 	lsr.w	r7, ip, r7
 800d054:	4207      	tst	r7, r0
 800d056:	d0f3      	beq.n	800d040 <floor+0x98>
 800d058:	a30f      	add	r3, pc, #60	@ (adr r3, 800d098 <floor+0xf0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 f945 	bl	80002ec <__adddf3>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	f7f3 fd87 	bl	8000b78 <__aeabi_dcmpgt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d0c0      	beq.n	800cff0 <floor+0x48>
 800d06e:	2c00      	cmp	r4, #0
 800d070:	da0a      	bge.n	800d088 <floor+0xe0>
 800d072:	2e14      	cmp	r6, #20
 800d074:	d101      	bne.n	800d07a <floor+0xd2>
 800d076:	3401      	adds	r4, #1
 800d078:	e006      	b.n	800d088 <floor+0xe0>
 800d07a:	2301      	movs	r3, #1
 800d07c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d080:	40b3      	lsls	r3, r6
 800d082:	441d      	add	r5, r3
 800d084:	4545      	cmp	r5, r8
 800d086:	d3f6      	bcc.n	800d076 <floor+0xce>
 800d088:	ea25 0507 	bic.w	r5, r5, r7
 800d08c:	e7b0      	b.n	800cff0 <floor+0x48>
 800d08e:	2500      	movs	r5, #0
 800d090:	462c      	mov	r4, r5
 800d092:	e7ad      	b.n	800cff0 <floor+0x48>
 800d094:	f3af 8000 	nop.w
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	7e37e43c 	.word	0x7e37e43c
 800d0a0:	bff00000 	.word	0xbff00000
 800d0a4:	000fffff 	.word	0x000fffff

0800d0a8 <_init>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	bf00      	nop
 800d0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ae:	bc08      	pop	{r3}
 800d0b0:	469e      	mov	lr, r3
 800d0b2:	4770      	bx	lr

0800d0b4 <_fini>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr
