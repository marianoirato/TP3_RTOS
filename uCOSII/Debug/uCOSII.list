
uCOSII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800b0d0  0800b0d0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d0  0800b3d0  0000d2a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3d0  0800b3d0  0000c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3d8  0800b3d8  0000d2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3d8  0800b3d8  0000c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3dc  0800b3dc  0000c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0800b3e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e90  200002a8  0800b688  0000d2a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004138  0800b688  0000e138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ee  00000000  00000000  0000d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bd  00000000  00000000  000218bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00026180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  00027360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4ba  00000000  00000000  0002806e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017600  00000000  00000000  00044528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e353  00000000  00000000  0005bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  000e9ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  000ee700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a8 	.word	0x200002a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b0b8 	.word	0x0800b0b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ac 	.word	0x200002ac
 8000148:	0800b0b8 	.word	0x0800b0b8

0800014c <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 800014c:	b672      	cpsid	i
        BX      LR
 800014e:	4770      	bx	lr

08000150 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000150:	b662      	cpsie	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000154:	b672      	cpsid	i
        PUSH   {R1}
 8000156:	b402      	push	{r1}
        MRS     R1, BASEPRI
 8000158:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 800015c:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000160:	f3bf 8f4f 	dsb	sy
        ISB
 8000164:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 8000168:	4608      	mov	r0, r1
        POP    {R1}
 800016a:	bc02      	pop	{r1}
        CPSIE   I
 800016c:	b662      	cpsie	i
        BX      LR
 800016e:	4770      	bx	lr

08000170 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000170:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000172:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000176:	f3bf 8f4f 	dsb	sy
        ISB
 800017a:	f3bf 8f6f 	isb	sy
        CPSIE   I
 800017e:	b662      	cpsie	i
        BX      LR
 8000180:	4770      	bx	lr

08000182 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000182:	bf30      	wfi
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000186:	bf20      	wfe
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018a:	fab0 f080 	clz	r0, r0
        BX      LR
 800018e:	4770      	bx	lr

08000190 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000190:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000194:	fab0 f080 	clz	r0, r0
        BX      LR
 8000198:	4770      	bx	lr

0800019a <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019a:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800019e:	4770      	bx	lr

080001a0 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a0:	b672      	cpsid	i
    PUSH   {R1}
 80001a2:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a4:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001a8:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001ac:	f3bf 8f4f 	dsb	sy
    ISB
 80001b0:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b4:	4608      	mov	r0, r1
    POP    {R1}
 80001b6:	bc02      	pop	{r1}
    CPSIE   I
 80001b8:	b662      	cpsie	i
    BX      LR
 80001ba:	4770      	bx	lr

080001bc <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001bc:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001be:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c2:	f3bf 8f4f 	dsb	sy
    ISB
 80001c6:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ca:	b662      	cpsie	i
    BX      LR
 80001cc:	4770      	bx	lr

080001ce <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001ce:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d0:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d4:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001d8:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001dc:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e0:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e2:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e4:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001e8:	f641 2070 	movw	r0, #6768	@ 0x1a70
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 80001f0:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f2:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001f6:	f006 fb57 	bl	80068a8 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fa:	4832      	ldr	r0, [pc, #200]	@ (80002c4 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 80001fc:	2101      	movs	r1, #1
    STRB    R1, [R0]
 80001fe:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000200:	f641 50da 	movw	r0, #7642	@ 0x1dda
    MOVT    R0, #:upper16:OSPrioCur
 8000204:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000208:	f641 51db 	movw	r1, #7643	@ 0x1ddb
    MOVT    R1, #:upper16:OSPrioHighRdy
 800020c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000210:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000212:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000214:	f641 70f0 	movw	r0, #8176	@ 0x1ff0
    MOVT    R0, #:upper16:OSTCBCur
 8000218:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800021c:	f641 71f8 	movw	r1, #8184	@ 0x1ff8
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000220:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000224:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000226:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000228:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022a:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800022e:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000232:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000236:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023a:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800023e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000242:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000244:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000248:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024a:	b662      	cpsie	i
    BX       R1
 800024c:	4708      	bx	r1

0800024e <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800024e:	481e      	ldr	r0, [pc, #120]	@ (80002c8 <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000250:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 8000254:	6001      	str	r1, [r0, #0]
    BX      LR
 8000256:	4770      	bx	lr

08000258 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 8000258:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025a:	f641 2278 	movw	r2, #6776	@ 0x1a78
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 800025e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 8000262:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000264:	f381 8811 	msr	BASEPRI, r1
    DSB
 8000268:	f3bf 8f4f 	dsb	sy
    ISB
 800026c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000270:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000272:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 8000276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027a:	f641 75f0 	movw	r5, #8176	@ 0x1ff0
    MOVT    R5, #:upper16:OSTCBCur
 800027e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 8000282:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000284:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 8000286:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000288:	f006 fb0e 	bl	80068a8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800028c:	f641 50da 	movw	r0, #7642	@ 0x1dda
    MOVT    R0, #:upper16:OSPrioCur
 8000290:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000294:	f641 51db 	movw	r1, #7643	@ 0x1ddb
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000298:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800029c:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800029e:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a0:	f641 71f8 	movw	r1, #8184	@ 0x1ff8
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002a8:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002aa:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002ac:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b0:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002b6:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002ba:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002be:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c2:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c4:	20001de8 	.word	0x20001de8
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002c8:	e000ed04 	.word	0xe000ed04

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr

080002dc <DIGet>:
*               > 0   if edges have been detected
*********************************************************************************************************
*/
//PINES DE ENTRADA
uint16_t  DIGet (uint16_t n)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
    uint16_t  val;

    if (n < DIO_MAX_DI) {
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d80b      	bhi.n	8000304 <DIGet+0x28>
        OS_ENTER_CRITICAL();
 80002ec:	f7ff ff2e 	bl	800014c <CPU_IntDis>
        val = DITbl[n].DIVal;                              /* Get state of DI channel                  */
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <DIGet+0x34>)
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	4413      	add	r3, r2
 80002f8:	885b      	ldrh	r3, [r3, #2]
 80002fa:	81fb      	strh	r3, [r7, #14]
        OS_EXIT_CRITICAL();
 80002fc:	f7ff ff28 	bl	8000150 <CPU_IntEn>
        return (val);
 8000300:	89fb      	ldrh	r3, [r7, #14]
 8000302:	e000      	b.n	8000306 <DIGet+0x2a>
    } else {
        return (0);                                        /* Return negated for invalid channel       */
 8000304:	2300      	movs	r3, #0
    }
}
 8000306:	4618      	mov	r0, r3
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200002c4 	.word	0x200002c4

08000314 <DIUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIUpdate (void)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
    uint16_t    i;
    DIO_DI  *pdi;

    pdi = &DITbl[0];
 800031a:	4b3f      	ldr	r3, [pc, #252]	@ (8000418 <DIUpdate+0x104>)
 800031c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 800031e:	2300      	movs	r3, #0
 8000320:	80fb      	strh	r3, [r7, #6]
 8000322:	e070      	b.n	8000406 <DIUpdate+0xf2>
        if (pdi->DIBypassEn == FALSE) {          /* See if discrete input channel is bypassed          */
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d063      	beq.n	80003fa <DIUpdate+0xe6>
            switch (pdi->DIModeSel) {            /* No, process channel                                */
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	88db      	ldrh	r3, [r3, #6]
 8000336:	2b08      	cmp	r3, #8
 8000338:	d85f      	bhi.n	80003fa <DIUpdate+0xe6>
 800033a:	a201      	add	r2, pc, #4	@ (adr r2, 8000340 <DIUpdate+0x2c>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000365 	.word	0x08000365
 8000344:	0800036d 	.word	0x0800036d
 8000348:	08000375 	.word	0x08000375
 800034c:	08000381 	.word	0x08000381
 8000350:	080003fb 	.word	0x080003fb
 8000354:	080003fb 	.word	0x080003fb
 8000358:	080003fb 	.word	0x080003fb
 800035c:	08000393 	.word	0x08000393
 8000360:	080003c7 	.word	0x080003c7
                case DI_MODE_LOW:                /* Input is forced low                                */
                     pdi->DIVal = 0;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2200      	movs	r2, #0
 8000368:	805a      	strh	r2, [r3, #2]
                     break;
 800036a:	e046      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_HIGH:               /* Input is forced high                               */
                     pdi->DIVal = 1;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	2201      	movs	r2, #1
 8000370:	805a      	strh	r2, [r3, #2]
                     break;
 8000372:	e042      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_DIRECT:                  /* Input is based on state of physical input     */
                     pdi->DIVal = (uint16_t)pdi->DIIn;   /* Obtain the state of the sensor                */
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	805a      	strh	r2, [r3, #2]
                     break;
 800037e:	e03c      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_INV:                /* Input is based on the complement state of input    */
                     pdi->DIVal = (uint16_t)(pdi->DIIn ? 0 : 1);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	f083 0301 	eor.w	r3, r3, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	805a      	strh	r2, [r3, #2]
                     break;
 8000390:	e033      	b.n	80003fa <DIUpdate+0xe6>
                     DIIsTrig(pdi);              /* Handle edge triggered mode                         */
                     break;
#endif
/*$PAGE*/
                case DI_MODE_TOGGLE_LOW_GOING:
                     if (pdi->DIPrev == 1 && pdi->DIIn == 0) {
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d010      	beq.n	80003bc <DIUpdate+0xa8>
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f083 0301 	eor.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d009      	beq.n	80003bc <DIUpdate+0xa8>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	885b      	ldrh	r3, [r3, #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	711a      	strb	r2, [r3, #4]
                     break;
 80003c4:	e019      	b.n	80003fa <DIUpdate+0xe6>

                case DI_MODE_TOGGLE_HIGH_GOING:
                     if (pdi->DIPrev == 0 && pdi->DIIn == 1) {
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	f083 0301 	eor.w	r3, r3, #1
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00d      	beq.n	80003f0 <DIUpdate+0xdc>
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <DIUpdate+0xdc>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	885b      	ldrh	r3, [r3, #2]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	bf0c      	ite	eq
 80003e4:	2301      	moveq	r3, #1
 80003e6:	2300      	movne	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	711a      	strb	r2, [r3, #4]
                     break;
 80003f8:	bf00      	nop
            }
        }
        pdi++;                                   /* Point to next DIO_DO element                       */
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	3308      	adds	r3, #8
 80003fe:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	3301      	adds	r3, #1
 8000404:	80fb      	strh	r3, [r7, #6]
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d98b      	bls.n	8000324 <DIUpdate+0x10>
    }
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	200002c4 	.word	0x200002c4

0800041c <DIOInit>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIOInit (void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
	uint16_t   err;
	uint16_t   i;
    DIO_DI  *pdi;
    DIO_DO  *pdo;

    pdi = &DITbl[0];
 8000422:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <DIOInit+0xa0>)
 8000424:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	81fb      	strh	r3, [r7, #14]
 800042a:	e00e      	b.n	800044a <DIOInit+0x2e>
        pdi->DIVal         = 0;
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2200      	movs	r2, #0
 8000430:	805a      	strh	r2, [r3, #2]
        pdi->DIBypassEn    = FALSE;
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	2200      	movs	r2, #0
 8000436:	715a      	strb	r2, [r3, #5]
        pdi->DIModeSel     = DI_MODE_DIRECT;     /* Set the default mode to direct input               */
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2202      	movs	r2, #2
 800043c:	80da      	strh	r2, [r3, #6]
#if DI_EDGE_EN
        pdi->DITrigFnct    = (void *)0;          /* No function to execute when transition detected    */
        pdi->DITrigFnctArg = (void *)0;
#endif
        pdi++;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3308      	adds	r3, #8
 8000442:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000444:	89fb      	ldrh	r3, [r7, #14]
 8000446:	3301      	adds	r3, #1
 8000448:	81fb      	strh	r3, [r7, #14]
 800044a:	89fb      	ldrh	r3, [r7, #14]
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d9ed      	bls.n	800042c <DIOInit+0x10>
    }
    pdo = &DOTbl[0];
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <DIOInit+0xa4>)
 8000452:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000454:	2300      	movs	r3, #0
 8000456:	81fb      	strh	r3, [r7, #14]
 8000458:	e01d      	b.n	8000496 <DIOInit+0x7a>
        pdo->DOOut        = 0;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
        pdo->DOBypassEn   = FALSE;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	70da      	strb	r2, [r3, #3]
        pdo->DOModeSel    = DO_MODE_DIRECT;      /* Set the default mode to direct output              */
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2202      	movs	r2, #2
 800046a:	809a      	strh	r2, [r3, #4]
        pdo->DOInv        = FALSE;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	721a      	strb	r2, [r3, #8]
#if DO_BLINK_MODE_EN
        pdo->DOBlinkEnSel = DO_BLINK_EN_NORMAL;  /* Blinking is enabled by direct user request         */
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = 1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2202      	movs	r2, #2
 8000482:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 2;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2202      	movs	r2, #2
 8000488:	81da      	strh	r2, [r3, #14]
#endif
        pdo++;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3310      	adds	r3, #16
 800048e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	3301      	adds	r3, #1
 8000494:	81fb      	strh	r3, [r7, #14]
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	2b0f      	cmp	r3, #15
 800049a:	d9de      	bls.n	800045a <DIOInit+0x3e>
    }
#if DO_BLINK_MODE_EN
    DOSyncCtrMax = 100;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <DIOInit+0xa8>)
 800049e:	2264      	movs	r2, #100	@ 0x64
 80004a0:	701a      	strb	r2, [r3, #0]
#endif
    DIOInitIO();
 80004a2:	f000 f945 	bl	8000730 <DIOInitIO>
    OSTaskCreate(DIOTask, (void *)0, &DIOTaskStk[DIO_TASK_STK_SIZE], DIO_TASK_PRIO);
 80004a6:	2328      	movs	r3, #40	@ 0x28
 80004a8:	4a07      	ldr	r2, [pc, #28]	@ (80004c8 <DIOInit+0xac>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4807      	ldr	r0, [pc, #28]	@ (80004cc <DIOInit+0xb0>)
 80004ae:	f007 fb3b 	bl	8007b28 <OSTaskCreate>
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200002c4 	.word	0x200002c4
 80004c0:	20000344 	.word	0x20000344
 80004c4:	20000445 	.word	0x20000445
 80004c8:	20000c48 	.word	0x20000c48
 80004cc:	080004d1 	.word	0x080004d1

080004d0 <DIOTask>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIOTask (void *data)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    data = data;                                      /* Avoid compiler warning (uC/OS requirement)    */
    for (;;) {
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 80004d8:	2001      	movs	r0, #1
 80004da:	f007 feb3 	bl	8008244 <OSTimeDly>

        DIRd();                                       /* Read physical inputs and map to DI channels   */
 80004de:	f000 f92d 	bl	800073c <DIRd>
        DIUpdate();                                   /* Update all DI channels                        */
 80004e2:	f7ff ff17 	bl	8000314 <DIUpdate>
        DOUpdate();                                   /* Update all DO channels                        */
 80004e6:	f000 f895 	bl	8000614 <DOUpdate>
        DOWr();                                       /* Map DO channels to physical outputs           */
 80004ea:	f000 f98b 	bl	8000804 <DOWr>
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 80004ee:	bf00      	nop
 80004f0:	e7f2      	b.n	80004d8 <DIOTask+0x8>
	...

080004f4 <DOCfgBlink>:
*********************************************************************************************************
*/

#if  DO_BLINK_MODE_EN
void  DOCfgBlink (uint16_t n, uint16_t mode, uint16_t a, uint16_t b)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4604      	mov	r4, r0
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4623      	mov	r3, r4
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	4603      	mov	r3, r0
 8000508:	80bb      	strh	r3, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	807b      	strh	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	803b      	strh	r3, [r7, #0]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d814      	bhi.n	8000542 <DOCfgBlink+0x4e>
        pdo               = &DOTbl[n];
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <DOCfgBlink+0x58>)
 800051e:	4413      	add	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000522:	f7ff fe13 	bl	800014c <CPU_IntDis>
        pdo->DOBlinkEnSel = mode;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	88ba      	ldrh	r2, [r7, #4]
 800052a:	80da      	strh	r2, [r3, #6]
        pdo->DOA          = a;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	815a      	strh	r2, [r3, #10]
        pdo->DOB          = b;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	883a      	ldrh	r2, [r7, #0]
 8000536:	819a      	strh	r2, [r3, #12]
        pdo->DOBCtr       = 0;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2200      	movs	r2, #0
 800053c:	81da      	strh	r2, [r3, #14]
        OS_EXIT_CRITICAL();
 800053e:	f7ff fe07 	bl	8000150 <CPU_IntEn>
    }
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	bf00      	nop
 800054c:	20000344 	.word	0x20000344

08000550 <DOCfgMode>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOCfgMode (uint16_t n, uint16_t mode, bool inv)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
 800055a:	460b      	mov	r3, r1
 800055c:	80bb      	strh	r3, [r7, #4]
 800055e:	4613      	mov	r3, r2
 8000560:	70fb      	strb	r3, [r7, #3]
    DIO_DO  *pdo;

    if (n < DIO_MAX_DO) {
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80e      	bhi.n	8000586 <DOCfgMode+0x36>
        pdo            = &DOTbl[n];
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <DOCfgMode+0x40>)
 800056e:	4413      	add	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000572:	f7ff fdeb 	bl	800014c <CPU_IntDis>
        pdo->DOModeSel = mode;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	88ba      	ldrh	r2, [r7, #4]
 800057a:	809a      	strh	r2, [r3, #4]
        pdo->DOInv     = inv;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	78fa      	ldrb	r2, [r7, #3]
 8000580:	721a      	strb	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8000582:	f7ff fde5 	bl	8000150 <CPU_IntEn>
    }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000344 	.word	0x20000344

08000594 <DOIsBlinkEn>:
*********************************************************************************************************
*/

#if DO_BLINK_MODE_EN
static  bool  DOIsBlinkEn (DIO_DO *pdo)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    bool  en;

    en = FALSE;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
    switch (pdo->DOBlinkEnSel) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	88db      	ldrh	r3, [r3, #6]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d00d      	beq.n	80005c4 <DOIsBlinkEn+0x30>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	dc11      	bgt.n	80005d0 <DOIsBlinkEn+0x3c>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <DOIsBlinkEn+0x22>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d003      	beq.n	80005bc <DOIsBlinkEn+0x28>
 80005b4:	e00c      	b.n	80005d0 <DOIsBlinkEn+0x3c>
        case DO_BLINK_EN:                   /* Blink is always enabled                                 */
             en = TRUE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
             break;
 80005ba:	e009      	b.n	80005d0 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_NORMAL:            /* Blink depends on user request's state                   */
             en = pdo->DOBypass;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	73fb      	strb	r3, [r7, #15]
             break;
 80005c2:	e005      	b.n	80005d0 <DOIsBlinkEn+0x3c>

        case DO_BLINK_EN_INV:               /* Blink depends on the complemented user request's state  */
             en = pdo->DOBypass ? FALSE : TRUE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
             break;
 80005ce:	bf00      	nop
    }
    return (en);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <DOSet>:
* Notes       : The actual output will be complemented if 'DIInv' is set to TRUE.
*********************************************************************************************************
*/

void  DOSet (uint16_t n, bool state)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	80fb      	strh	r3, [r7, #6]
 80005e8:	4613      	mov	r3, r2
 80005ea:	717b      	strb	r3, [r7, #5]
if (n < DIO_MAX_DO) {
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d80a      	bhi.n	8000608 <DOSet+0x2c>
	  OS_ENTER_CRITICAL();
 80005f2:	f7ff fdab 	bl	800014c <CPU_IntDis>
	  DOTbl[n].DOCtrl = state;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <DOSet+0x34>)
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4413      	add	r3, r2
 80005fe:	3301      	adds	r3, #1
 8000600:	797a      	ldrb	r2, [r7, #5]
 8000602:	701a      	strb	r2, [r3, #0]
	  OS_EXIT_CRITICAL();
 8000604:	f7ff fda4 	bl	8000150 <CPU_IntEn>
	}
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000344 	.word	0x20000344

08000614 <DOUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DOUpdate (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    uint16_t     i;
    bool  out;
    DIO_DO   *pdo;

    pdo = &DOTbl[0];
 800061a:	4b42      	ldr	r3, [pc, #264]	@ (8000724 <DOUpdate+0x110>)
 800061c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 800061e:	2300      	movs	r3, #0
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	e067      	b.n	80006f4 <DOUpdate+0xe0>
        if (pdo->DOBypassEn == FALSE) {          /* See if DO channel is enabled                       */
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <DOUpdate+0x26>
            pdo->DOBypass = pdo->DOCtrl;         /* Obtain control state from application              */
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	785a      	ldrb	r2, [r3, #1]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	709a      	strb	r2, [r3, #2]
        }
        out = FALSE;                             /* Assume that the output will be low unless changed  */
 800063a:	2300      	movs	r3, #0
 800063c:	717b      	strb	r3, [r7, #5]
        switch (pdo->DOModeSel) {
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d842      	bhi.n	80006cc <DOUpdate+0xb8>
 8000646:	a201      	add	r2, pc, #4	@ (adr r2, 800064c <DOUpdate+0x38>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	080006cd 	.word	0x080006cd
 8000650:	08000661 	.word	0x08000661
 8000654:	08000667 	.word	0x08000667
 8000658:	0800066f 	.word	0x0800066f
 800065c:	0800068d 	.word	0x0800068d
            case DO_MODE_LOW:                    /* Output will in fact be low                         */
                 break;

            case DO_MODE_HIGH:                   /* Output will be high                                */
                 out = TRUE;
 8000660:	2301      	movs	r3, #1
 8000662:	717b      	strb	r3, [r7, #5]
                 break;
 8000664:	e032      	b.n	80006cc <DOUpdate+0xb8>

            case DO_MODE_DIRECT:                 /* Output is based on state of user supplied state    */
                 out = pdo->DOBypass;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	717b      	strb	r3, [r7, #5]
                 break;
 800066c:	e02e      	b.n	80006cc <DOUpdate+0xb8>
/*$PAGE*/
#if DO_BLINK_MODE_EN
            case DO_MODE_BLINK_SYNC:                       /* Sync. Blink mode                         */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	f7ff ff90 	bl	8000594 <DOIsBlinkEn>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d027      	beq.n	80006ca <DOUpdate+0xb6>
                     if (pdo->DOA >= DOSyncCtr) {          /* ... yes, High when below threshold       */
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	895b      	ldrh	r3, [r3, #10]
 800067e:	4a2a      	ldr	r2, [pc, #168]	@ (8000728 <DOUpdate+0x114>)
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	4293      	cmp	r3, r2
 8000684:	d321      	bcc.n	80006ca <DOUpdate+0xb6>
                         out = TRUE;
 8000686:	2301      	movs	r3, #1
 8000688:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 break;
 800068a:	e01e      	b.n	80006ca <DOUpdate+0xb6>

            case DO_MODE_BLINK_ASYNC:                      /* Async. Blink mode                        */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff ff81 	bl	8000594 <DOIsBlinkEn>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <DOUpdate+0x94>
                     if (pdo->DOA >= pdo->DOBCtr) {        /* ... yes, High when below threshold       */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	895a      	ldrh	r2, [r3, #10]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	89db      	ldrh	r3, [r3, #14]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d301      	bcc.n	80006a8 <DOUpdate+0x94>
                         out = TRUE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	717b      	strb	r3, [r7, #5]
                     }
                 }
                 if (pdo->DOBCtr < pdo->DOB) {             /* Update the threshold counter             */
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	89da      	ldrh	r2, [r3, #14]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	899b      	ldrh	r3, [r3, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d206      	bcs.n	80006c2 <DOUpdate+0xae>
                     pdo->DOBCtr++;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	89db      	ldrh	r3, [r3, #14]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	81da      	strh	r2, [r3, #14]
                 } else {
                     pdo->DOBCtr = 0;
                 }
                 break;
 80006c0:	e004      	b.n	80006cc <DOUpdate+0xb8>
                     pdo->DOBCtr = 0;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	81da      	strh	r2, [r3, #14]
                 break;
 80006c8:	e000      	b.n	80006cc <DOUpdate+0xb8>
                 break;
 80006ca:	bf00      	nop
#endif
        }
        if (pdo->DOInv == TRUE) {                          /* See if output needs to be inverted ...   */
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <DOUpdate+0xce>
            pdo->DOOut = out ? FALSE : TRUE;               /* ... yes, complement output               */
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	f083 0301 	eor.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e002      	b.n	80006e8 <DOUpdate+0xd4>
        } else {
            pdo->DOOut = out;                              /* ... no,  no inversion!                   */
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	797a      	ldrb	r2, [r7, #5]
 80006e6:	701a      	strb	r2, [r3, #0]
        }
        pdo++;                                             /* Point to next DIO_DO element             */
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3310      	adds	r3, #16
 80006ec:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	3301      	adds	r3, #1
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d994      	bls.n	8000624 <DOUpdate+0x10>
    }
#if DO_BLINK_MODE_EN
    if (DOSyncCtr < DOSyncCtrMax) {                        /* Update the synchronous free running ctr  */
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <DOUpdate+0x114>)
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <DOUpdate+0x118>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d206      	bcs.n	8000714 <DOUpdate+0x100>
        DOSyncCtr++;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <DOUpdate+0x114>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <DOUpdate+0x114>)
 8000710:	701a      	strb	r2, [r3, #0]
    } else {
        DOSyncCtr = 0;
    }
#endif
}
 8000712:	e002      	b.n	800071a <DOUpdate+0x106>
        DOSyncCtr = 0;
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <DOUpdate+0x114>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000344 	.word	0x20000344
 8000728:	20000444 	.word	0x20000444
 800072c:	20000445 	.word	0x20000445

08000730 <DIOInitIO>:
*                   Port C = OUT  (not used)
*********************************************************************************************************
*/

void  DIOInitIO (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0


}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <DIRd>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIRd (void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
    uint16_t    i;
    uint16_t    in;
    uint16_t    msk;


    pdi = &DITbl[0];                                    /* Point at beginning of discrete inputs    */
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <DIRd+0x54>)
 8000744:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                                       /* Set mask to extract bit 0                */
 8000746:	2301      	movs	r3, #1
 8000748:	813b      	strh	r3, [r7, #8]
    in  = inp();                                     	/* Read the physical port (8 bits)          */
 800074a:	f000 f823 	bl	8000794 <inp>
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 8000752:	2300      	movs	r3, #0
 8000754:	817b      	strh	r3, [r7, #10]
 8000756:	e013      	b.n	8000780 <DIRd+0x44>
        pdi->DIIn   = (bool)(in & msk) ? 1 : 0;
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	893b      	ldrh	r3, [r7, #8]
 800075c:	4013      	ands	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2da      	uxtb	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	701a      	strb	r2, [r3, #0]
        msk       	<<= 1;
 800076e:	893b      	ldrh	r3, [r7, #8]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	813b      	strh	r3, [r7, #8]
        pdi++;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3308      	adds	r3, #8
 8000778:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {                          /* Map all 8 bits to first 8 DI channels    */
 800077a:	897b      	ldrh	r3, [r7, #10]
 800077c:	3301      	adds	r3, #1
 800077e:	817b      	strh	r3, [r7, #10]
 8000780:	897b      	ldrh	r3, [r7, #10]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d9e8      	bls.n	8000758 <DIRd+0x1c>
    }
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200002c4 	.word	0x200002c4

08000794 <inp>:
static uint16_t inp(){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
	uint16_t estado = 0; // Lee el estado de los 8 pines
 800079a:	2300      	movs	r3, #0
 800079c:	80fb      	strh	r3, [r7, #6]

	estado = (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)<<4)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)<<3)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)<<2)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)<<1)|(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0));
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	4817      	ldr	r0, [pc, #92]	@ (8000800 <inp+0x6c>)
 80007a2:	f000 ff8d 	bl	80016c0 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b21c      	sxth	r4, r3
 80007ac:	2140      	movs	r1, #64	@ 0x40
 80007ae:	4814      	ldr	r0, [pc, #80]	@ (8000800 <inp+0x6c>)
 80007b0:	f000 ff86 	bl	80016c0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4323      	orrs	r3, r4
 80007bc:	b21c      	sxth	r4, r3
 80007be:	2110      	movs	r1, #16
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <inp+0x6c>)
 80007c2:	f000 ff7d 	bl	80016c0 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4323      	orrs	r3, r4
 80007ce:	b21c      	sxth	r4, r3
 80007d0:	2102      	movs	r1, #2
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <inp+0x6c>)
 80007d4:	f000 ff74 	bl	80016c0 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4323      	orrs	r3, r4
 80007e0:	b21c      	sxth	r4, r3
 80007e2:	2101      	movs	r1, #1
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <inp+0x6c>)
 80007e6:	f000 ff6b 	bl	80016c0 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4323      	orrs	r3, r4
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	80fb      	strh	r3, [r7, #6]

	return estado;
 80007f4:	88fb      	ldrh	r3, [r7, #6]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010c00 	.word	0x40010c00

08000804 <DOWr>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOWr (void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
    DIO_DO  *pdo;
    uint16_t    i;
    uint16_t    out;
    uint16_t    msk;

    pdo = &DOTbl[0];						/* Point at first discrete output channel                  */
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <DOWr+0x54>)
 800080c:	60fb      	str	r3, [r7, #12]
    msk = 0x0001;                           /* First DO will be mapped to bit 0                        */
 800080e:	2301      	movs	r3, #1
 8000810:	80fb      	strh	r3, [r7, #6]
    out = 0x0000;                           /* Local 8 bit port image                                  */
 8000812:	2300      	movs	r3, #0
 8000814:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8000816:	2300      	movs	r3, #0
 8000818:	817b      	strh	r3, [r7, #10]
 800081a:	e010      	b.n	800083e <DOWr+0x3a>
        if (pdo->DOOut == TRUE) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <DOWr+0x28>
            out |= msk;
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4313      	orrs	r3, r2
 800082a:	813b      	strh	r3, [r7, #8]
        }
        msk <<= 1;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	80fb      	strh	r3, [r7, #6]
        pdo++;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3310      	adds	r3, #16
 8000836:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {              /* Map first 8 DO to 8 bit port image                      */
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	3301      	adds	r3, #1
 800083c:	817b      	strh	r3, [r7, #10]
 800083e:	897b      	ldrh	r3, [r7, #10]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d9eb      	bls.n	800081c <DOWr+0x18>
    }
    outp(GPIOA, out);                      /* Output port image to physical port                      */
 8000844:	893b      	ldrh	r3, [r7, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <DOWr+0x58>)
 800084a:	f000 f809 	bl	8000860 <outp>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000344 	.word	0x20000344
 800085c:	40010800 	.word	0x40010800

08000860 <outp>:
#endif

static void outp(GPIO_TypeDef *GPIOx, uint16_t estado){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = estado;
 800086c:	887a      	ldrh	r2, [r7, #2]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fca3 	bl	80011cc <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 8000886:	f7ff fc61 	bl	800014c <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 800088a:	2310      	movs	r3, #16
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	e009      	b.n	80008a4 <main+0x28>
  {
	  /* Set all external intr. to KA interrupt priority boundary */
	  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f005 fce7 	bl	800626c <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	3301      	adds	r3, #1
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d9f2      	bls.n	8000890 <main+0x14>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f8a3 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f8fb 	bl	8000aa8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008b2:	f009 fab5 	bl	8009e20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  OSInit();
 80008b6:	f006 f8ab 	bl	8006a10 <OSInit>

	OSTaskCreateExt( StartupTask,
 80008ba:	2303      	movs	r3, #3
 80008bc:	9304      	str	r3, [sp, #16]
 80008be:	2300      	movs	r3, #0
 80008c0:	9303      	str	r3, [sp, #12]
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	4b37      	ldr	r3, [pc, #220]	@ (80009a4 <main+0x128>)
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	4a35      	ldr	r2, [pc, #212]	@ (80009a8 <main+0x12c>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4835      	ldr	r0, [pc, #212]	@ (80009ac <main+0x130>)
 80008d6:	f007 f983 	bl	8007be0 <OSTaskCreateExt>
					 &StartupTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 80008da:	1d7b      	adds	r3, r7, #5
 80008dc:	461a      	mov	r2, r3
 80008de:	4934      	ldr	r1, [pc, #208]	@ (80009b0 <main+0x134>)
 80008e0:	2003      	movs	r0, #3
 80008e2:	f007 fad1 	bl	8007e88 <OSTaskNameSet>
		(INT8U *)"Startup task",
		&os_err);
	#endif

	OSTaskCreateExt( SenoTsk,
 80008e6:	2303      	movs	r3, #3
 80008e8:	9304      	str	r3, [sp, #16]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9303      	str	r3, [sp, #12]
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <main+0x138>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	4a2e      	ldr	r2, [pc, #184]	@ (80009b8 <main+0x13c>)
 80008fe:	2100      	movs	r1, #0
 8000900:	482e      	ldr	r0, [pc, #184]	@ (80009bc <main+0x140>)
 8000902:	f007 f96d 	bl	8007be0 <OSTaskCreateExt>
					 &SenoTaskStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8000906:	1d7b      	adds	r3, r7, #5
 8000908:	461a      	mov	r2, r3
 800090a:	492d      	ldr	r1, [pc, #180]	@ (80009c0 <main+0x144>)
 800090c:	2003      	movs	r0, #3
 800090e:	f007 fabb 	bl	8007e88 <OSTaskNameSet>
		(INT8U *)"Seno Task",
		&os_err);
	#endif


	OSTaskCreateExt( PrimerSecuencia,
 8000912:	2303      	movs	r3, #3
 8000914:	9304      	str	r3, [sp, #16]
 8000916:	2300      	movs	r3, #0
 8000918:	9303      	str	r3, [sp, #12]
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <main+0x148>)
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2303      	movs	r3, #3
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2303      	movs	r3, #3
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <main+0x14c>)
 800092a:	2100      	movs	r1, #0
 800092c:	4827      	ldr	r0, [pc, #156]	@ (80009cc <main+0x150>)
 800092e:	f007 f957 	bl	8007be0 <OSTaskCreateExt>
					 &PrimerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8000932:	1d7b      	adds	r3, r7, #5
 8000934:	461a      	mov	r2, r3
 8000936:	4926      	ldr	r1, [pc, #152]	@ (80009d0 <main+0x154>)
 8000938:	2003      	movs	r0, #3
 800093a:	f007 faa5 	bl	8007e88 <OSTaskNameSet>
		(INT8U *)"Primer Secuencia",
		&os_err);
	#endif


	OSTaskCreateExt( SegundaSecuencia,
 800093e:	2303      	movs	r3, #3
 8000940:	9304      	str	r3, [sp, #16]
 8000942:	2300      	movs	r3, #0
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <main+0x158>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	2304      	movs	r3, #4
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2304      	movs	r3, #4
 8000954:	4a20      	ldr	r2, [pc, #128]	@ (80009d8 <main+0x15c>)
 8000956:	2100      	movs	r1, #0
 8000958:	4820      	ldr	r0, [pc, #128]	@ (80009dc <main+0x160>)
 800095a:	f007 f941 	bl	8007be0 <OSTaskCreateExt>
					 &SegundaSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		 OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800095e:	1d7b      	adds	r3, r7, #5
 8000960:	461a      	mov	r2, r3
 8000962:	491f      	ldr	r1, [pc, #124]	@ (80009e0 <main+0x164>)
 8000964:	2003      	movs	r0, #3
 8000966:	f007 fa8f 	bl	8007e88 <OSTaskNameSet>
		 (INT8U *)"Segunda Secuencia",
		 &os_err);
	#endif


	OSTaskCreateExt( TercerSecuencia,
 800096a:	2303      	movs	r3, #3
 800096c:	9304      	str	r3, [sp, #16]
 800096e:	2300      	movs	r3, #0
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <main+0x168>)
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2305      	movs	r3, #5
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2305      	movs	r3, #5
 8000980:	4a19      	ldr	r2, [pc, #100]	@ (80009e8 <main+0x16c>)
 8000982:	2100      	movs	r1, #0
 8000984:	4819      	ldr	r0, [pc, #100]	@ (80009ec <main+0x170>)
 8000986:	f007 f92b 	bl	8007be0 <OSTaskCreateExt>
					 &TercerSecuenciaStk[0],
					 APP_CFG_STARTUP_TASK_STK_SIZE,
					 0,
					 (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	#if (OS_TASK_NAME_EN > 0u)
		  OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 800098a:	1d7b      	adds	r3, r7, #5
 800098c:	461a      	mov	r2, r3
 800098e:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <main+0x174>)
 8000990:	2003      	movs	r0, #3
 8000992:	f007 fa79 	bl	8007e88 <OSTaskNameSet>
		  (INT8U *)"Tercer Secuencia",
		  &os_err);
	#endif


  DIOInit();
 8000996:	f7ff fd41 	bl	800041c <DIOInit>
  OSStart();
 800099a:	f006 f919 	bl	8006bd0 <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0x122>
 80009a2:	bf00      	nop
 80009a4:	20000c48 	.word	0x20000c48
 80009a8:	20000e44 	.word	0x20000e44
 80009ac:	08000bcd 	.word	0x08000bcd
 80009b0:	0800b0d0 	.word	0x0800b0d0
 80009b4:	20000e48 	.word	0x20000e48
 80009b8:	20001044 	.word	0x20001044
 80009bc:	08000c41 	.word	0x08000c41
 80009c0:	0800b0e0 	.word	0x0800b0e0
 80009c4:	20001048 	.word	0x20001048
 80009c8:	20001244 	.word	0x20001244
 80009cc:	08000d39 	.word	0x08000d39
 80009d0:	0800b0ec 	.word	0x0800b0ec
 80009d4:	20001248 	.word	0x20001248
 80009d8:	20001444 	.word	0x20001444
 80009dc:	08000da5 	.word	0x08000da5
 80009e0:	0800b100 	.word	0x0800b100
 80009e4:	20001448 	.word	0x20001448
 80009e8:	20001644 	.word	0x20001644
 80009ec:	08000e17 	.word	0x08000e17
 80009f0:	0800b114 	.word	0x0800b114

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fe:	2228      	movs	r2, #40	@ 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 fec8 	bl	800a798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a32:	2301      	movs	r3, #1
 8000a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a40:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fbd4 	bl	80031f8 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a56:	f000 facf 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fe40 	bl	80036fc <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a82:	f000 fab9 	bl	8000ff8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a86:	2310      	movs	r3, #16
 8000a88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 ff99 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a9c:	f000 faac 	bl	8000ff8 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	@ 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a33      	ldr	r2, [pc, #204]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a27      	ldr	r2, [pc, #156]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a21      	ldr	r2, [pc, #132]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_GPIO_Init+0xe8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b22:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <MX_GPIO_Init+0xec>)
 8000b24:	f000 fde3 	bl	80016ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000b2e:	481a      	ldr	r0, [pc, #104]	@ (8000b98 <MX_GPIO_Init+0xf0>)
 8000b30:	f000 fddd 	bl	80016ee <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <MX_GPIO_Init+0xec>)
 8000b4e:	f000 fc33 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b52:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b56:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <MX_GPIO_Init+0xf0>)
 8000b6c:	f000 fc24 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000b70:	23d3      	movs	r3, #211	@ 0xd3
 8000b72:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_GPIO_Init+0xf4>)
 8000b84:	f000 fc18 	bl	80013b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 8000bba:	f007 fb93 	bl	80082e4 <OSTimeGet>
 8000bbe:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <StartupTask>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

static void StartupTask (void *p_arg){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000bd4:	f002 fed0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8000bd8:	60f8      	str	r0, [r7, #12]

	/* Initialize and enable System Tick timer */
	OS_CPU_SysTickInitFreq(cpu_clk);
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f005 fe9c 	bl	8006918 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();                                               /* Determine CPU capacity.                              */
 8000be0:	f006 f81e 	bl	8006c20 <OSStatInit>
	#endif

	while (DEF_TRUE){
		switch (GetButton()) {
 8000be4:	f000 f971 	bl	8000eca <GetButton>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d820      	bhi.n	8000c30 <StartupTask+0x64>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <StartupTask+0x28>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c09 	.word	0x08000c09
 8000bf8:	08000c11 	.word	0x08000c11
 8000bfc:	08000c19 	.word	0x08000c19
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c29 	.word	0x08000c29
			case BOTON1:
				SuspendAllTasksExceptOne(SEC1);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f9c2 	bl	8000f92 <SuspendAllTasksExceptOne>
				break;
 8000c0e:	e012      	b.n	8000c36 <StartupTask+0x6a>
			case BOTON2:
				SuspendAllTasksExceptOne(SEC2);
 8000c10:	2004      	movs	r0, #4
 8000c12:	f000 f9be 	bl	8000f92 <SuspendAllTasksExceptOne>
				break;
 8000c16:	e00e      	b.n	8000c36 <StartupTask+0x6a>
			case BOTON3:
				SuspendAllTasksExceptOne(SEC3);
 8000c18:	2005      	movs	r0, #5
 8000c1a:	f000 f9ba 	bl	8000f92 <SuspendAllTasksExceptOne>
				break;
 8000c1e:	e00a      	b.n	8000c36 <StartupTask+0x6a>
			case BOTON4:
				SuspendAllTasksExceptOne(SENO);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f000 f9b6 	bl	8000f92 <SuspendAllTasksExceptOne>
				break;
 8000c26:	e006      	b.n	8000c36 <StartupTask+0x6a>
			case BOTON5:
				SuspendAllTasksExceptOne(SENO);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 f9b2 	bl	8000f92 <SuspendAllTasksExceptOne>
				break;
 8000c2e:	e002      	b.n	8000c36 <StartupTask+0x6a>
			default:
				SuspendAllTasks();
 8000c30:	f000 f999 	bl	8000f66 <SuspendAllTasks>
				break;
 8000c34:	bf00      	nop
		}
		OSTimeDly(1);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f007 fb04 	bl	8008244 <OSTimeDly>
		switch (GetButton()) {
 8000c3c:	e7d2      	b.n	8000be4 <StartupTask+0x18>
 8000c3e:	bf00      	nop

08000c40 <SenoTsk>:
	}
}


static void SenoTsk (void *p_arg){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000c48:	f002 fe96 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8000c4c:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f005 fe62 	bl	8006918 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000c54:	f005 ffe4 	bl	8006c20 <OSStatInit>
	#endif

	while (DEF_TRUE){
		ApagarBlink();
 8000c58:	f000 f9bb 	bl	8000fd2 <ApagarBlink>

		UsbPrintf("Frencuencia Seno: %d Hz\n", valorFrecuenciaHz[frecuencia]);
 8000c5c:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <SenoTsk+0xe0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a30      	ldr	r2, [pc, #192]	@ (8000d24 <SenoTsk+0xe4>)
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	4619      	mov	r1, r3
 8000c68:	482f      	ldr	r0, [pc, #188]	@ (8000d28 <SenoTsk+0xe8>)
 8000c6a:	f000 f90b 	bl	8000e84 <UsbPrintf>

		if(DIGet(3)){
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f7ff fb34 	bl	80002dc <DIGet>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d008      	beq.n	8000c8c <SenoTsk+0x4c>
			if(frecuencia < 4){
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <SenoTsk+0xe0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	dc04      	bgt.n	8000c8c <SenoTsk+0x4c>
				frecuencia++;
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <SenoTsk+0xe0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <SenoTsk+0xe0>)
 8000c8a:	6013      	str	r3, [r2, #0]
			}
		}
		if(DIGet(4)){
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f7ff fb25 	bl	80002dc <DIGet>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d008      	beq.n	8000caa <SenoTsk+0x6a>
			if(frecuencia > 0){
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <SenoTsk+0xe0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dd04      	ble.n	8000caa <SenoTsk+0x6a>
				frecuencia--;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <SenoTsk+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <SenoTsk+0xe0>)
 8000ca8:	6013      	str	r3, [r2, #0]
			}
		}
		for(int i = 0; i < seno45; i++){
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e033      	b.n	8000d18 <SenoTsk+0xd8>
			for(int j = 0; j < 8; j++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e022      	b.n	8000cfc <SenoTsk+0xbc>
				salida[j] = (senoArreglo45[i] >> j) % 2;
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d2c <SenoTsk+0xec>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	fa42 f303 	asr.w	r3, r2, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	bfb8      	it	lt
 8000ccc:	425b      	neglt	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4917      	ldr	r1, [pc, #92]	@ (8000d30 <SenoTsk+0xf0>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DOSet(j, salida[j]);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4914      	ldr	r1, [pc, #80]	@ (8000d30 <SenoTsk+0xf0>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f7ff fc73 	bl	80005dc <DOSet>
			for(int j = 0; j < 8; j++){
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	ddd9      	ble.n	8000cb6 <SenoTsk+0x76>
			}
			OSTimeDly(valorFrecuencia[frecuencia]);
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <SenoTsk+0xe0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <SenoTsk+0xf4>)
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fa99 	bl	8008244 <OSTimeDly>
		for(int i = 0; i < seno45; i++){
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d1c:	ddc8      	ble.n	8000cb0 <SenoTsk+0x70>
		ApagarBlink();
 8000d1e:	e79b      	b.n	8000c58 <SenoTsk+0x18>
 8000d20:	20001668 	.word	0x20001668
 8000d24:	20000014 	.word	0x20000014
 8000d28:	0800b128 	.word	0x0800b128
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	20001648 	.word	0x20001648
 8000d34:	20000000 	.word	0x20000000

08000d38 <PrimerSecuencia>:
		}
	}
}


static void PrimerSecuencia (void *p_arg){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000d40:	f002 fe1a 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8000d44:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f005 fde6 	bl	8006918 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000d4c:	f005 ff68 	bl	8006c20 <OSStatInit>
	#endif

	PinReset();
 8000d50:	f000 f8f2 	bl	8000f38 <PinReset>

	while (DEF_TRUE){
		UsbPrintf("Secuencia 1");
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <PrimerSecuencia+0x68>)
 8000d56:	f000 f895 	bl	8000e84 <UsbPrintf>
	    DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	2008      	movs	r0, #8
 8000d60:	f7ff fbf6 	bl	8000550 <DOCfgMode>
	    DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 8000d64:	23c7      	movs	r3, #199	@ 0xc7
 8000d66:	2263      	movs	r2, #99	@ 0x63
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f7ff fbc2 	bl	80004f4 <DOCfgBlink>

	    DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2104      	movs	r1, #4
 8000d74:	2009      	movs	r0, #9
 8000d76:	f7ff fbeb 	bl	8000550 <DOCfgMode>
	    DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8000d7a:	f240 138f 	movw	r3, #399	@ 0x18f
 8000d7e:	22c7      	movs	r2, #199	@ 0xc7
 8000d80:	2100      	movs	r1, #0
 8000d82:	2009      	movs	r0, #9
 8000d84:	f7ff fbb6 	bl	80004f4 <DOCfgBlink>

	    DOCfgMode(LED3, DO_MODE_LOW, false);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f7ff fbdf 	bl	8000550 <DOCfgMode>

	    OSTimeDly(800);
 8000d92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000d96:	f007 fa55 	bl	8008244 <OSTimeDly>
		UsbPrintf("Secuencia 1");
 8000d9a:	bf00      	nop
 8000d9c:	e7da      	b.n	8000d54 <PrimerSecuencia+0x1c>
 8000d9e:	bf00      	nop
 8000da0:	0800b144 	.word	0x0800b144

08000da4 <SegundaSecuencia>:
	}
}


static void SegundaSecuencia (void *p_arg){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000dac:	f002 fde4 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8000db0:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f005 fdb0 	bl	8006918 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000db8:	f005 ff32 	bl	8006c20 <OSStatInit>
	#endif

	PinReset();
 8000dbc:	f000 f8bc 	bl	8000f38 <PinReset>

	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	2008      	movs	r0, #8
 8000dc6:	f7ff fbc3 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 299);
 8000dca:	f240 132b 	movw	r3, #299	@ 0x12b
 8000dce:	2263      	movs	r2, #99	@ 0x63
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2008      	movs	r0, #8
 8000dd4:	f7ff fb8e 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	2009      	movs	r0, #9
 8000dde:	f7ff fbb7 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 199, 399);
 8000de2:	f240 138f 	movw	r3, #399	@ 0x18f
 8000de6:	22c7      	movs	r2, #199	@ 0xc7
 8000de8:	2100      	movs	r1, #0
 8000dea:	2009      	movs	r0, #9
 8000dec:	f7ff fb82 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff fbab 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 299, 399);
 8000dfa:	f240 138f 	movw	r3, #399	@ 0x18f
 8000dfe:	f240 122b 	movw	r2, #299	@ 0x12b
 8000e02:	2100      	movs	r1, #0
 8000e04:	200a      	movs	r0, #10
 8000e06:	f7ff fb75 	bl	80004f4 <DOCfgBlink>

		OSTimeDly(1200);
 8000e0a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000e0e:	f007 fa19 	bl	8008244 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e12:	bf00      	nop
 8000e14:	e7d4      	b.n	8000dc0 <SegundaSecuencia+0x1c>

08000e16 <TercerSecuencia>:
	}
}


static void TercerSecuencia (void *p_arg){
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	CPU_INT32U cpu_clk;
	(void)p_arg;
	cpu_clk = HAL_RCC_GetHCLKFreq();
 8000e1e:	f002 fdab 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8000e22:	60f8      	str	r0, [r7, #12]

	OS_CPU_SysTickInitFreq(cpu_clk);
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f005 fd77 	bl	8006918 <OS_CPU_SysTickInitFreq>

	#if (OS_TASK_STAT_EN > 0)
		OSStatInit();
 8000e2a:	f005 fef9 	bl	8006c20 <OSStatInit>
	#endif

	PinReset();
 8000e2e:	f000 f883 	bl	8000f38 <PinReset>

	while (DEF_TRUE){
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2104      	movs	r1, #4
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff fb8a 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED1, DO_BLINK_EN, 99, 199);
 8000e3c:	23c7      	movs	r3, #199	@ 0xc7
 8000e3e:	2263      	movs	r2, #99	@ 0x63
 8000e40:	2100      	movs	r1, #0
 8000e42:	2008      	movs	r0, #8
 8000e44:	f7ff fb56 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED2, DO_MODE_BLINK_ASYNC, false);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	2009      	movs	r0, #9
 8000e4e:	f7ff fb7f 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED2, DO_BLINK_EN, 149, 299);
 8000e52:	f240 132b 	movw	r3, #299	@ 0x12b
 8000e56:	2295      	movs	r2, #149	@ 0x95
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2009      	movs	r0, #9
 8000e5c:	f7ff fb4a 	bl	80004f4 <DOCfgBlink>

		DOCfgMode(LED3, DO_MODE_BLINK_ASYNC, false);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2104      	movs	r1, #4
 8000e64:	200a      	movs	r0, #10
 8000e66:	f7ff fb73 	bl	8000550 <DOCfgMode>
		DOCfgBlink(LED3, DO_BLINK_EN, 199, 349);
 8000e6a:	f240 135d 	movw	r3, #349	@ 0x15d
 8000e6e:	22c7      	movs	r2, #199	@ 0xc7
 8000e70:	2100      	movs	r1, #0
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff fb3e 	bl	80004f4 <DOCfgBlink>

		OSTimeDly(3000);
 8000e78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e7c:	f007 f9e2 	bl	8008244 <OSTimeDly>
		DOCfgMode(LED1, DO_MODE_BLINK_ASYNC, false);
 8000e80:	bf00      	nop
 8000e82:	e7d6      	b.n	8000e32 <TercerSecuencia+0x1c>

08000e84 <UsbPrintf>:
* Caller(s)   :
* Note(s)     : none.
**************************************************************************************************************************
*/
void UsbPrintf (CPU_CHAR  *p_fmt, ...)
{
 8000e84:	b40f      	push	{r0, r1, r2, r3}
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b098      	sub	sp, #96	@ 0x60
 8000e8a:	af00      	add	r7, sp, #0
    CPU_CHAR    str[80u + 1u];
    CPU_SIZE_T  len;
    va_list     vArgs;

    va_start(vArgs, p_fmt);
 8000e8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e90:	607b      	str	r3, [r7, #4]

    vsprintf((char       *)str,
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f009 fc72 	bl	800a784 <vsiprintf>
             (char const *)p_fmt,
                           vArgs);

    va_end(vArgs);

    len = strlen(str);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa11 	bl	80002cc <strlen>
 8000eaa:	65f8      	str	r0, [r7, #92]	@ 0x5c

    CDC_Transmit_FS((uint8_t *)str, len);
 8000eac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f009 f870 	bl	8009f9c <CDC_Transmit_FS>
}
 8000ebc:	bf00      	nop
 8000ebe:	3760      	adds	r7, #96	@ 0x60
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec6:	b004      	add	sp, #16
 8000ec8:	4770      	bx	lr

08000eca <GetButton>:

int GetButton(){
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
	int boton;

	if(DIGet(BOTON1)){
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fa03 	bl	80002dc <DIGet>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <GetButton+0x18>
		boton = BOTON1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	e025      	b.n	8000f2e <GetButton+0x64>
	}else if(DIGet(BOTON2)){
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff f9fa 	bl	80002dc <DIGet>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <GetButton+0x2a>
		boton = BOTON2;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e01c      	b.n	8000f2e <GetButton+0x64>
	}else if(DIGet(BOTON3)){
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f7ff f9f1 	bl	80002dc <DIGet>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <GetButton+0x3c>
		boton = BOTON3;
 8000f00:	2302      	movs	r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	e013      	b.n	8000f2e <GetButton+0x64>
	}else if(DIGet(BOTON4)){
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff f9e8 	bl	80002dc <DIGet>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <GetButton+0x4e>
		boton = BOTON4;
 8000f12:	2303      	movs	r3, #3
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e00a      	b.n	8000f2e <GetButton+0x64>
	}else if(DIGet(BOTON5)){
 8000f18:	2004      	movs	r0, #4
 8000f1a:	f7ff f9df 	bl	80002dc <DIGet>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <GetButton+0x60>
		boton = BOTON5;
 8000f24:	2304      	movs	r3, #4
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <GetButton+0x64>
	}else
		boton = DEFAULT;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	607b      	str	r3, [r7, #4]

	return boton;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <PinReset>:

void PinReset(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	for (int pin = 0; pin < 8; pin++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e008      	b.n	8000f56 <PinReset+0x1e>
		DOSet(pin, 0);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fb46 	bl	80005dc <DOSet>
	for (int pin = 0; pin < 8; pin++) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	ddf3      	ble.n	8000f44 <PinReset+0xc>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <SuspendAllTasks>:

void SuspendAllTasks(){
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
	for (int task = 2; task < 6; task++) {
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	e007      	b.n	8000f82 <SuspendAllTasks+0x1c>
		OSTaskSuspend(task);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 f8b6 	bl	80080e8 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	ddf4      	ble.n	8000f72 <SuspendAllTasks+0xc>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <SuspendAllTasksExceptOne>:

void SuspendAllTasksExceptOne(int TaskID){
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]

	OSTaskResume(TaskID);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f006 ffc6 	bl	8007f30 <OSTaskResume>

	for (int task = 2; task < 6; task++) {
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e00b      	b.n	8000fc2 <SuspendAllTasksExceptOne+0x30>
		if(task != TaskID){
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d004      	beq.n	8000fbc <SuspendAllTasksExceptOne+0x2a>
			OSTaskSuspend(task);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f896 	bl	80080e8 <OSTaskSuspend>
	for (int task = 2; task < 6; task++) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	ddf0      	ble.n	8000faa <SuspendAllTasksExceptOne+0x18>
		}
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <ApagarBlink>:

void ApagarBlink(){
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
	DOCfgMode(LED1, DO_MODE_LOW, false);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2008      	movs	r0, #8
 8000fdc:	f7ff fab8 	bl	8000550 <DOCfgMode>
	DOCfgMode(LED2, DO_MODE_LOW, false);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2009      	movs	r0, #9
 8000fe6:	f7ff fab3 	bl	8000550 <DOCfgMode>
	DOCfgMode(LED3, DO_MODE_LOW, false);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f7ff faae 	bl	8000550 <DOCfgMode>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <MemManage_Handler+0x4>

08001084 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <UsageFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010b2:	f000 fc59 	bl	8001968 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20003ae0 	.word	0x20003ae0

080010c0 <_sbrk>:
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_sbrk+0x50>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x16>
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <_sbrk+0x50>)
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <_sbrk+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <_sbrk+0x50>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <_sbrk+0x50>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	466a      	mov	r2, sp
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d907      	bls.n	80010fa <_sbrk+0x3a>
 80010ea:	f009 fb5d 	bl	800a7a8 <__errno>
 80010ee:	4603      	mov	r3, r0
 80010f0:	220c      	movs	r2, #12
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e006      	b.n	8001108 <_sbrk+0x48>
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <_sbrk+0x50>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <_sbrk+0x50>)
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000166c 	.word	0x2000166c
 8001114:	20004138 	.word	0x20004138

08001118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <SystemInit+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <SystemInit+0x5c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <SystemInit+0x5c>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4911      	ldr	r1, [pc, #68]	@ (8001174 <SystemInit+0x5c>)
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <SystemInit+0x60>)
 8001130:	4013      	ands	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <SystemInit+0x5c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <SystemInit+0x5c>)
 800113a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <SystemInit+0x5c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SystemInit+0x5c>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <SystemInit+0x5c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <SystemInit+0x5c>)
 8001156:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800115a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SystemInit+0x5c>)
 800115e:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8001162:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SystemInit+0x64>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800116a:	609a      	str	r2, [r3, #8]
#endif 
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	f8ff0000 	.word	0xf8ff0000
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:
 8001180:	2100      	movs	r1, #0
 8001182:	e003      	b.n	800118c <LoopCopyDataInit>

08001184 <CopyDataInit>:
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <LoopFillZerobss+0x14>)
 8001186:	585b      	ldr	r3, [r3, r1]
 8001188:	5043      	str	r3, [r0, r1]
 800118a:	3104      	adds	r1, #4

0800118c <LoopCopyDataInit>:
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x18>)
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <LoopFillZerobss+0x1c>)
 8001190:	1842      	adds	r2, r0, r1
 8001192:	429a      	cmp	r2, r3
 8001194:	d3f6      	bcc.n	8001184 <CopyDataInit>
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LoopFillZerobss+0x20>)
 8001198:	e002      	b.n	80011a0 <LoopFillZerobss>

0800119a <FillZerobss>:
 800119a:	2300      	movs	r3, #0
 800119c:	f842 3b04 	str.w	r3, [r2], #4

080011a0 <LoopFillZerobss>:
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <LoopFillZerobss+0x24>)
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3f9      	bcc.n	800119a <FillZerobss>
 80011a6:	f7ff ffb7 	bl	8001118 <SystemInit>
 80011aa:	f009 fb03 	bl	800a7b4 <__libc_init_array>
 80011ae:	f7ff fb65 	bl	800087c <main>
 80011b2:	4770      	bx	lr
 80011b4:	0800b3e0 	.word	0x0800b3e0
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200002a8 	.word	0x200002a8
 80011c0:	200002a8 	.word	0x200002a8
 80011c4:	20004138 	.word	0x20004138

080011c8 <ADC1_2_IRQHandler>:
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f8b5 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fcdc 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff ff0c 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	@ (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff4f 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff64 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ffb2 	bl	80012e8 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff81 	bl	8001294 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff57 	bl	800125c <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b08b      	sub	sp, #44	@ 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ca:	e169      	b.n	80016a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013cc:	2201      	movs	r2, #1
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 8158 	bne.w	800169a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001658 <HAL_GPIO_Init+0x2a0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d05e      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 80013f4:	4a98      	ldr	r2, [pc, #608]	@ (8001658 <HAL_GPIO_Init+0x2a0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d875      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 80013fa:	4a98      	ldr	r2, [pc, #608]	@ (800165c <HAL_GPIO_Init+0x2a4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d058      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001400:	4a96      	ldr	r2, [pc, #600]	@ (800165c <HAL_GPIO_Init+0x2a4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d86f      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001406:	4a96      	ldr	r2, [pc, #600]	@ (8001660 <HAL_GPIO_Init+0x2a8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d052      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 800140c:	4a94      	ldr	r2, [pc, #592]	@ (8001660 <HAL_GPIO_Init+0x2a8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d869      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001412:	4a94      	ldr	r2, [pc, #592]	@ (8001664 <HAL_GPIO_Init+0x2ac>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d04c      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001418:	4a92      	ldr	r2, [pc, #584]	@ (8001664 <HAL_GPIO_Init+0x2ac>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d863      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 800141e:	4a92      	ldr	r2, [pc, #584]	@ (8001668 <HAL_GPIO_Init+0x2b0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d046      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001424:	4a90      	ldr	r2, [pc, #576]	@ (8001668 <HAL_GPIO_Init+0x2b0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d85d      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d82a      	bhi.n	8001484 <HAL_GPIO_Init+0xcc>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d859      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <HAL_GPIO_Init+0x80>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	080014b3 	.word	0x080014b3
 800143c:	0800148d 	.word	0x0800148d
 8001440:	0800149f 	.word	0x0800149f
 8001444:	080014e1 	.word	0x080014e1
 8001448:	080014e7 	.word	0x080014e7
 800144c:	080014e7 	.word	0x080014e7
 8001450:	080014e7 	.word	0x080014e7
 8001454:	080014e7 	.word	0x080014e7
 8001458:	080014e7 	.word	0x080014e7
 800145c:	080014e7 	.word	0x080014e7
 8001460:	080014e7 	.word	0x080014e7
 8001464:	080014e7 	.word	0x080014e7
 8001468:	080014e7 	.word	0x080014e7
 800146c:	080014e7 	.word	0x080014e7
 8001470:	080014e7 	.word	0x080014e7
 8001474:	080014e7 	.word	0x080014e7
 8001478:	080014e7 	.word	0x080014e7
 800147c:	08001495 	.word	0x08001495
 8001480:	080014a9 	.word	0x080014a9
 8001484:	4a79      	ldr	r2, [pc, #484]	@ (800166c <HAL_GPIO_Init+0x2b4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148a:	e02c      	b.n	80014e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e029      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	3304      	adds	r3, #4
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e024      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	3308      	adds	r3, #8
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e01f      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	330c      	adds	r3, #12
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e01a      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ba:	2304      	movs	r3, #4
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e013      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	611a      	str	r2, [r3, #16]
          break;
 80014d2:	e009      	b.n	80014e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	615a      	str	r2, [r3, #20]
          break;
 80014de:	e003      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          break;
 80014e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	@ 0xff
 80014ec:	d801      	bhi.n	80014f2 <HAL_GPIO_Init+0x13a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	e001      	b.n	80014f6 <HAL_GPIO_Init+0x13e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2bff      	cmp	r3, #255	@ 0xff
 80014fc:	d802      	bhi.n	8001504 <HAL_GPIO_Init+0x14c>
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x152>
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	3b08      	subs	r3, #8
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	210f      	movs	r1, #15
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	6a39      	ldr	r1, [r7, #32]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80b1 	beq.w	800169a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001538:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b4a      	ldr	r3, [pc, #296]	@ (8001670 <HAL_GPIO_Init+0x2b8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001550:	4a48      	ldr	r2, [pc, #288]	@ (8001674 <HAL_GPIO_Init+0x2bc>)
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a40      	ldr	r2, [pc, #256]	@ (8001678 <HAL_GPIO_Init+0x2c0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d013      	beq.n	80015a4 <HAL_GPIO_Init+0x1ec>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3f      	ldr	r2, [pc, #252]	@ (800167c <HAL_GPIO_Init+0x2c4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d00d      	beq.n	80015a0 <HAL_GPIO_Init+0x1e8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <HAL_GPIO_Init+0x2c8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d007      	beq.n	800159c <HAL_GPIO_Init+0x1e4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a3d      	ldr	r2, [pc, #244]	@ (8001684 <HAL_GPIO_Init+0x2cc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_GPIO_Init+0x1e0>
 8001594:	2303      	movs	r3, #3
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 8001598:	2304      	movs	r3, #4
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 80015a4:	2300      	movs	r3, #0
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b6:	492f      	ldr	r1, [pc, #188]	@ (8001674 <HAL_GPIO_Init+0x2bc>)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	492c      	ldr	r1, [pc, #176]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4928      	ldr	r1, [pc, #160]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f8:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	4922      	ldr	r1, [pc, #136]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	491e      	ldr	r1, [pc, #120]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001610:	4013      	ands	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4918      	ldr	r1, [pc, #96]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	4914      	ldr	r1, [pc, #80]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 8001638:	4013      	ands	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d021      	beq.n	800168c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e021      	b.n	800169a <HAL_GPIO_Init+0x2e2>
 8001656:	bf00      	nop
 8001658:	10320000 	.word	0x10320000
 800165c:	10310000 	.word	0x10310000
 8001660:	10220000 	.word	0x10220000
 8001664:	10210000 	.word	0x10210000
 8001668:	10120000 	.word	0x10120000
 800166c:	10110000 	.word	0x10110000
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40011000 	.word	0x40011000
 8001684:	40011400 	.word	0x40011400
 8001688:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_GPIO_Init+0x304>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	43db      	mvns	r3, r3
 8001694:	4909      	ldr	r1, [pc, #36]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001696:	4013      	ands	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	3301      	adds	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f ae8e 	bne.w	80013cc <HAL_GPIO_Init+0x14>
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	372c      	adds	r7, #44	@ 0x2c
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]
 80016fa:	4613      	mov	r3, r2
 80016fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800170a:	e003      	b.n	8001714 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	611a      	str	r2, [r3, #16]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800171e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001720:	b08b      	sub	sp, #44	@ 0x2c
 8001722:	af06      	add	r7, sp, #24
 8001724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0f1      	b.n	8001914 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f008 fd5d 	bl	800a204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fa12 	bl	8003b80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	602b      	str	r3, [r5, #0]
 8001772:	1d33      	adds	r3, r6, #4
 8001774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f002 f9dc 	bl	8003b34 <USB_CoreInit>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0c2      	b.n	8001914 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fa0d 	bl	8003bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e040      	b.n	8001822 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3301      	adds	r3, #1
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3303      	adds	r3, #3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3338      	adds	r3, #56	@ 0x38
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	333c      	adds	r3, #60	@ 0x3c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3340      	adds	r3, #64	@ 0x40
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	3301      	adds	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3b9      	bcc.n	80017a0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e044      	b.n	80018bc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	3301      	adds	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3b5      	bcc.n	8001832 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	687e      	ldr	r6, [r7, #4]
 80018ce:	466d      	mov	r5, sp
 80018d0:	f106 0410 	add.w	r4, r6, #16
 80018d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	1d33      	adds	r3, r6, #4
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f002 f973 	bl	8003bcc <USB_DevInit>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e00d      	b.n	8001914 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fbf4 	bl	80060fa <USB_DevDisconnect>

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800191c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_PCD_Start+0x16>
 800192e:	2302      	movs	r3, #2
 8001930:	e016      	b.n	8001960 <HAL_PCD_Start+0x44>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 f908 	bl	8003b54 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001944:	2101      	movs	r1, #1
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f008 fecf 	bl	800a6ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fbc8 	bl	80060e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f004 fbca 	bl	800610e <USB_ReadInterrupts>
 800197a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fb1b 	bl	8001fc2 <PCD_EP_ISR_Handler>

    return;
 800198c:	e119      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019aa:	b292      	uxth	r2, r2
 80019ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f008 fca2 	bl	800a2fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019b6:	2100      	movs	r1, #0
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f905 	bl	8001bc8 <HAL_PCD_SetAddress>

    return;
 80019be:	e100      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00c      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019e2:	e0ee      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a00:	b292      	uxth	r2, r2
 8001a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a06:	e0dc      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d027      	beq.n	8001a62 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0204 	bic.w	r2, r2, #4
 8001a24:	b292      	uxth	r2, r2
 8001a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0208 	bic.w	r2, r2, #8
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f008 fc92 	bl	800a36c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a60:	e0af      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8083 	beq.w	8001b74 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77fb      	strb	r3, [r7, #31]
 8001a72:	e010      	b.n	8001a96 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	441a      	add	r2, r3
 8001a80:	7ffb      	ldrb	r3, [r7, #31]
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	b292      	uxth	r2, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	3320      	adds	r3, #32
 8001a8a:	443b      	add	r3, r7
 8001a8c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	3301      	adds	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d9eb      	bls.n	8001a74 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	b292      	uxth	r2, r2
 8001ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001acc:	bf00      	nop
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f6      	beq.n	8001ace <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af2:	b292      	uxth	r2, r2
 8001af4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	77fb      	strb	r3, [r7, #31]
 8001afc:	e00f      	b.n	8001b1e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	7ffa      	ldrb	r2, [r7, #31]
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	440a      	add	r2, r1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	3320      	adds	r3, #32
 8001b10:	443b      	add	r3, r7
 8001b12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b16:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	d9ec      	bls.n	8001afe <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0208 	orr.w	r2, r2, #8
 8001b36:	b292      	uxth	r2, r2
 8001b38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0204 	orr.w	r2, r2, #4
 8001b66:	b292      	uxth	r2, r2
 8001b68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f008 fbe3 	bl	800a338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b72:	e026      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00f      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b90:	b292      	uxth	r2, r2
 8001b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f008 fba1 	bl	800a2de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b9c:	e011      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bc0:	bf00      	nop
  }
}
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_PCD_SetAddress+0x1a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e013      	b.n	8001c0a <HAL_PCD_SetAddress+0x42>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fa60 	bl	80060c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	70fb      	strb	r3, [r7, #3]
 8001c24:	460b      	mov	r3, r1
 8001c26:	803b      	strh	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0e      	bge.n	8001c56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 0207 	and.w	r2, r3, #7
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c80:	883a      	ldrh	r2, [r7, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	78ba      	ldrb	r2, [r7, #2]
 8001c8a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d102      	bne.n	8001c98 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_PCD_EP_Open+0x94>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e00e      	b.n	8001cc4 <HAL_PCD_EP_Open+0xb2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 ffa9 	bl	8003c0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da0e      	bge.n	8001cfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00e      	b.n	8001d1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 0207 	and.w	r2, r3, #7
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_EP_Close+0x6a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <HAL_PCD_EP_Close+0x88>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fb21 	bl	800438c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6979      	ldr	r1, [r7, #20]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fcd8 	bl	8004764 <USB_EPStartXfer>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 0207 	and.w	r2, r3, #7
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001de0:	681b      	ldr	r3, [r3, #0]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2201      	movs	r2, #1
 8001e36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e38:	7afb      	ldrb	r3, [r7, #11]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 fc8a 	bl	8004764 <USB_EPStartXfer>

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 0207 	and.w	r2, r3, #7
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d901      	bls.n	8001e78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e04c      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da0e      	bge.n	8001e9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e00c      	b.n	8001eb8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_EP_SetStall+0x7e>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e01c      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xb8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 ffed 	bl	8005ec6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f004 f912 	bl	800612c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d901      	bls.n	8001f38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e040      	b.n	8001fba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0e      	bge.n	8001f5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	705a      	strb	r2, [r3, #1]
 8001f5c:	e00e      	b.n	8001f7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 0207 	and.w	r2, r3, #7
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_PCD_EP_ClrStall+0x82>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e00e      	b.n	8001fba <HAL_PCD_EP_ClrStall+0xa0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 ffdb 	bl	8005f66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b096      	sub	sp, #88	@ 0x58
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fca:	e3be      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001fe6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 8178 	bne.w	80022e0 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ff0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d151      	bne.n	80020a0 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200c:	81fb      	strh	r3, [r7, #14]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3328      	adds	r3, #40	@ 0x28
 8002024:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	3302      	adds	r3, #2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800204e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002050:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	441a      	add	r2, r3
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f008 f921 	bl	800a2aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 836a 	beq.w	800274a <PCD_EP_ISR_Handler+0x788>
 8002076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8365 	bne.w	800274a <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800208c:	b2da      	uxtb	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800209e:	e354      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80020a6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d034      	beq.n	8002128 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	3306      	adds	r3, #6
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80020f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f004 f865 	bl	80061cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29a      	uxth	r2, r3
 800210a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800210e:	4013      	ands	r3, r2
 8002110:	823b      	strh	r3, [r7, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	8a3a      	ldrh	r2, [r7, #16]
 8002118:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800211c:	b292      	uxth	r2, r2
 800211e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f008 f895 	bl	800a250 <HAL_PCD_SetupStageCallback>
 8002126:	e310      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002128:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800212c:	2b00      	cmp	r3, #0
 800212e:	f280 830c 	bge.w	800274a <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29a      	uxth	r2, r3
 800213a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800213e:	4013      	ands	r3, r2
 8002140:	83fb      	strh	r3, [r7, #30]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	8bfa      	ldrh	r2, [r7, #30]
 8002148:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800214c:	b292      	uxth	r2, r2
 800214e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	3306      	adds	r3, #6
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x1f6>
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	6959      	ldr	r1, [r3, #20]
 8002194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002196:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800219c:	b29b      	uxth	r3, r3
 800219e:	f004 f815 	bl	80061cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	441a      	add	r2, r3
 80021ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f008 f85e 	bl	800a274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 82bd 	bne.w	800274a <PCD_EP_ISR_Handler+0x788>
 80021d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021dc:	f000 82b5 	beq.w	800274a <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b3e      	cmp	r3, #62	@ 0x3e
 8002216:	d91d      	bls.n	8002254 <PCD_EP_ISR_Handler+0x292>
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <PCD_EP_ISR_Handler+0x270>
 800222c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222e:	3b01      	subs	r3, #1
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29a      	uxth	r2, r3
 8002238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223a:	b29b      	uxth	r3, r3
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	b29b      	uxth	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224c:	b29a      	uxth	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	e026      	b.n	80022a2 <PCD_EP_ISR_Handler+0x2e0>
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <PCD_EP_ISR_Handler+0x2b0>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29a      	uxth	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e017      	b.n	80022a2 <PCD_EP_ISR_Handler+0x2e0>
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	647b      	str	r3, [r7, #68]	@ 0x44
 800227a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <PCD_EP_ISR_Handler+0x2ca>
 8002286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002288:	3301      	adds	r3, #1
 800228a:	647b      	str	r3, [r7, #68]	@ 0x44
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002294:	b29b      	uxth	r3, r3
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	b29b      	uxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b29a      	uxth	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	827b      	strh	r3, [r7, #18]
 80022b4:	8a7b      	ldrh	r3, [r7, #18]
 80022b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80022ba:	827b      	strh	r3, [r7, #18]
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022c2:	827b      	strh	r3, [r7, #18]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	8a7b      	ldrh	r3, [r7, #18]
 80022ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022da:	b29b      	uxth	r3, r3
 80022dc:	8013      	strh	r3, [r2, #0]
 80022de:	e234      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f280 80fc 	bge.w	80024f6 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002314:	4013      	ands	r3, r2
 8002316:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800232c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002330:	b292      	uxth	r2, r2
 8002332:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002334:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d125      	bne.n	800239e <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	3306      	adds	r3, #6
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800237e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8092 	beq.w	80024ac <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002392:	88da      	ldrh	r2, [r3, #6]
 8002394:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002398:	f003 ff18 	bl	80061cc <USB_ReadPMA>
 800239c:	e086      	b.n	80024ac <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800239e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a0:	78db      	ldrb	r3, [r3, #3]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d10a      	bne.n	80023bc <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023aa:	461a      	mov	r2, r3
 80023ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9d9 	bl	8002766 <HAL_PCD_EP_DB_Receive>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80023ba:	e077      	b.n	80024ac <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3302      	adds	r3, #2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002442:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002446:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800244a:	2b00      	cmp	r3, #0
 800244c:	d02e      	beq.n	80024ac <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002454:	6959      	ldr	r1, [r3, #20]
 8002456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002458:	891a      	ldrh	r2, [r3, #8]
 800245a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800245e:	f003 feb5 	bl	80061cc <USB_ReadPMA>
 8002462:	e023      	b.n	80024ac <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	3306      	adds	r3, #6
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800248c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002490:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249e:	6959      	ldr	r1, [r3, #20]
 80024a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a2:	895a      	ldrh	r2, [r3, #10]
 80024a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a8:	f003 fe90 	bl	80061cc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024b4:	441a      	add	r2, r3
 80024b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024c2:	441a      	add	r2, r3
 80024c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <PCD_EP_ISR_Handler+0x51a>
 80024d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d206      	bcs.n	80024ea <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f007 fec6 	bl	800a274 <HAL_PCD_DataOutStageCallback>
 80024e8:	e005      	b.n	80024f6 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 f937 	bl	8004764 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8123 	beq.w	800274a <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002504:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800252e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002532:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	441a      	add	r2, r3
 8002544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29b      	uxth	r3, r3
 8002552:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	f040 80a2 	bne.w	80026a2 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 800255e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8093 	beq.w	8002694 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800256e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d046      	beq.n	8002608 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d126      	bne.n	80025d0 <PCD_EP_ISR_Handler+0x60e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	4413      	add	r3, r2
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	011a      	lsls	r2, r3, #4
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	4413      	add	r3, r2
 80025a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e061      	b.n	8002694 <PCD_EP_ISR_Handler+0x6d2>
 80025d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d15d      	bne.n	8002694 <PCD_EP_ISR_Handler+0x6d2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	4413      	add	r3, r2
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	011a      	lsls	r2, r3, #4
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	4413      	add	r3, r2
 80025fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	e045      	b.n	8002694 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d126      	bne.n	8002664 <PCD_EP_ISR_Handler+0x6a2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262a:	4413      	add	r3, r2
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011a      	lsls	r2, r3, #4
 8002634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002636:	4413      	add	r3, r2
 8002638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	b29a      	uxth	r2, r3
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265c:	b29a      	uxth	r2, r3
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	e017      	b.n	8002694 <PCD_EP_ISR_Handler+0x6d2>
 8002664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d113      	bne.n	8002694 <PCD_EP_ISR_Handler+0x6d2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267a:	4413      	add	r3, r2
 800267c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	011a      	lsls	r2, r3, #4
 8002684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002686:	4413      	add	r3, r2
 8002688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f007 fe05 	bl	800a2aa <HAL_PCD_DataInStageCallback>
 80026a0:	e053      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d146      	bne.n	800273c <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3302      	adds	r3, #2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d907      	bls.n	80026f6 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	e002      	b.n	80026fc <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80026f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f007 fdcd 	bl	800a2aa <HAL_PCD_DataInStageCallback>
 8002710:	e01b      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800271a:	441a      	add	r2, r3
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002728:	441a      	add	r2, r3
 800272a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002734:	4618      	mov	r0, r3
 8002736:	f002 f815 	bl	8004764 <USB_EPStartXfer>
 800273a:	e006      	b.n	800274a <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002740:	461a      	mov	r2, r3
 8002742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f91b 	bl	8002980 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002752:	b29b      	uxth	r3, r3
 8002754:	b21b      	sxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f6ff ac38 	blt.w	8001fcc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3758      	adds	r7, #88	@ 0x58
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b088      	sub	sp, #32
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07e      	beq.n	800287c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	8b7b      	ldrh	r3, [r7, #26]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d306      	bcc.n	80027c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	8b7b      	ldrh	r3, [r7, #26]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e002      	b.n	80027c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d123      	bne.n	8002816 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e8:	833b      	strh	r3, [r7, #24]
 80027ea:	8b3b      	ldrh	r3, [r7, #24]
 80027ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027f0:	833b      	strh	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	441a      	add	r2, r3
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800280a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283a:	82fb      	strh	r3, [r7, #22]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002858:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002860:	8b7b      	ldrh	r3, [r7, #26]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	891a      	ldrh	r2, [r3, #8]
 8002874:	8b7b      	ldrh	r3, [r7, #26]
 8002876:	f003 fca9 	bl	80061cc <USB_ReadPMA>
 800287a:	e07c      	b.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	3306      	adds	r3, #6
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d306      	bcc.n	80028be <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	8b7b      	ldrh	r3, [r7, #26]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e002      	b.n	80028c4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e6:	83fb      	strh	r3, [r7, #30]
 80028e8:	8bfb      	ldrh	r3, [r7, #30]
 80028ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028ee:	83fb      	strh	r3, [r7, #30]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	8bfb      	ldrh	r3, [r7, #30]
 8002900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11f      	bne.n	800295e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002938:	83bb      	strh	r3, [r7, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	8bbb      	ldrh	r3, [r7, #28]
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6959      	ldr	r1, [r3, #20]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	895a      	ldrh	r2, [r3, #10]
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	f003 fc2b 	bl	80061cc <USB_ReadPMA>
    }
  }

  return count;
 8002976:	8b7b      	ldrh	r3, [r7, #26]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0a4      	sub	sp, #144	@ 0x90
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 81dd 	beq.w	8002d54 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	3302      	adds	r3, #2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d907      	bls.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	e002      	b.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 80b9 	bne.w	8002b64 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0e:	4413      	add	r3, r2
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	011a      	lsls	r2, r3, #4
 8002a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e01a      	b.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d116      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	4413      	add	r3, r2
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d126      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	011a      	lsls	r2, r3, #4
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	e017      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d113      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	011a      	lsls	r2, r3, #4
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f007 fbca 	bl	800a2aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 82fc 	beq.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3c:	82fb      	strh	r3, [r7, #22]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]
 8002b62:	e2da      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d021      	beq.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 82ae 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d30b      	bcc.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	e017      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002c06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c16:	e00a      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d165      	bne.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x382>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	011a      	lsls	r2, r3, #4
 8002c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c74:	d91d      	bls.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	e044      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e035      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	e01c      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d118      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1e:	4413      	add	r3, r2
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	011a      	lsls	r2, r3, #4
 8002d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	891a      	ldrh	r2, [r3, #8]
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f003 f9f8 	bl	8006142 <USB_WritePMA>
 8002d52:	e1e2      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	3306      	adds	r3, #6
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d307      	bcc.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e002      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 80c0 	bne.w	8002f2c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d126      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x482>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dc8:	4413      	add	r3, r2
 8002dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	011a      	lsls	r2, r3, #4
 8002dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e01a      	b.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d116      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	4413      	add	r3, r2
 8002e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	011a      	lsls	r2, r3, #4
 8002e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e34:	2200      	movs	r2, #0
 8002e36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12b      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	e017      	b.n	8002ece <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d113      	bne.n	8002ece <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb4:	4413      	add	r3, r2
 8002eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	011a      	lsls	r2, r3, #4
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ec6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eca:	2200      	movs	r2, #0
 8002ecc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f007 f9e8 	bl	800a2aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 811a 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f00:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
 8002f2a:	e0f6      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d121      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 80ca 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f8e:	441a      	add	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d30b      	bcc.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	e017      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002fce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fde:	e00a      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d165      	bne.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003018:	4413      	add	r3, r2
 800301a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	011a      	lsls	r2, r3, #4
 8003022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003024:	4413      	add	r3, r2
 8003026:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800302a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800302c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003036:	b29a      	uxth	r2, r3
 8003038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303a:	801a      	strh	r2, [r3, #0]
 800303c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003040:	2b3e      	cmp	r3, #62	@ 0x3e
 8003042:	d91d      	bls.n	8003080 <HAL_PCD_EP_DB_Transmit+0x700>
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800305a:	3b01      	subs	r3, #1
 800305c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800305e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
 8003064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003066:	b29b      	uxth	r3, r3
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	b29b      	uxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e041      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 8003080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003096:	b29a      	uxth	r2, r3
 8003098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	e032      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 800309e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x738>
 80030b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b4:	3301      	adds	r3, #1
 80030b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	e019      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d115      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0x784>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	4413      	add	r3, r2
 80030e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80030fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003102:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6959      	ldr	r1, [r3, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	895a      	ldrh	r2, [r3, #10]
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003114:	b29b      	uxth	r3, r3
 8003116:	f003 f814 	bl	8006142 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003134:	82bb      	strh	r3, [r7, #20]
 8003136:	8abb      	ldrh	r3, [r7, #20]
 8003138:	f083 0310 	eor.w	r3, r3, #16
 800313c:	82bb      	strh	r3, [r7, #20]
 800313e:	8abb      	ldrh	r3, [r7, #20]
 8003140:	f083 0320 	eor.w	r3, r3, #32
 8003144:	82bb      	strh	r3, [r7, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8abb      	ldrh	r3, [r7, #20]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3790      	adds	r7, #144	@ 0x90
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	4613      	mov	r3, r2
 8003184:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e009      	b.n	80031be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031aa:	897a      	ldrh	r2, [r7, #10]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	80da      	strh	r2, [r3, #6]
 80031d2:	e00b      	b.n	80031ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2201      	movs	r2, #1
 80031d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e272      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8087 	beq.w	8003326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003218:	4b92      	ldr	r3, [pc, #584]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b04      	cmp	r3, #4
 8003222:	d00c      	beq.n	800323e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003224:	4b8f      	ldr	r3, [pc, #572]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d112      	bne.n	8003256 <HAL_RCC_OscConfig+0x5e>
 8003230:	4b8c      	ldr	r3, [pc, #560]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d10b      	bne.n	8003256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323e:	4b89      	ldr	r3, [pc, #548]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d06c      	beq.n	8003324 <HAL_RCC_OscConfig+0x12c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d168      	bne.n	8003324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e24c      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x76>
 8003260:	4b80      	ldr	r3, [pc, #512]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7f      	ldr	r2, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e02e      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x98>
 8003276:	4b7b      	ldr	r3, [pc, #492]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7a      	ldr	r2, [pc, #488]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800327c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a77      	ldr	r2, [pc, #476]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e01d      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0xbc>
 800329a:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a71      	ldr	r2, [pc, #452]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0xd4>
 80032b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b68      	ldr	r3, [pc, #416]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a67      	ldr	r2, [pc, #412]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fd fc6e 	bl	8000bb4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fd fc6a 	bl	8000bb4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e200      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0xe4>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd fc5a 	bl	8000bb4 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fd fc56 	bl	8000bb4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1ec      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x10c>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d063      	beq.n	80033fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003332:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11c      	bne.n	8003384 <HAL_RCC_OscConfig+0x18c>
 800334a:	4b46      	ldr	r3, [pc, #280]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d116      	bne.n	8003384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x176>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1c0      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b3d      	ldr	r3, [pc, #244]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4939      	ldr	r1, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	e03a      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338c:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fd fc0f 	bl	8000bb4 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7fd fc0b 	bl	8000bb4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1a1      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4927      	ldr	r1, [pc, #156]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	e015      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fd fbee 	bl	8000bb4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fd fbea 	bl	8000bb4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e180      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d03a      	beq.n	800347c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b17      	ldr	r3, [pc, #92]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fd fbce 	bl	8000bb4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fd fbca 	bl	8000bb4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e160      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <HAL_RCC_OscConfig+0x26c>)
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800343a:	2001      	movs	r0, #1
 800343c:	f000 faa6 	bl	800398c <RCC_Delay>
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fd fbb4 	bl	8000bb4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fd fbb0 	bl	8000bb4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d908      	bls.n	8003470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e146      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	42420000 	.word	0x42420000
 800346c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	4b92      	ldr	r3, [pc, #584]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e9      	bne.n	8003450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a6 	beq.w	80035d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b8b      	ldr	r3, [pc, #556]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b88      	ldr	r3, [pc, #544]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4a87      	ldr	r2, [pc, #540]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	61d3      	str	r3, [r2, #28]
 80034a6:	4b85      	ldr	r3, [pc, #532]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b82      	ldr	r3, [pc, #520]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b7f      	ldr	r3, [pc, #508]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7e      	ldr	r2, [pc, #504]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fb71 	bl	8000bb4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fd fb6d 	bl	8000bb4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b64      	cmp	r3, #100	@ 0x64
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e103      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b75      	ldr	r3, [pc, #468]	@ (80036c0 <HAL_RCC_OscConfig+0x4c8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x312>
 80034fc:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a6e      	ldr	r2, [pc, #440]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	e02d      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x334>
 8003512:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a69      	ldr	r2, [pc, #420]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a66      	ldr	r2, [pc, #408]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	e01c      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x356>
 8003534:	4b61      	ldr	r3, [pc, #388]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a60      	ldr	r2, [pc, #384]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	4b5e      	ldr	r3, [pc, #376]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a5d      	ldr	r2, [pc, #372]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x36e>
 800354e:	4b5b      	ldr	r3, [pc, #364]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a5a      	ldr	r2, [pc, #360]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b58      	ldr	r3, [pc, #352]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd fb21 	bl	8000bb4 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fd fb1d 	bl	8000bb4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0b1      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	4b4b      	ldr	r3, [pc, #300]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ee      	beq.n	8003576 <HAL_RCC_OscConfig+0x37e>
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fd fb0b 	bl	8000bb4 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd fb07 	bl	8000bb4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e09b      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	4b40      	ldr	r3, [pc, #256]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b3c      	ldr	r3, [pc, #240]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a3b      	ldr	r2, [pc, #236]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8087 	beq.w	80036ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d061      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d146      	bne.n	8003682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fd fadb 	bl	8000bb4 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fad7 	bl	8000bb4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e06d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d108      	bne.n	800363c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4921      	ldr	r1, [pc, #132]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363c:	4b1f      	ldr	r3, [pc, #124]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a19      	ldr	r1, [r3, #32]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	430b      	orrs	r3, r1
 800364e:	491b      	ldr	r1, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd faab 	bl	8000bb4 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd faa7 	bl	8000bb4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e03d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x46a>
 8003680:	e035      	b.n	80036ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fa94 	bl	8000bb4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd fa90 	bl	8000bb4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e026      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x498>
 80036ae:	e01e      	b.n	80036ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e019      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40007000 	.word	0x40007000
 80036c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_OscConfig+0x500>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000

080036fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4965      	ldr	r1, [pc, #404]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a58      	ldr	r2, [pc, #352]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a52      	ldr	r2, [pc, #328]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800377a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fd f9e2 	bl	8000bb4 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd f9de 	bl	8000bb4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4922      	ldr	r1, [pc, #136]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <HAL_RCC_ClockConfig+0x1cc>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <HAL_RCC_ClockConfig+0x1d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd f978 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800b208 	.word	0x0800b208
 80038c8:	200000e0 	.word	0x200000e0
 80038cc:	200000e4 	.word	0x200000e4

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x94>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x30>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x36>
 80038fe:	e027      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	613b      	str	r3, [r7, #16]
      break;
 8003904:	e027      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0c9b      	lsrs	r3, r3, #18
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	4a17      	ldr	r2, [pc, #92]	@ (800396c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800391e:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x94>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	0c5b      	lsrs	r3, r3, #17
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0d      	ldr	r2, [pc, #52]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003932:	fb03 f202 	mul.w	r2, r3, r2
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e004      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	613b      	str	r3, [r7, #16]
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x98>)
 8003952:	613b      	str	r3, [r7, #16]
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	693b      	ldr	r3, [r7, #16]
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	007a1200 	.word	0x007a1200
 800396c:	0800b218 	.word	0x0800b218
 8003970:	0800b228 	.word	0x0800b228
 8003974:	003d0900 	.word	0x003d0900

08003978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b02      	ldr	r3, [pc, #8]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x10>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	200000e0 	.word	0x200000e0

0800398c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003994:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <RCC_Delay+0x34>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <RCC_Delay+0x38>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a8:	bf00      	nop
  }
  while (Delay --);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f9      	bne.n	80039a8 <RCC_Delay+0x1c>
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	200000e0 	.word	0x200000e0
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d07d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	61d3      	str	r3, [r2, #28]
 8003a00:	4b49      	ldr	r3, [pc, #292]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b46      	ldr	r3, [pc, #280]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1c:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a42      	ldr	r2, [pc, #264]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a28:	f7fd f8c4 	bl	8000bb4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fd f8c0 	bl	8000bb4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e06d      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b3a      	ldr	r3, [pc, #232]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4e:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d027      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b2e      	ldr	r3, [pc, #184]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a82:	4a29      	ldr	r2, [pc, #164]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d014      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd f88f 	bl	8000bb4 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd f88b 	bl	8000bb4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e036      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4917      	ldr	r1, [pc, #92]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	4a13      	ldr	r2, [pc, #76]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	490b      	ldr	r1, [pc, #44]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4904      	ldr	r1, [pc, #16]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42420440 	.word	0x42420440

08003b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	f107 0014 	add.w	r0, r7, #20
 8003b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr

08003b54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b64:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b88:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003b8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bcc:	b084      	sub	sp, #16
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	f107 0014 	add.w	r0, r7, #20
 8003bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr

08003c0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b09d      	sub	sp, #116	@ 0x74
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	78db      	ldrb	r3, [r3, #3]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d81f      	bhi.n	8003c7e <USB_ActivateEndpoint+0x72>
 8003c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <USB_ActivateEndpoint+0x38>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c87 	.word	0x08003c87
 8003c50:	08003c63 	.word	0x08003c63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c60:	e012      	b.n	8003c88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c66:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003c6a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c6e:	e00b      	b.n	8003c88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003c7c:	e004      	b.n	8003c88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003c84:	e000      	b.n	8003c88 <USB_ActivateEndpoint+0x7c>
      break;
 8003c86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7b1b      	ldrb	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 8178 	bne.w	8003fe8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8084 	beq.w	8003e0a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011a      	lsls	r2, r3, #4
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	88db      	ldrh	r3, [r3, #6]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	827b      	strh	r3, [r7, #18]
 8003d44:	8a7b      	ldrh	r3, [r7, #18]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01b      	beq.n	8003d86 <USB_ActivateEndpoint+0x17a>
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d64:	823b      	strh	r3, [r7, #16]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	8a3b      	ldrh	r3, [r7, #16]
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	78db      	ldrb	r3, [r3, #3]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d020      	beq.n	8003dd0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da4:	81bb      	strh	r3, [r7, #12]
 8003da6:	89bb      	ldrh	r3, [r7, #12]
 8003da8:	f083 0320 	eor.w	r3, r3, #32
 8003dac:	81bb      	strh	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	89bb      	ldrh	r3, [r7, #12]
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]
 8003dce:	e2d5      	b.n	800437c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de6:	81fb      	strh	r3, [r7, #14]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	89fb      	ldrh	r3, [r7, #14]
 8003df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]
 8003e08:	e2b8      	b.n	800437c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	4413      	add	r3, r2
 8003e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	011a      	lsls	r2, r3, #4
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	88db      	ldrh	r3, [r3, #6]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	4413      	add	r3, r2
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	011a      	lsls	r2, r3, #4
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e78:	d91d      	bls.n	8003eb6 <USB_ActivateEndpoint+0x2aa>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <USB_ActivateEndpoint+0x288>
 8003e8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e90:	3b01      	subs	r3, #1
 8003e92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e026      	b.n	8003f04 <USB_ActivateEndpoint+0x2f8>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <USB_ActivateEndpoint+0x2c8>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e017      	b.n	8003f04 <USB_ActivateEndpoint+0x2f8>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <USB_ActivateEndpoint+0x2e2>
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eea:	3301      	adds	r3, #1
 8003eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003f12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <USB_ActivateEndpoint+0x348>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	843b      	strh	r3, [r7, #32]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	8c3b      	ldrh	r3, [r7, #32]
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d124      	bne.n	8003fa6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	83bb      	strh	r3, [r7, #28]
 8003f74:	8bbb      	ldrh	r3, [r7, #28]
 8003f76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f7a:	83bb      	strh	r3, [r7, #28]
 8003f7c:	8bbb      	ldrh	r3, [r7, #28]
 8003f7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f82:	83bb      	strh	r3, [r7, #28]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8bbb      	ldrh	r3, [r7, #28]
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
 8003fa4:	e1ea      	b.n	800437c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbc:	83fb      	strh	r3, [r7, #30]
 8003fbe:	8bfb      	ldrh	r3, [r7, #30]
 8003fc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fc4:	83fb      	strh	r3, [r7, #30]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	8bfb      	ldrh	r3, [r7, #30]
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
 8003fe6:	e1c9      	b.n	800437c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11e      	bne.n	800402e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004020:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]
 800402c:	e01d      	b.n	800406a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004044:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800405e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004066:	b29b      	uxth	r3, r3
 8004068:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004074:	b29b      	uxth	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800407a:	4413      	add	r3, r2
 800407c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	011a      	lsls	r2, r3, #4
 8004084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004086:	4413      	add	r3, r2
 8004088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800408c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	891b      	ldrh	r3, [r3, #8]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	b29b      	uxth	r3, r3
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ae:	4413      	add	r3, r2
 80040b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	011a      	lsls	r2, r3, #4
 80040b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80040c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	895b      	ldrh	r3, [r3, #10]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8093 	bne.w	8004202 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80040ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <USB_ActivateEndpoint+0x524>
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800411c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004124:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800412c:	b29b      	uxth	r3, r3
 800412e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800413e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <USB_ActivateEndpoint+0x574>
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800416c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004178:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800417c:	b29b      	uxth	r3, r3
 800417e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004196:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004198:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800419a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800419e:	873b      	strh	r3, [r7, #56]	@ 0x38
 80041a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80041a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041a6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80041b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041de:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]
 8004200:	e0bc      	b.n	800437c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004212:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01d      	beq.n	800425a <USB_ActivateEndpoint+0x64e>
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004234:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800424a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800424e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800426a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800426e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01d      	beq.n	80042b2 <USB_ActivateEndpoint+0x6a6>
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800429e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	78db      	ldrb	r3, [r3, #3]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d024      	beq.n	8004304 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042d8:	f083 0320 	eor.w	r3, r3, #32
 80042dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042fe:	b29b      	uxth	r3, r3
 8004300:	8013      	strh	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800431a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800432c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433c:	b29b      	uxth	r3, r3
 800433e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	441a      	add	r2, r3
 8004364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800436c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800437c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004380:	4618      	mov	r0, r3
 8004382:	3774      	adds	r7, #116	@ 0x74
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop

0800438c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800438c:	b480      	push	{r7}
 800438e:	b08d      	sub	sp, #52	@ 0x34
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7b1b      	ldrb	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 808e 	bne.w	80044bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d044      	beq.n	8004432 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	81bb      	strh	r3, [r7, #12]
 80043b6:	89bb      	ldrh	r3, [r7, #12]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <USB_DeactivateEndpoint+0x6c>
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	817b      	strh	r3, [r7, #10]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440e:	813b      	strh	r3, [r7, #8]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	893b      	ldrh	r3, [r7, #8]
 800441c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]
 8004430:	e192      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	827b      	strh	r3, [r7, #18]
 8004440:	8a7b      	ldrh	r3, [r7, #18]
 8004442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <USB_DeactivateEndpoint+0xf6>
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004460:	823b      	strh	r3, [r7, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8a3b      	ldrh	r3, [r7, #16]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004498:	81fb      	strh	r3, [r7, #14]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
 80044ba:	e14d      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	785b      	ldrb	r3, [r3, #1]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 80a5 	bne.w	8004610 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	843b      	strh	r3, [r7, #32]
 80044d4:	8c3b      	ldrh	r3, [r7, #32]
 80044d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01b      	beq.n	8004516 <USB_DeactivateEndpoint+0x18a>
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f4:	83fb      	strh	r3, [r7, #30]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	8bfb      	ldrh	r3, [r7, #30]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	83bb      	strh	r3, [r7, #28]
 8004524:	8bbb      	ldrh	r3, [r7, #28]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01b      	beq.n	8004566 <USB_DeactivateEndpoint+0x1da>
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004544:	837b      	strh	r3, [r7, #26]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8b7b      	ldrh	r3, [r7, #26]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	833b      	strh	r3, [r7, #24]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8b3b      	ldrh	r3, [r7, #24]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004596:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b4:	82fb      	strh	r3, [r7, #22]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	441a      	add	r2, r3
 80045c0:	8afb      	ldrh	r3, [r7, #22]
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ec:	82bb      	strh	r3, [r7, #20]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8abb      	ldrh	r3, [r7, #20]
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]
 800460e:	e0a3      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800461e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <USB_DeactivateEndpoint+0x2d4>
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800464c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004654:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465c:	b29b      	uxth	r3, r3
 800465e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800466e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <USB_DeactivateEndpoint+0x324>
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3734      	adds	r7, #52	@ 0x34
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b0c2      	sub	sp, #264	@ 0x108
 8004768:	af00      	add	r7, sp, #0
 800476a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800476e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004772:	6018      	str	r0, [r3, #0]
 8004774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800477c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800477e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b01      	cmp	r3, #1
 800478c:	f040 86b7 	bne.w	80054fe <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d908      	bls.n	80047be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80047ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047bc:	e007      	b.n	80047ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	7b1b      	ldrb	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d13a      	bne.n	8004854 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6959      	ldr	r1, [r3, #20]
 80047ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	88da      	ldrh	r2, [r3, #6]
 80047f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004800:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004804:	6800      	ldr	r0, [r0, #0]
 8004806:	f001 fc9c 	bl	8006142 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800480a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800480e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004824:	b29b      	uxth	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	011a      	lsls	r2, r3, #4
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	f000 be1f 	b.w	8005492 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f040 8462 	bne.w	800512a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	f240 83df 	bls.w	8005042 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80048ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80048d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800490c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 81c7 	beq.w	8004cb4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800492a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
 8004932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d177      	bne.n	8004a32 <USB_EPStartXfer+0x2ce>
 8004942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	4413      	add	r3, r2
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800496a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	011a      	lsls	r2, r3, #4
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	4413      	add	r3, r2
 8004978:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004988:	b29a      	uxth	r2, r3
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004992:	2b3e      	cmp	r3, #62	@ 0x3e
 8004994:	d921      	bls.n	80049da <USB_EPStartXfer+0x276>
 8004996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <USB_EPStartXfer+0x252>
 80049ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e050      	b.n	8004a7c <USB_EPStartXfer+0x318>
 80049da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_EPStartXfer+0x294>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e041      	b.n	8004a7c <USB_EPStartXfer+0x318>
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d004      	beq.n	8004a18 <USB_EPStartXfer+0x2b4>
 8004a0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a12:	3301      	adds	r3, #1
 8004a14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	e024      	b.n	8004a7c <USB_EPStartXfer+0x318>
 8004a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d11c      	bne.n	8004a7c <USB_EPStartXfer+0x318>
 8004a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	4413      	add	r3, r2
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	011a      	lsls	r2, r3, #4
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	895b      	ldrh	r3, [r3, #10]
 8004a88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6959      	ldr	r1, [r3, #20]
 8004a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004aa2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004aa6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	f001 fb49 	bl	8006142 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac0:	441a      	add	r2, r3
 8004ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d90f      	bls.n	8004b0a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afa:	1ad2      	subs	r2, r2, r3
 8004afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	621a      	str	r2, [r3, #32]
 8004b08:	e00e      	b.n	8004b28 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d177      	bne.n	8004c28 <USB_EPStartXfer+0x4c4>
 8004b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b8a:	d921      	bls.n	8004bd0 <USB_EPStartXfer+0x46c>
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <USB_EPStartXfer+0x448>
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	e056      	b.n	8004c7e <USB_EPStartXfer+0x51a>
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <USB_EPStartXfer+0x48a>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e047      	b.n	8004c7e <USB_EPStartXfer+0x51a>
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <USB_EPStartXfer+0x4aa>
 8004c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	e02a      	b.n	8004c7e <USB_EPStartXfer+0x51a>
 8004c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d122      	bne.n	8004c7e <USB_EPStartXfer+0x51a>
 8004c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	4413      	add	r3, r2
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	891b      	ldrh	r3, [r3, #8]
 8004c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6959      	ldr	r1, [r3, #20]
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ca4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ca8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f001 fa48 	bl	8006142 <USB_WritePMA>
 8004cb2:	e3ee      	b.n	8005492 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d177      	bne.n	8004db4 <USB_EPStartXfer+0x650>
 8004cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce4:	4413      	add	r3, r2
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	011a      	lsls	r2, r3, #4
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d14:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d16:	d921      	bls.n	8004d5c <USB_EPStartXfer+0x5f8>
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <USB_EPStartXfer+0x5d4>
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	029b      	lsls	r3, r3, #10
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	e056      	b.n	8004e0a <USB_EPStartXfer+0x6a6>
 8004d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <USB_EPStartXfer+0x616>
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d76:	801a      	strh	r2, [r3, #0]
 8004d78:	e047      	b.n	8004e0a <USB_EPStartXfer+0x6a6>
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <USB_EPStartXfer+0x636>
 8004d90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d94:	3301      	adds	r3, #1
 8004d96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	029b      	lsls	r3, r3, #10
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e02a      	b.n	8004e0a <USB_EPStartXfer+0x6a6>
 8004db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d122      	bne.n	8004e0a <USB_EPStartXfer+0x6a6>
 8004dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004de4:	4413      	add	r3, r2
 8004de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	891b      	ldrh	r3, [r3, #8]
 8004e16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e38:	6800      	ldr	r0, [r0, #0]
 8004e3a:	f001 f982 	bl	8006142 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4e:	441a      	add	r2, r3
 8004e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d90f      	bls.n	8004e98 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	621a      	str	r2, [r3, #32]
 8004e96:	e00e      	b.n	8004eb6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d177      	bne.n	8004fc2 <USB_EPStartXfer+0x85e>
 8004ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	4413      	add	r3, r2
 8004ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	011a      	lsls	r2, r3, #4
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	4413      	add	r3, r2
 8004f08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f22:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f24:	d921      	bls.n	8004f6a <USB_EPStartXfer+0x806>
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <USB_EPStartXfer+0x7e2>
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	3b01      	subs	r3, #1
 8004f42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e050      	b.n	800500c <USB_EPStartXfer+0x8a8>
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <USB_EPStartXfer+0x824>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	e041      	b.n	800500c <USB_EPStartXfer+0x8a8>
 8004f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <USB_EPStartXfer+0x844>
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	029b      	lsls	r3, r3, #10
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	e024      	b.n	800500c <USB_EPStartXfer+0x8a8>
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11c      	bne.n	800500c <USB_EPStartXfer+0x8a8>
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe6:	4413      	add	r3, r2
 8004fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	011a      	lsls	r2, r3, #4
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	b29a      	uxth	r2, r3
 8005008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800500c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	895b      	ldrh	r3, [r3, #10]
 8005018:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800501c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6959      	ldr	r1, [r3, #20]
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502c:	b29b      	uxth	r3, r3
 800502e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005032:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005036:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	f001 f881 	bl	8006142 <USB_WritePMA>
 8005040:	e227      	b.n	8005492 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005078:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800507c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050ce:	4413      	add	r3, r2
 80050d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	011a      	lsls	r2, r3, #4
 80050e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	891b      	ldrh	r3, [r3, #8]
 8005100:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6959      	ldr	r1, [r3, #20]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	b29b      	uxth	r3, r3
 8005116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800511a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800511e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	f001 f80d 	bl	8006142 <USB_WritePMA>
 8005128:	e1b3      	b.n	8005492 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513a:	1ad2      	subs	r2, r2, r3
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80c6 	beq.w	80052fc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	673b      	str	r3, [r7, #112]	@ 0x70
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d177      	bne.n	800527c <USB_EPStartXfer+0xb18>
 800518c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051ac:	4413      	add	r3, r2
 80051ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80051c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051de:	d921      	bls.n	8005224 <USB_EPStartXfer+0xac0>
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_EPStartXfer+0xa9c>
 80051f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29a      	uxth	r2, r3
 8005206:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800520a:	b29b      	uxth	r3, r3
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	b29b      	uxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521c:	b29a      	uxth	r2, r3
 800521e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e050      	b.n	80052c6 <USB_EPStartXfer+0xb62>
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <USB_EPStartXfer+0xade>
 800522c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e041      	b.n	80052c6 <USB_EPStartXfer+0xb62>
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <USB_EPStartXfer+0xafe>
 8005258:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800525c:	3301      	adds	r3, #1
 800525e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e024      	b.n	80052c6 <USB_EPStartXfer+0xb62>
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11c      	bne.n	80052c6 <USB_EPStartXfer+0xb62>
 800528c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052a0:	4413      	add	r3, r2
 80052a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	895b      	ldrh	r3, [r3, #10]
 80052d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6959      	ldr	r1, [r3, #20]
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	f000 ff24 	bl	8006142 <USB_WritePMA>
 80052fa:	e0ca      	b.n	8005492 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d177      	bne.n	80053fc <USB_EPStartXfer+0xc98>
 800530c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800532c:	4413      	add	r3, r2
 800532e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005340:	4413      	add	r3, r2
 8005342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005346:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005352:	b29a      	uxth	r2, r3
 8005354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535c:	2b3e      	cmp	r3, #62	@ 0x3e
 800535e:	d921      	bls.n	80053a4 <USB_EPStartXfer+0xc40>
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <USB_EPStartXfer+0xc1c>
 8005376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800537a:	3b01      	subs	r3, #1
 800537c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539c:	b29a      	uxth	r2, r3
 800539e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	e05c      	b.n	800545e <USB_EPStartXfer+0xcfa>
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <USB_EPStartXfer+0xc5e>
 80053ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e04d      	b.n	800545e <USB_EPStartXfer+0xcfa>
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <USB_EPStartXfer+0xc7e>
 80053d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e030      	b.n	800545e <USB_EPStartXfer+0xcfa>
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d128      	bne.n	800545e <USB_EPStartXfer+0xcfa>
 800540c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800541a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005428:	b29b      	uxth	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005430:	4413      	add	r3, r2
 8005432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005448:	4413      	add	r3, r2
 800544a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800544e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	b29a      	uxth	r2, r3
 8005458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800545c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	891b      	ldrh	r3, [r3, #8]
 800546a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6959      	ldr	r1, [r3, #20]
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	b29b      	uxth	r3, r3
 8005480:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005484:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005488:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f000 fe58 	bl	8006142 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b8:	817b      	strh	r3, [r7, #10]
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	f083 0310 	eor.w	r3, r3, #16
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	f083 0320 	eor.w	r3, r3, #32
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
 80054fa:	f000 bcde 	b.w	8005eba <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	7b1b      	ldrb	r3, [r3, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80bb 	bne.w	8005686 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	d917      	bls.n	800555c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800553c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	e00e      	b.n	800557a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800556c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800559e:	4413      	add	r3, r2
 80055a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80055da:	d924      	bls.n	8005626 <USB_EPStartXfer+0xec2>
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <USB_EPStartXfer+0xe98>
 80055f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80055f6:	3b01      	subs	r3, #1
 80055f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29a      	uxth	r2, r3
 8005604:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005608:	b29b      	uxth	r3, r3
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	b29b      	uxth	r3, r3
 800560e:	4313      	orrs	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	f000 bc10 	b.w	8005e46 <USB_EPStartXfer+0x16e2>
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10c      	bne.n	8005648 <USB_EPStartXfer+0xee4>
 800562e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e3fe      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <USB_EPStartXfer+0xf04>
 800565e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005662:	3301      	adds	r3, #1
 8005664:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005674:	b29b      	uxth	r3, r3
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	b29b      	uxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e3df      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	78db      	ldrb	r3, [r3, #3]
 8005692:	2b02      	cmp	r3, #2
 8005694:	f040 8218 	bne.w	8005ac8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 809d 	bne.w	80057e4 <USB_EPStartXfer+0x1080>
 80056aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ce:	4413      	add	r3, r2
 80056d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	011a      	lsls	r2, r3, #4
 80056e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b3e      	cmp	r3, #62	@ 0x3e
 8005712:	d92b      	bls.n	800576c <USB_EPStartXfer+0x1008>
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <USB_EPStartXfer+0xfe0>
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	3b01      	subs	r3, #1
 8005740:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29a      	uxth	r2, r3
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005750:	b29b      	uxth	r3, r3
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	b29b      	uxth	r3, r3
 8005756:	4313      	orrs	r3, r2
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005762:	b29a      	uxth	r2, r3
 8005764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	e070      	b.n	800584e <USB_EPStartXfer+0x10ea>
 800576c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <USB_EPStartXfer+0x1032>
 800577c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29a      	uxth	r2, r3
 800578e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e05b      	b.n	800584e <USB_EPStartXfer+0x10ea>
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <USB_EPStartXfer+0x1062>
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	029b      	lsls	r3, r3, #10
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	e034      	b.n	800584e <USB_EPStartXfer+0x10ea>
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d12c      	bne.n	800584e <USB_EPStartXfer+0x10ea>
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005818:	4413      	add	r3, r2
 800581a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	011a      	lsls	r2, r3, #4
 800582c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005830:	4413      	add	r3, r2
 8005832:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	b29a      	uxth	r2, r3
 8005848:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800585c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 809d 	bne.w	80059a8 <USB_EPStartXfer+0x1244>
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005892:	4413      	add	r3, r2
 8005894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058c6:	801a      	strh	r2, [r3, #0]
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058d6:	d92b      	bls.n	8005930 <USB_EPStartXfer+0x11cc>
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <USB_EPStartXfer+0x11a4>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005902:	3b01      	subs	r3, #1
 8005904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	b29b      	uxth	r3, r3
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	b29b      	uxth	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e069      	b.n	8005a04 <USB_EPStartXfer+0x12a0>
 8005930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <USB_EPStartXfer+0x11f6>
 8005940:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005950:	b29a      	uxth	r2, r3
 8005952:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e054      	b.n	8005a04 <USB_EPStartXfer+0x12a0>
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0x1226>
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800598a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005996:	b29b      	uxth	r3, r3
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	b29b      	uxth	r3, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	b29a      	uxth	r2, r3
 80059a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	e02d      	b.n	8005a04 <USB_EPStartXfer+0x12a0>
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d125      	bne.n	8005a04 <USB_EPStartXfer+0x12a0>
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059ce:	4413      	add	r3, r2
 80059d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	011a      	lsls	r2, r3, #4
 80059e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059e6:	4413      	add	r3, r2
 80059e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a02:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8218 	beq.w	8005e46 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <USB_EPStartXfer+0x12ea>
 8005a42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 81f5 	bne.w	8005e46 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 81ee 	bne.w	8005e46 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005abe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]
 8005ac6:	e1be      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	78db      	ldrb	r3, [r3, #3]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 81b4 	bne.w	8005e42 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d917      	bls.n	8005b26 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	e00e      	b.n	8005b44 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 8085 	bne.w	8005c60 <USB_EPStartXfer+0x14fc>
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	011a      	lsls	r2, r3, #4
 8005b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b92:	4413      	add	r3, r2
 8005b94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bb6:	d923      	bls.n	8005c00 <USB_EPStartXfer+0x149c>
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <USB_EPStartXfer+0x1474>
 8005bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e060      	b.n	8005cc2 <USB_EPStartXfer+0x155e>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <USB_EPStartXfer+0x14be>
 8005c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	e04f      	b.n	8005cc2 <USB_EPStartXfer+0x155e>
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <USB_EPStartXfer+0x14de>
 8005c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	e030      	b.n	8005cc2 <USB_EPStartXfer+0x155e>
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d128      	bne.n	8005cc2 <USB_EPStartXfer+0x155e>
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c94:	4413      	add	r3, r2
 8005c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	011a      	lsls	r2, r3, #4
 8005ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cac:	4413      	add	r3, r2
 8005cae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 8085 	bne.w	8005dec <USB_EPStartXfer+0x1688>
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d06:	4413      	add	r3, r2
 8005d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d42:	d923      	bls.n	8005d8c <USB_EPStartXfer+0x1628>
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <USB_EPStartXfer+0x1600>
 8005d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e05c      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10c      	bne.n	8005dae <USB_EPStartXfer+0x164a>
 8005d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	e04b      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <USB_EPStartXfer+0x166a>
 8005dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e02c      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d124      	bne.n	8005e46 <USB_EPStartXfer+0x16e2>
 8005dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e12:	4413      	add	r3, r2
 8005e14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	011a      	lsls	r2, r3, #4
 8005e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e001      	b.n	8005e46 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e03a      	b.n	8005ebc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eee:	81bb      	strh	r3, [r7, #12]
 8005ef0:	89bb      	ldrh	r3, [r7, #12]
 8005ef2:	f083 0310 	eor.w	r3, r3, #16
 8005ef6:	81bb      	strh	r3, [r7, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	89bb      	ldrh	r3, [r7, #12]
 8005f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8013      	strh	r3, [r2, #0]
 8005f18:	e01f      	b.n	8005f5a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f30:	81fb      	strh	r3, [r7, #14]
 8005f32:	89fb      	ldrh	r3, [r7, #14]
 8005f34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f38:	81fb      	strh	r3, [r7, #14]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	89fb      	ldrh	r3, [r7, #14]
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr

08005f66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b087      	sub	sp, #28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	7b1b      	ldrb	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 809d 	bne.w	80060b4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04c      	beq.n	800601c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	823b      	strh	r3, [r7, #16]
 8005f90:	8a3b      	ldrh	r3, [r7, #16]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01b      	beq.n	8005fd2 <USB_EPClearStall+0x6c>
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb0:	81fb      	strh	r3, [r7, #14]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d06c      	beq.n	80060b4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ff0:	81bb      	strh	r3, [r7, #12]
 8005ff2:	89bb      	ldrh	r3, [r7, #12]
 8005ff4:	f083 0320 	eor.w	r3, r3, #32
 8005ff8:	81bb      	strh	r3, [r7, #12]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	89bb      	ldrh	r3, [r7, #12]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
 800601a:	e04b      	b.n	80060b4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	82fb      	strh	r3, [r7, #22]
 800602a:	8afb      	ldrh	r3, [r7, #22]
 800602c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <USB_EPClearStall+0x106>
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604a:	82bb      	strh	r3, [r7, #20]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	8abb      	ldrh	r3, [r7, #20]
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	827b      	strh	r3, [r7, #18]
 8006084:	8a7b      	ldrh	r3, [r7, #18]
 8006086:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800608a:	827b      	strh	r3, [r7, #18]
 800608c:	8a7b      	ldrh	r3, [r7, #18]
 800608e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006092:	827b      	strh	r3, [r7, #18]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	8a7b      	ldrh	r3, [r7, #18]
 80060a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2280      	movs	r2, #128	@ 0x80
 80060d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800611c:	b29b      	uxth	r3, r3
 800611e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006142:	b480      	push	{r7}
 8006144:	b08b      	sub	sp, #44	@ 0x2c
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	4611      	mov	r1, r2
 800614e:	461a      	mov	r2, r3
 8006150:	460b      	mov	r3, r1
 8006152:	80fb      	strh	r3, [r7, #6]
 8006154:	4613      	mov	r3, r2
 8006156:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006158:	88bb      	ldrh	r3, [r7, #4]
 800615a:	3301      	adds	r3, #1
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006174:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	627b      	str	r3, [r7, #36]	@ 0x24
 800617a:	e01e      	b.n	80061ba <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	b21a      	sxth	r2, r3
 800618c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006190:	4313      	orrs	r3, r2
 8006192:	b21b      	sxth	r3, r3
 8006194:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	8a7a      	ldrh	r2, [r7, #18]
 800619a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	3302      	adds	r3, #2
 80061a0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	3302      	adds	r3, #2
 80061a6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	3b01      	subs	r3, #1
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1dd      	bne.n	800617c <USB_WritePMA+0x3a>
  }
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	372c      	adds	r7, #44	@ 0x2c
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b08b      	sub	sp, #44	@ 0x2c
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	80fb      	strh	r3, [r7, #6]
 80061de:	4613      	mov	r3, r2
 80061e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061e2:	88bb      	ldrh	r3, [r7, #4]
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	005a      	lsls	r2, r3, #1
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
 8006204:	e01b      	b.n	800623e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	3302      	adds	r3, #2
 8006212:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	3301      	adds	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	b2da      	uxtb	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	3302      	adds	r3, #2
 8006236:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	3b01      	subs	r3, #1
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e0      	bne.n	8006206 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006244:	88bb      	ldrh	r3, [r7, #4]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	701a      	strb	r2, [r3, #0]
  }
}
 8006260:	bf00      	nop
 8006262:	372c      	adds	r7, #44	@ 0x2c
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
	...

0800626c <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
 8006276:	460b      	mov	r3, r1
 8006278:	71bb      	strb	r3, [r7, #6]
 800627a:	4613      	mov	r3, r2
 800627c:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 8006282:	79bb      	ldrb	r3, [r7, #6]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	613b      	str	r3, [r7, #16]
    switch (pos) {
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	f200 80c3 	bhi.w	8006416 <CPU_IntSrcPrioSet+0x1aa>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <CPU_IntSrcPrioSet+0x2c>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080064c7 	.word	0x080064c7
 800629c:	080064c7 	.word	0x080064c7
 80062a0:	080064c7 	.word	0x080064c7
 80062a4:	080064c7 	.word	0x080064c7
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006333 	.word	0x08006333
 80062b4:	080064c7 	.word	0x080064c7
 80062b8:	080064c7 	.word	0x080064c7
 80062bc:	080064c7 	.word	0x080064c7
 80062c0:	080064c7 	.word	0x080064c7
 80062c4:	08006361 	.word	0x08006361
 80062c8:	0800638f 	.word	0x0800638f
 80062cc:	080064c7 	.word	0x080064c7
 80062d0:	080063bb 	.word	0x080063bb
 80062d4:	080063e9 	.word	0x080063e9
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 80062d8:	2040      	movs	r0, #64	@ 0x40
 80062da:	f7f9 ff3b 	bl	8000154 <CPU_SR_Save>
 80062de:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 80062e0:	4b7c      	ldr	r3, [pc, #496]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062ec:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 80062f6:	4a77      	ldr	r2, [pc, #476]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f7f9 ff37 	bl	8000170 <CPU_SR_Restore>
             break;
 8006302:	e0e3      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8006304:	2040      	movs	r0, #64	@ 0x40
 8006306:	f7f9 ff25 	bl	8000154 <CPU_SR_Save>
 800630a:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 800630c:	4b71      	ldr	r3, [pc, #452]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006318:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006324:	4a6b      	ldr	r2, [pc, #428]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7f9 ff20 	bl	8000170 <CPU_SR_Restore>
             break;
 8006330:	e0cc      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8006332:	2040      	movs	r0, #64	@ 0x40
 8006334:	f7f9 ff0e 	bl	8000154 <CPU_SR_Save>
 8006338:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 800633a:	4b66      	ldr	r3, [pc, #408]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8006346:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006352:	4a60      	ldr	r2, [pc, #384]	@ (80064d4 <CPU_IntSrcPrioSet+0x268>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006358:	6978      	ldr	r0, [r7, #20]
 800635a:	f7f9 ff09 	bl	8000170 <CPU_SR_Restore>
             break;
 800635e:	e0b5      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 8006360:	2040      	movs	r0, #64	@ 0x40
 8006362:	f7f9 fef7 	bl	8000154 <CPU_SR_Save>
 8006366:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 8006368:	4b5b      	ldr	r3, [pc, #364]	@ (80064d8 <CPU_IntSrcPrioSet+0x26c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006374:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 8006380:	4a55      	ldr	r2, [pc, #340]	@ (80064d8 <CPU_IntSrcPrioSet+0x26c>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f7f9 fef2 	bl	8000170 <CPU_SR_Restore>
             break;
 800638c:	e09e      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 800638e:	2040      	movs	r0, #64	@ 0x40
 8006390:	f7f9 fee0 	bl	8000154 <CPU_SR_Save>
 8006394:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8006396:	4b51      	ldr	r3, [pc, #324]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063a2:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 80063ac:	4a4b      	ldr	r2, [pc, #300]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80063b2:	6978      	ldr	r0, [r7, #20]
 80063b4:	f7f9 fedc 	bl	8000170 <CPU_SR_Restore>
             break;
 80063b8:	e088      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 80063ba:	2040      	movs	r0, #64	@ 0x40
 80063bc:	f7f9 feca 	bl	8000154 <CPU_SR_Save>
 80063c0:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80063c2:	4b46      	ldr	r3, [pc, #280]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 80063da:	4a40      	ldr	r2, [pc, #256]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	f7f9 fec5 	bl	8000170 <CPU_SR_Restore>
             break;
 80063e6:	e071      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 80063e8:	2040      	movs	r0, #64	@ 0x40
 80063ea:	f7f9 feb3 	bl	8000154 <CPU_SR_Save>
 80063ee:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 80063f0:	4b3a      	ldr	r3, [pc, #232]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063fc:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8006408:	4a34      	ldr	r2, [pc, #208]	@ (80064dc <CPU_IntSrcPrioSet+0x270>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800640e:	6978      	ldr	r0, [r7, #20]
 8006410:	f7f9 feae 	bl	8000170 <CPU_SR_Restore>
             break;
 8006414:	e05a      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 8006416:	4b32      	ldr	r3, [pc, #200]	@ (80064e0 <CPU_IntSrcPrioSet+0x274>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	3301      	adds	r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	015b      	lsls	r3, r3, #5
 8006424:	b29b      	uxth	r3, r3
 8006426:	3310      	adds	r3, #16
 8006428:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	b29b      	uxth	r3, r3
 800642e:	897a      	ldrh	r2, [r7, #10]
 8006430:	429a      	cmp	r2, r3
 8006432:	d94a      	bls.n	80064ca <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 8006434:	797b      	ldrb	r3, [r7, #5]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d105      	bne.n	8006446 <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 800643a:	79bb      	ldrb	r3, [r7, #6]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d907      	bls.n	8006450 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8006440:	f000 f850 	bl	80064e4 <CPU_SW_Exception>
 8006444:	e004      	b.n	8006450 <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 8006446:	79bb      	ldrb	r3, [r7, #6]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d801      	bhi.n	8006450 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 800644c:	f000 f84a 	bl	80064e4 <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	3b10      	subs	r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	da00      	bge.n	800645a <CPU_IntSrcPrioSet+0x1ee>
 8006458:	3303      	adds	r3, #3
 800645a:	109b      	asrs	r3, r3, #2
 800645c:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	3b10      	subs	r3, #16
 8006462:	425a      	negs	r2, r3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	f002 0203 	and.w	r2, r2, #3
 800646c:	bf58      	it	pl
 800646e:	4253      	negpl	r3, r2
 8006470:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 8006472:	2040      	movs	r0, #64	@ 0x40
 8006474:	f7f9 fe6e 	bl	8000154 <CPU_SR_Save>
 8006478:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 800647a:	7a7b      	ldrb	r3, [r7, #9]
 800647c:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8006480:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 800648a:	7a3b      	ldrb	r3, [r7, #8]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	22ff      	movs	r2, #255	@ 0xff
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 800649c:	7a3b      	ldrb	r3, [r7, #8]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 80064ac:	7a7b      	ldrb	r3, [r7, #9]
 80064ae:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80064b2:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	461a      	mov	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7f9 fe56 	bl	8000170 <CPU_SR_Restore>
             }
             break;
 80064c4:	e001      	b.n	80064ca <CPU_IntSrcPrioSet+0x25e>
             break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <CPU_IntSrcPrioSet+0x260>
             break;
 80064ca:	bf00      	nop
    }
}
 80064cc:	bf00      	nop
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed18 	.word	0xe000ed18
 80064d8:	e000ed1c 	.word	0xe000ed1c
 80064dc:	e000ed20 	.word	0xe000ed20
 80064e0:	e000e004 	.word	0xe000e004

080064e4 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
    for (;;) {
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <CPU_SW_Exception+0x4>

080064ec <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 80064f2:	4b3b      	ldr	r3, [pc, #236]	@ (80065e0 <OSDebugInit+0xf4>)
 80064f4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 80064f6:	4b3b      	ldr	r3, [pc, #236]	@ (80065e4 <OSDebugInit+0xf8>)
 80064f8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 80064fa:	4b3b      	ldr	r3, [pc, #236]	@ (80065e8 <OSDebugInit+0xfc>)
 80064fc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 80064fe:	4b3b      	ldr	r3, [pc, #236]	@ (80065ec <OSDebugInit+0x100>)
 8006500:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8006502:	4b3b      	ldr	r3, [pc, #236]	@ (80065f0 <OSDebugInit+0x104>)
 8006504:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8006506:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <OSDebugInit+0x108>)
 8006508:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 800650a:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <OSDebugInit+0x10c>)
 800650c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 800650e:	4b3b      	ldr	r3, [pc, #236]	@ (80065fc <OSDebugInit+0x110>)
 8006510:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8006512:	4b3b      	ldr	r3, [pc, #236]	@ (8006600 <OSDebugInit+0x114>)
 8006514:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8006516:	4b3b      	ldr	r3, [pc, #236]	@ (8006604 <OSDebugInit+0x118>)
 8006518:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 800651a:	4b3b      	ldr	r3, [pc, #236]	@ (8006608 <OSDebugInit+0x11c>)
 800651c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 800651e:	4b3b      	ldr	r3, [pc, #236]	@ (800660c <OSDebugInit+0x120>)
 8006520:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8006522:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <OSDebugInit+0x124>)
 8006524:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8006526:	4b3b      	ldr	r3, [pc, #236]	@ (8006614 <OSDebugInit+0x128>)
 8006528:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 800652a:	4b3b      	ldr	r3, [pc, #236]	@ (8006618 <OSDebugInit+0x12c>)
 800652c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 800652e:	4b3b      	ldr	r3, [pc, #236]	@ (800661c <OSDebugInit+0x130>)
 8006530:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8006532:	4b3b      	ldr	r3, [pc, #236]	@ (8006620 <OSDebugInit+0x134>)
 8006534:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8006536:	4b3b      	ldr	r3, [pc, #236]	@ (8006624 <OSDebugInit+0x138>)
 8006538:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 800653a:	4b3b      	ldr	r3, [pc, #236]	@ (8006628 <OSDebugInit+0x13c>)
 800653c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 800653e:	4b3b      	ldr	r3, [pc, #236]	@ (800662c <OSDebugInit+0x140>)
 8006540:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8006542:	4b3b      	ldr	r3, [pc, #236]	@ (8006630 <OSDebugInit+0x144>)
 8006544:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8006546:	4b3b      	ldr	r3, [pc, #236]	@ (8006634 <OSDebugInit+0x148>)
 8006548:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 800654a:	4b3b      	ldr	r3, [pc, #236]	@ (8006638 <OSDebugInit+0x14c>)
 800654c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 800654e:	4b3b      	ldr	r3, [pc, #236]	@ (800663c <OSDebugInit+0x150>)
 8006550:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8006552:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <OSDebugInit+0x154>)
 8006554:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8006556:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <OSDebugInit+0x158>)
 8006558:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 800655a:	4b3b      	ldr	r3, [pc, #236]	@ (8006648 <OSDebugInit+0x15c>)
 800655c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 800655e:	4b3b      	ldr	r3, [pc, #236]	@ (800664c <OSDebugInit+0x160>)
 8006560:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <OSDebugInit+0x164>)
 8006564:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8006566:	4b3b      	ldr	r3, [pc, #236]	@ (8006654 <OSDebugInit+0x168>)
 8006568:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <OSDebugInit+0x16c>)
 800656c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 800656e:	4b3b      	ldr	r3, [pc, #236]	@ (800665c <OSDebugInit+0x170>)
 8006570:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8006572:	4b3b      	ldr	r3, [pc, #236]	@ (8006660 <OSDebugInit+0x174>)
 8006574:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8006576:	4b3b      	ldr	r3, [pc, #236]	@ (8006664 <OSDebugInit+0x178>)
 8006578:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 800657a:	4b3b      	ldr	r3, [pc, #236]	@ (8006668 <OSDebugInit+0x17c>)
 800657c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 800657e:	4b3b      	ldr	r3, [pc, #236]	@ (800666c <OSDebugInit+0x180>)
 8006580:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8006582:	4b3b      	ldr	r3, [pc, #236]	@ (8006670 <OSDebugInit+0x184>)
 8006584:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8006586:	4b3b      	ldr	r3, [pc, #236]	@ (8006674 <OSDebugInit+0x188>)
 8006588:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 800658a:	4b3b      	ldr	r3, [pc, #236]	@ (8006678 <OSDebugInit+0x18c>)
 800658c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 800658e:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <OSDebugInit+0x190>)
 8006590:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8006592:	4b3b      	ldr	r3, [pc, #236]	@ (8006680 <OSDebugInit+0x194>)
 8006594:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8006596:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <OSDebugInit+0x198>)
 8006598:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 800659a:	4b3b      	ldr	r3, [pc, #236]	@ (8006688 <OSDebugInit+0x19c>)
 800659c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 800659e:	4b3b      	ldr	r3, [pc, #236]	@ (800668c <OSDebugInit+0x1a0>)
 80065a0:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 80065a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006690 <OSDebugInit+0x1a4>)
 80065a4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 80065a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <OSDebugInit+0x1a8>)
 80065a8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 80065aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <OSDebugInit+0x1ac>)
 80065ac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 80065ae:	4b3b      	ldr	r3, [pc, #236]	@ (800669c <OSDebugInit+0x1b0>)
 80065b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 80065b2:	4b3b      	ldr	r3, [pc, #236]	@ (80066a0 <OSDebugInit+0x1b4>)
 80065b4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 80065b6:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <OSDebugInit+0x1b8>)
 80065b8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 80065ba:	4b3b      	ldr	r3, [pc, #236]	@ (80066a8 <OSDebugInit+0x1bc>)
 80065bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 80065be:	4b3b      	ldr	r3, [pc, #236]	@ (80066ac <OSDebugInit+0x1c0>)
 80065c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 80065c2:	4b3b      	ldr	r3, [pc, #236]	@ (80066b0 <OSDebugInit+0x1c4>)
 80065c4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 80065c6:	4b3b      	ldr	r3, [pc, #236]	@ (80066b4 <OSDebugInit+0x1c8>)
 80065c8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 80065ca:	4b3b      	ldr	r3, [pc, #236]	@ (80066b8 <OSDebugInit+0x1cc>)
 80065cc:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 80065ce:	4b3b      	ldr	r3, [pc, #236]	@ (80066bc <OSDebugInit+0x1d0>)
 80065d0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 80065d2:	4b3b      	ldr	r3, [pc, #236]	@ (80066c0 <OSDebugInit+0x1d4>)
 80065d4:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	0800b22a 	.word	0x0800b22a
 80065e4:	0800b22c 	.word	0x0800b22c
 80065e8:	0800b232 	.word	0x0800b232
 80065ec:	0800b234 	.word	0x0800b234
 80065f0:	0800b230 	.word	0x0800b230
 80065f4:	0800b236 	.word	0x0800b236
 80065f8:	0800b238 	.word	0x0800b238
 80065fc:	0800b23a 	.word	0x0800b23a
 8006600:	0800b23c 	.word	0x0800b23c
 8006604:	0800b23e 	.word	0x0800b23e
 8006608:	0800b240 	.word	0x0800b240
 800660c:	0800b242 	.word	0x0800b242
 8006610:	0800b244 	.word	0x0800b244
 8006614:	0800b246 	.word	0x0800b246
 8006618:	0800b248 	.word	0x0800b248
 800661c:	0800b24a 	.word	0x0800b24a
 8006620:	0800b24c 	.word	0x0800b24c
 8006624:	0800b24e 	.word	0x0800b24e
 8006628:	0800b250 	.word	0x0800b250
 800662c:	0800b252 	.word	0x0800b252
 8006630:	0800b254 	.word	0x0800b254
 8006634:	0800b256 	.word	0x0800b256
 8006638:	0800b258 	.word	0x0800b258
 800663c:	0800b25a 	.word	0x0800b25a
 8006640:	0800b25c 	.word	0x0800b25c
 8006644:	0800b25e 	.word	0x0800b25e
 8006648:	0800b260 	.word	0x0800b260
 800664c:	0800b262 	.word	0x0800b262
 8006650:	0800b264 	.word	0x0800b264
 8006654:	0800b266 	.word	0x0800b266
 8006658:	0800b268 	.word	0x0800b268
 800665c:	0800b26a 	.word	0x0800b26a
 8006660:	0800b26c 	.word	0x0800b26c
 8006664:	0800b26e 	.word	0x0800b26e
 8006668:	0800b270 	.word	0x0800b270
 800666c:	0800b272 	.word	0x0800b272
 8006670:	0800b274 	.word	0x0800b274
 8006674:	0800b276 	.word	0x0800b276
 8006678:	0800b278 	.word	0x0800b278
 800667c:	0800b27a 	.word	0x0800b27a
 8006680:	0800b27c 	.word	0x0800b27c
 8006684:	0800b27e 	.word	0x0800b27e
 8006688:	0800b280 	.word	0x0800b280
 800668c:	0800b282 	.word	0x0800b282
 8006690:	2000298c 	.word	0x2000298c
 8006694:	20002e10 	.word	0x20002e10
 8006698:	0800b286 	.word	0x0800b286
 800669c:	0800b288 	.word	0x0800b288
 80066a0:	0800b28a 	.word	0x0800b28a
 80066a4:	0800b28c 	.word	0x0800b28c
 80066a8:	0800b28e 	.word	0x0800b28e
 80066ac:	0800b290 	.word	0x0800b290
 80066b0:	0800b292 	.word	0x0800b292
 80066b4:	0800b294 	.word	0x0800b294
 80066b8:	0800b296 	.word	0x0800b296
 80066bc:	0800b284 	.word	0x0800b284
 80066c0:	0800b298 	.word	0x0800b298

080066c4 <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80066ca:	4b13      	ldr	r3, [pc, #76]	@ (8006718 <OSInitHookBegin+0x54>)
 80066cc:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80066ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066d2:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 80066d4:	e007      	b.n	80066e6 <OSInitHookBegin+0x22>
        size--;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3b01      	subs	r3, #1
 80066da:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	603a      	str	r2, [r7, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f4      	bne.n	80066d6 <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80066ec:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <OSInitHookBegin+0x58>)
 80066ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006720 <OSInitHookBegin+0x5c>)
 80066f0:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <OSInitHookBegin+0x58>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	461a      	mov	r2, r3
 80066fc:	4b07      	ldr	r3, [pc, #28]	@ (800671c <OSInitHookBegin+0x58>)
 80066fe:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8006700:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <OSInitHookBegin+0x60>)
 8006702:	2200      	movs	r2, #0
 8006704:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <OSInitHookBegin+0x64>)
 8006708:	2240      	movs	r2, #64	@ 0x40
 800670a:	601a      	str	r2, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20001670 	.word	0x20001670
 800671c:	20001a70 	.word	0x20001a70
 8006720:	20001a70 	.word	0x20001a70
 8006724:	20001a74 	.word	0x20001a74
 8006728:	20001a78 	.word	0x20001a78

0800672c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0

}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 ffc5 	bl	80086d0 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 ffc3 	bl	80086e2 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8006768:	f001 ffc4 	bl	80086f4 <App_TaskIdleHook>
#endif
}
 800676c:	bf00      	nop
 800676e:	bd80      	pop	{r7, pc}

08006770 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 ffc7 	bl	800870c <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 800678a:	f001 ffb9 	bl	8008700 <App_TaskStatHook>
#endif
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b04      	subs	r3, #4
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067bc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	4a34      	ldr	r2, [pc, #208]	@ (80068a4 <OSTaskStkInit+0x110>)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	3b04      	subs	r3, #4
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80067e2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3b04      	subs	r3, #4
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80067f0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3b04      	subs	r3, #4
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80067fe:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3b04      	subs	r3, #4
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800680c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	3b04      	subs	r3, #4
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	3b04      	subs	r3, #4
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f06f 0202 	mvn.w	r2, #2
 8006826:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3b04      	subs	r3, #4
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8006834:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	3b04      	subs	r3, #4
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8006842:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3b04      	subs	r3, #4
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8006850:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	3b04      	subs	r3, #4
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800685e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	3b04      	subs	r3, #4
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800686c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3b04      	subs	r3, #4
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800687a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3b04      	subs	r3, #4
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8006888:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	3b04      	subs	r3, #4
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8006896:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 8006898:	697b      	ldr	r3, [r7, #20]
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr
 80068a4:	080081e5 	.word	0x080081e5

080068a8 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80068ac:	f001 ff37 	bl	800871e <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 80068b0:	bf00      	nop
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 ff34 	bl	800872a <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 80068d0:	f001 ff34 	bl	800873c <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 80068d4:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <OSTimeTickHook+0x2c>)
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <OSTimeTickHook+0x2c>)
 80068de:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <OSTimeTickHook+0x2c>)
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068e8:	d304      	bcc.n	80068f4 <OSTimeTickHook+0x28>
        OSTmrCtr = 0u;
 80068ea:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <OSTimeTickHook+0x2c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 80068f0:	f001 fd0c 	bl	800830c <OSTmrSignal>
    }
#endif
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20001a74 	.word	0x20001a74

080068fc <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 8006900:	f7f9 fc24 	bl	800014c <CPU_IntDis>
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8006904:	f000 f8a2 	bl	8006a4c <OSIntEnter>
    OS_EXIT_CRITICAL();
 8006908:	f7f9 fc22 	bl	8000150 <CPU_IntEn>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 800690c:	f000 f9b0 	bl	8006c70 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8006910:	f000 f8b4 	bl	8006a7c <OSIntExit>
}
 8006914:	bf00      	nop
 8006916:	bd80      	pop	{r7, pc}

08006918 <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a06      	ldr	r2, [pc, #24]	@ (800693c <OS_CPU_SysTickInitFreq+0x24>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	0b5b      	lsrs	r3, r3, #13
 800692a:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f807 	bl	8006940 <OS_CPU_SysTickInit>
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	d1b71759 	.word	0xd1b71759

08006940 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8006948:	2340      	movs	r3, #64	@ 0x40
 800694a:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 800694c:	4a11      	ldr	r2, [pc, #68]	@ (8006994 <OS_CPU_SysTickInit+0x54>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8006954:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <OS_CPU_SysTickInit+0x58>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006960:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4313      	orrs	r3, r2
 800696a:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 800696c:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <OS_CPU_SysTickInit+0x58>)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <OS_CPU_SysTickInit+0x5c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a09      	ldr	r2, [pc, #36]	@ (800699c <OS_CPU_SysTickInit+0x5c>)
 8006978:	f043 0305 	orr.w	r3, r3, #5
 800697c:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 800697e:	4b07      	ldr	r3, [pc, #28]	@ (800699c <OS_CPU_SysTickInit+0x5c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a06      	ldr	r2, [pc, #24]	@ (800699c <OS_CPU_SysTickInit+0x5c>)
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	6013      	str	r3, [r2, #0]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	e000e014 	.word	0xe000e014
 8006998:	e000ed20 	.word	0xe000ed20
 800699c:	e000e010 	.word	0xe000e010

080069a0 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	701a      	strb	r2, [r3, #0]
        return;
 80069bc:	e022      	b.n	8006a04 <OSEventNameSet+0x64>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	220c      	movs	r2, #12
 80069c8:	701a      	strb	r2, [r3, #0]
        return;
 80069ca:	e01b      	b.n	8006a04 <OSEventNameSet+0x64>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80069cc:	4b0f      	ldr	r3, [pc, #60]	@ (8006a0c <OSEventNameSet+0x6c>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2212      	movs	r2, #18
 80069d8:	701a      	strb	r2, [r3, #0]
        return;
 80069da:	e013      	b.n	8006a04 <OSEventNameSet+0x64>
    }
    switch (pevent->OSEventType) {
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d903      	bls.n	80069ee <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
             return;
 80069ec:	e00a      	b.n	8006a04 <OSEventNameSet+0x64>
             break;
 80069ee:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80069f0:	f7f9 fbac 	bl	800014c <CPU_IntDis>
    pevent->OSEventName = pname;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80069fa:	f7f9 fba9 	bl	8000150 <CPU_IntEn>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
}
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20001dd8 	.word	0x20001dd8

08006a10 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8006a14:	f7ff fe56 	bl	80066c4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8006a18:	f000 fb6e 	bl	80070f8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8006a1c:	f000 fbaa 	bl	8007174 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8006a20:	f000 fc24 	bl	800726c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8006a24:	f000 fb1e 	bl	8007064 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8006a28:	f000 fe90 	bl	800774c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8006a2c:	f000 fefe 	bl	800782c <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8006a30:	f000 ff3c 	bl	80078ac <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8006a34:	f000 fbce 	bl	80071d4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8006a38:	f000 fbf2 	bl	8007220 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8006a3c:	f001 fc78 	bl	8008330 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8006a40:	f7ff fe74 	bl	800672c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8006a44:	f7ff fd52 	bl	80064ec <OSDebugInit>
#endif
}
 8006a48:	bf00      	nop
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8006a50:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <OSIntEnter+0x28>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d109      	bne.n	8006a6c <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8006a58:	4b07      	ldr	r3, [pc, #28]	@ (8006a78 <OSIntEnter+0x2c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2bff      	cmp	r3, #255	@ 0xff
 8006a5e:	d005      	beq.n	8006a6c <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <OSIntEnter+0x2c>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <OSIntEnter+0x2c>)
 8006a6a:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr
 8006a74:	20001de8 	.word	0x20001de8
 8006a78:	20001dd8 	.word	0x20001dd8

08006a7c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006a82:	2300      	movs	r3, #0
 8006a84:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8006a86:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <OSIntExit+0x80>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d131      	bne.n	8006af2 <OSIntExit+0x76>
        OS_ENTER_CRITICAL();
 8006a8e:	f7f9 fb5d 	bl	800014c <CPU_IntDis>
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8006a92:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <OSIntExit+0x84>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <OSIntExit+0x2a>
            OSIntNesting--;
 8006a9a:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <OSIntExit+0x84>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <OSIntExit+0x84>)
 8006aa4:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8006aa6:	4b16      	ldr	r3, [pc, #88]	@ (8006b00 <OSIntExit+0x84>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d11f      	bne.n	8006aee <OSIntExit+0x72>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8006aae:	4b15      	ldr	r3, [pc, #84]	@ (8006b04 <OSIntExit+0x88>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11b      	bne.n	8006aee <OSIntExit+0x72>
                OS_SchedNew();
 8006ab6:	f000 fc7f 	bl	80073b8 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8006aba:	4b13      	ldr	r3, [pc, #76]	@ (8006b08 <OSIntExit+0x8c>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4b12      	ldr	r3, [pc, #72]	@ (8006b0c <OSIntExit+0x90>)
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	4a12      	ldr	r2, [pc, #72]	@ (8006b10 <OSIntExit+0x94>)
 8006ac8:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8006aca:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <OSIntExit+0x8c>)
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	4b11      	ldr	r3, [pc, #68]	@ (8006b14 <OSIntExit+0x98>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d00b      	beq.n	8006aee <OSIntExit+0x72>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b10 <OSIntExit+0x94>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006adc:	3201      	adds	r2, #1
 8006ade:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8006ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <OSIntExit+0x9c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b18 <OSIntExit+0x9c>)
 8006ae8:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8006aea:	f7f9 fbb0 	bl	800024e <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8006aee:	f7f9 fb2f 	bl	8000150 <CPU_IntEn>
    }
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20001de8 	.word	0x20001de8
 8006b00:	20001dd8 	.word	0x20001dd8
 8006b04:	20001dd9 	.word	0x20001dd9
 8006b08:	20001ddb 	.word	0x20001ddb
 8006b0c:	20002000 	.word	0x20002000
 8006b10:	20001ff8 	.word	0x20001ff8
 8006b14:	20001dda 	.word	0x20001dda
 8006b18:	20001a7c 	.word	0x20001a7c

08006b1c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006b22:	2300      	movs	r3, #0
 8006b24:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <OSSchedLock+0x40>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d111      	bne.n	8006b52 <OSSchedLock+0x36>
        OS_ENTER_CRITICAL();
 8006b2e:	f7f9 fb0d 	bl	800014c <CPU_IntDis>
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8006b32:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <OSSchedLock+0x44>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <OSSchedLock+0x32>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <OSSchedLock+0x48>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2bff      	cmp	r3, #255	@ 0xff
 8006b40:	d005      	beq.n	8006b4e <OSSchedLock+0x32>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8006b42:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <OSSchedLock+0x48>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <OSSchedLock+0x48>)
 8006b4c:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8006b4e:	f7f9 faff 	bl	8000150 <CPU_IntEn>
    }
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001de8 	.word	0x20001de8
 8006b60:	20001dd8 	.word	0x20001dd8
 8006b64:	20001dd9 	.word	0x20001dd9

08006b68 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8006b72:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <OSSchedUnlock+0x5c>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d120      	bne.n	8006bbc <OSSchedUnlock+0x54>
        OS_ENTER_CRITICAL();
 8006b7a:	f7f9 fae7 	bl	800014c <CPU_IntDis>
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8006b7e:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <OSSchedUnlock+0x60>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d118      	bne.n	8006bb8 <OSSchedUnlock+0x50>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8006b86:	4b11      	ldr	r3, [pc, #68]	@ (8006bcc <OSSchedUnlock+0x64>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d011      	beq.n	8006bb2 <OSSchedUnlock+0x4a>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bcc <OSSchedUnlock+0x64>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	4b0d      	ldr	r3, [pc, #52]	@ (8006bcc <OSSchedUnlock+0x64>)
 8006b98:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <OSSchedUnlock+0x64>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <OSSchedUnlock+0x44>
                    OS_EXIT_CRITICAL();
 8006ba2:	f7f9 fad5 	bl	8000150 <CPU_IntEn>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8006ba6:	f000 fbc7 	bl	8007338 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8006baa:	e007      	b.n	8006bbc <OSSchedUnlock+0x54>
                    OS_EXIT_CRITICAL();
 8006bac:	f7f9 fad0 	bl	8000150 <CPU_IntEn>
}
 8006bb0:	e004      	b.n	8006bbc <OSSchedUnlock+0x54>
                OS_EXIT_CRITICAL();
 8006bb2:	f7f9 facd 	bl	8000150 <CPU_IntEn>
}
 8006bb6:	e001      	b.n	8006bbc <OSSchedUnlock+0x54>
            OS_EXIT_CRITICAL();
 8006bb8:	f7f9 faca 	bl	8000150 <CPU_IntEn>
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20001de8 	.word	0x20001de8
 8006bc8:	20001dd8 	.word	0x20001dd8
 8006bcc:	20001dd9 	.word	0x20001dd9

08006bd0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <OSStart+0x38>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d113      	bne.n	8006c04 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8006bdc:	f000 fbec 	bl	80073b8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <OSStart+0x3c>)
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <OSStart+0x40>)
 8006be6:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8006be8:	4b08      	ldr	r3, [pc, #32]	@ (8006c0c <OSStart+0x3c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <OSStart+0x44>)
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <OSStart+0x48>)
 8006bf6:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8006bf8:	4b07      	ldr	r3, [pc, #28]	@ (8006c18 <OSStart+0x48>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a07      	ldr	r2, [pc, #28]	@ (8006c1c <OSStart+0x4c>)
 8006bfe:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8006c00:	f7f9 fae5 	bl	80001ce <OSStartHighRdy>
    }
}
 8006c04:	bf00      	nop
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20001de8 	.word	0x20001de8
 8006c0c:	20001ddb 	.word	0x20001ddb
 8006c10:	20001dda 	.word	0x20001dda
 8006c14:	20002000 	.word	0x20002000
 8006c18:	20001ff8 	.word	0x20001ff8
 8006c1c:	20001ff0 	.word	0x20001ff0

08006c20 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8006c2a:	2002      	movs	r0, #2
 8006c2c:	f001 fb0a 	bl	8008244 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8006c30:	f7f9 fa8c 	bl	800014c <CPU_IntDis>
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8006c34:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <OSStatInit+0x44>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8006c3a:	f7f9 fa89 	bl	8000150 <CPU_IntEn>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8006c3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006c42:	f001 faff 	bl	8008244 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8006c46:	f7f9 fa81 	bl	800014c <CPU_IntDis>
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8006c4a:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <OSStatInit+0x44>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a06      	ldr	r2, [pc, #24]	@ (8006c68 <OSStatInit+0x48>)
 8006c50:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8006c52:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <OSStatInit+0x4c>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8006c58:	f7f9 fa7a 	bl	8000150 <CPU_IntEn>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20001dec 	.word	0x20001dec
 8006c68:	20001bcc 	.word	0x20001bcc
 8006c6c:	20001bd4 	.word	0x20001bd4

08006c70 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8006c7a:	f7ff fe27 	bl	80068cc <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8006c7e:	f7f9 fa65 	bl	800014c <CPU_IntDis>
    OSTime++;
 8006c82:	4b43      	ldr	r3, [pc, #268]	@ (8006d90 <OSTimeTick+0x120>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a41      	ldr	r2, [pc, #260]	@ (8006d90 <OSTimeTick+0x120>)
 8006c8a:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8006c8c:	f7f9 fa60 	bl	8000150 <CPU_IntEn>
#endif
    if (OSRunning == OS_TRUE) {
 8006c90:	4b40      	ldr	r3, [pc, #256]	@ (8006d94 <OSTimeTick+0x124>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d177      	bne.n	8006d88 <OSTimeTick+0x118>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8006c98:	4b3f      	ldr	r3, [pc, #252]	@ (8006d98 <OSTimeTick+0x128>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d00c      	beq.n	8006cba <OSTimeTick+0x4a>
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	dc10      	bgt.n	8006cc6 <OSTimeTick+0x56>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <OSTimeTick+0x3e>
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d003      	beq.n	8006cb4 <OSTimeTick+0x44>
 8006cac:	e00b      	b.n	8006cc6 <OSTimeTick+0x56>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
                 break;
 8006cb2:	e00e      	b.n	8006cd2 <OSTimeTick+0x62>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	72fb      	strb	r3, [r7, #11]
                 break;
 8006cb8:	e00b      	b.n	8006cd2 <OSTimeTick+0x62>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8006cba:	2301      	movs	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8006cbe:	4b36      	ldr	r3, [pc, #216]	@ (8006d98 <OSTimeTick+0x128>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	701a      	strb	r2, [r3, #0]
                 break;
 8006cc4:	e005      	b.n	8006cd2 <OSTimeTick+0x62>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8006cca:	4b33      	ldr	r3, [pc, #204]	@ (8006d98 <OSTimeTick+0x128>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
                 break;
 8006cd0:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d056      	beq.n	8006d86 <OSTimeTick+0x116>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8006cd8:	4b30      	ldr	r3, [pc, #192]	@ (8006d9c <OSTimeTick+0x12c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8006cde:	e04c      	b.n	8006d7a <OSTimeTick+0x10a>
            OS_ENTER_CRITICAL();
 8006ce0:	f7f9 fa34 	bl	800014c <CPU_IntDis>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d041      	beq.n	8006d70 <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	1e5a      	subs	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	631a      	str	r2, [r3, #48]	@ 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d138      	bne.n	8006d70 <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d04:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d12:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006d26:	e003      	b.n	8006d30 <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d118      	bne.n	8006d70 <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006d44:	4b16      	ldr	r3, [pc, #88]	@ (8006da0 <OSTimeTick+0x130>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	4b14      	ldr	r3, [pc, #80]	@ (8006da0 <OSTimeTick+0x130>)
 8006d4e:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d56:	461a      	mov	r2, r3
 8006d58:	4b12      	ldr	r3, [pc, #72]	@ (8006da4 <OSTimeTick+0x134>)
 8006d5a:	5c9a      	ldrb	r2, [r3, r2]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <OSTimeTick+0x134>)
 8006d6e:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8006d76:	f7f9 f9eb 	bl	8000150 <CPU_IntEn>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d80:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d82:	d1ad      	bne.n	8006ce0 <OSTimeTick+0x70>
 8006d84:	e000      	b.n	8006d88 <OSTimeTick+0x118>
            return;
 8006d86:	bf00      	nop
        }
    }
}
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20002978 	.word	0x20002978
 8006d94:	20001de8 	.word	0x20001de8
 8006d98:	20002890 	.word	0x20002890
 8006d9c:	20001ffc 	.word	0x20001ffc
 8006da0:	20001ddc 	.word	0x20001ddc
 8006da4:	20001de0 	.word	0x20001de0

08006da8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	71fb      	strb	r3, [r7, #7]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	7a9b      	ldrb	r3, [r3, #10]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e88 <OS_EventTaskRdy+0xd4>)
 8006dd2:	5c9b      	ldrb	r3, [r3, r2]
 8006dd4:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	7adb      	ldrb	r3, [r3, #11]
 8006dde:	461a      	mov	r2, r3
 8006de0:	4b29      	ldr	r3, [pc, #164]	@ (8006e88 <OS_EventTaskRdy+0xd4>)
 8006de2:	5c9b      	ldrb	r3, [r3, r2]
 8006de4:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	7dbb      	ldrb	r3, [r7, #22]
 8006dee:	4413      	add	r3, r2
 8006df0:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8006df2:	7d7b      	ldrb	r3, [r7, #21]
 8006df4:	4a25      	ldr	r2, [pc, #148]	@ (8006e8c <OS_EventTaskRdy+0xd8>)
 8006df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfa:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	625a      	str	r2, [r3, #36]	@ 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	4013      	ands	r3, r2
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	79ba      	ldrb	r2, [r7, #6]
 8006e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d113      	bne.n	8006e5c <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <OS_EventTaskRdy+0xdc>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <OS_EventTaskRdy+0xdc>)
 8006e44:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	4a12      	ldr	r2, [pc, #72]	@ (8006e94 <OS_EventTaskRdy+0xe0>)
 8006e4a:	5cd1      	ldrb	r1, [r2, r3]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	b2d1      	uxtb	r1, r2
 8006e58:	4a0e      	ldr	r2, [pc, #56]	@ (8006e94 <OS_EventTaskRdy+0xe0>)
 8006e5a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8006e5c:	68f9      	ldr	r1, [r7, #12]
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f000 f870 	bl	8006f44 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6938      	ldr	r0, [r7, #16]
 8006e74:	f000 f898 	bl	8006fa8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8006e7e:	7d7b      	ldrb	r3, [r7, #21]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	0800b29c 	.word	0x0800b29c
 8006e8c:	20002000 	.word	0x20002000
 8006e90:	20001ddc 	.word	0x20001ddc
 8006e94:	20001de0 	.word	0x20001de0

08006e98 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8006ea0:	4b25      	ldr	r3, [pc, #148]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8006ea8:	4b23      	ldr	r3, [pc, #140]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	7ada      	ldrb	r2, [r3, #11]
 8006eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ec0:	491d      	ldr	r1, [pc, #116]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006ec2:	6809      	ldr	r1, [r1, #0]
 8006ec4:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	440b      	add	r3, r1
 8006ed0:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7a9a      	ldrb	r2, [r3, #10]
 8006ed6:	4b18      	ldr	r3, [pc, #96]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8006ee6:	4b14      	ldr	r3, [pc, #80]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006eee:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	4a12      	ldr	r2, [pc, #72]	@ (8006f3c <OS_EventTaskWait+0xa4>)
 8006ef4:	5cd1      	ldrb	r1, [r2, r3]
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006efe:	43db      	mvns	r3, r3
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	400a      	ands	r2, r1
 8006f06:	b2d1      	uxtb	r1, r2
 8006f08:	4a0c      	ldr	r2, [pc, #48]	@ (8006f3c <OS_EventTaskWait+0xa4>)
 8006f0a:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8006f3c <OS_EventTaskWait+0xa4>)
 8006f10:	5cd3      	ldrb	r3, [r2, r3]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8006f16:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <OS_EventTaskWait+0xa0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4b07      	ldr	r3, [pc, #28]	@ (8006f40 <OS_EventTaskWait+0xa8>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4013      	ands	r3, r2
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <OS_EventTaskWait+0xa8>)
 8006f2c:	701a      	strb	r2, [r3, #0]
    }
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	20001ff0 	.word	0x20001ff0
 8006f3c:	20001de0 	.word	0x20001de0
 8006f40:	20001ddc 	.word	0x20001ddc

08006f44 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f54:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	7ad9      	ldrb	r1, [r3, #11]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006f64:	43db      	mvns	r3, r3
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	b2d1      	uxtb	r1, r2
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	460a      	mov	r2, r1
 8006f74:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	7adb      	ldrb	r3, [r3, #11]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	7a9a      	ldrb	r2, [r3, #10]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4013      	ands	r3, r2
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	61da      	str	r2, [r3, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fb8:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fc0:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006fc8:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8006fd4:	e022      	b.n	800701c <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4413      	add	r3, r2
 8006fdc:	7ad9      	ldrb	r1, [r3, #11]
 8006fde:	7b7b      	ldrb	r3, [r7, #13]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	b2d1      	uxtb	r1, r2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4413      	add	r3, r2
 8006fee:	460a      	mov	r2, r1
 8006ff0:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	7adb      	ldrb	r3, [r3, #11]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d108      	bne.n	8007010 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	7a9a      	ldrb	r2, [r3, #10]
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	43db      	mvns	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	4013      	ands	r3, r2
 800700a:	b2da      	uxtb	r2, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	3304      	adds	r3, #4
 8007014:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1d9      	bne.n	8006fd6 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
 8007040:	e007      	b.n	8007052 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	2200      	movs	r2, #0
 800704a:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	3301      	adds	r3, #1
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b07      	cmp	r3, #7
 8007056:	d9f4      	bls.n	8007042 <OS_EventWaitListInit+0x14>
    }
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr

08007064 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800706a:	21f0      	movs	r1, #240	@ 0xf0
 800706c:	481f      	ldr	r0, [pc, #124]	@ (80070ec <OS_InitEventList+0x88>)
 800706e:	f000 f94b 	bl	8007308 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007072:	2300      	movs	r3, #0
 8007074:	81fb      	strh	r3, [r7, #14]
 8007076:	e01e      	b.n	80070b6 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	3301      	adds	r3, #1
 800707c:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800707e:	89fa      	ldrh	r2, [r7, #14]
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4a18      	ldr	r2, [pc, #96]	@ (80070ec <OS_InitEventList+0x88>)
 800708a:	4413      	add	r3, r2
 800708c:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4a14      	ldr	r2, [pc, #80]	@ (80070ec <OS_InitEventList+0x88>)
 800709a:	4413      	add	r3, r2
 800709c:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a10      	ldr	r2, [pc, #64]	@ (80070f0 <OS_InitEventList+0x8c>)
 80070ae:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80070b0:	89fb      	ldrh	r3, [r7, #14]
 80070b2:	3301      	adds	r3, #1
 80070b4:	81fb      	strh	r3, [r7, #14]
 80070b6:	89fb      	ldrh	r3, [r7, #14]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d9dd      	bls.n	8007078 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 80070bc:	89fa      	ldrh	r2, [r7, #14]
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <OS_InitEventList+0x88>)
 80070c8:	4413      	add	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a05      	ldr	r2, [pc, #20]	@ (80070f0 <OS_InitEventList+0x8c>)
 80070dc:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 80070de:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <OS_InitEventList+0x90>)
 80070e0:	4a02      	ldr	r2, [pc, #8]	@ (80070ec <OS_InitEventList+0x88>)
 80070e2:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20001a84 	.word	0x20001a84
 80070f0:	0800b150 	.word	0x0800b150
 80070f4:	20001a80 	.word	0x20001a80

080070f8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <OS_InitMisc+0x50>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <OS_InitMisc+0x54>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <OS_InitMisc+0x58>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800710e:	4b11      	ldr	r3, [pc, #68]	@ (8007154 <OS_InitMisc+0x5c>)
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8007114:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <OS_InitMisc+0x60>)
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800711a:	4b10      	ldr	r3, [pc, #64]	@ (800715c <OS_InitMisc+0x64>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <OS_InitMisc+0x68>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8007126:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <OS_InitMisc+0x6c>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 800712c:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <OS_InitMisc+0x70>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8007132:	4b0e      	ldr	r3, [pc, #56]	@ (800716c <OS_InitMisc+0x74>)
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8007138:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <OS_InitMisc+0x78>)
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
#endif
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20002978 	.word	0x20002978
 800714c:	20001dd8 	.word	0x20001dd8
 8007150:	20001dd9 	.word	0x20001dd9
 8007154:	20001de9 	.word	0x20001de9
 8007158:	20001de8 	.word	0x20001de8
 800715c:	20001a7c 	.word	0x20001a7c
 8007160:	20001dec 	.word	0x20001dec
 8007164:	20001bd0 	.word	0x20001bd0
 8007168:	20001bcc 	.word	0x20001bcc
 800716c:	20001bd4 	.word	0x20001bd4
 8007170:	20002974 	.word	0x20002974

08007174 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800717a:	4b10      	ldr	r3, [pc, #64]	@ (80071bc <OS_InitRdyList+0x48>)
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8007180:	2300      	movs	r3, #0
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	e006      	b.n	8007194 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	4a0d      	ldr	r2, [pc, #52]	@ (80071c0 <OS_InitRdyList+0x4c>)
 800718a:	2100      	movs	r1, #0
 800718c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	3301      	adds	r3, #1
 8007192:	71fb      	strb	r3, [r7, #7]
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	2b07      	cmp	r3, #7
 8007198:	d9f5      	bls.n	8007186 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800719a:	4b0a      	ldr	r3, [pc, #40]	@ (80071c4 <OS_InitRdyList+0x50>)
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 80071a0:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <OS_InitRdyList+0x54>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 80071a6:	4b09      	ldr	r3, [pc, #36]	@ (80071cc <OS_InitRdyList+0x58>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 80071ac:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <OS_InitRdyList+0x5c>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	20001ddc 	.word	0x20001ddc
 80071c0:	20001de0 	.word	0x20001de0
 80071c4:	20001dda 	.word	0x20001dda
 80071c8:	20001ddb 	.word	0x20001ddb
 80071cc:	20001ff8 	.word	0x20001ff8
 80071d0:	20001ff0 	.word	0x20001ff0

080071d4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 80071da:	2303      	movs	r3, #3
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	2300      	movs	r3, #0
 80071e0:	9303      	str	r3, [sp, #12]
 80071e2:	2380      	movs	r3, #128	@ 0x80
 80071e4:	9302      	str	r3, [sp, #8]
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <OS_InitTaskIdle+0x3c>)
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	233f      	movs	r3, #63	@ 0x3f
 80071f2:	4a08      	ldr	r2, [pc, #32]	@ (8007214 <OS_InitTaskIdle+0x40>)
 80071f4:	2100      	movs	r1, #0
 80071f6:	4808      	ldr	r0, [pc, #32]	@ (8007218 <OS_InitTaskIdle+0x44>)
 80071f8:	f000 fcf2 	bl	8007be0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80071fc:	1dfb      	adds	r3, r7, #7
 80071fe:	461a      	mov	r2, r3
 8007200:	4906      	ldr	r1, [pc, #24]	@ (800721c <OS_InitTaskIdle+0x48>)
 8007202:	203f      	movs	r0, #63	@ 0x3f
 8007204:	f000 fe40 	bl	8007e88 <OSTaskNameSet>
#endif
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20001df0 	.word	0x20001df0
 8007214:	20001fec 	.word	0x20001fec
 8007218:	08007401 	.word	0x08007401
 800721c:	0800b154 	.word	0x0800b154

08007220 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8007226:	2303      	movs	r3, #3
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	2300      	movs	r3, #0
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	2380      	movs	r3, #128	@ 0x80
 8007230:	9302      	str	r3, [sp, #8]
 8007232:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <OS_InitTaskStat+0x3c>)
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	233e      	movs	r3, #62	@ 0x3e
 800723e:	4a08      	ldr	r2, [pc, #32]	@ (8007260 <OS_InitTaskStat+0x40>)
 8007240:	2100      	movs	r1, #0
 8007242:	4808      	ldr	r0, [pc, #32]	@ (8007264 <OS_InitTaskStat+0x44>)
 8007244:	f000 fccc 	bl	8007be0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	461a      	mov	r2, r3
 800724c:	4906      	ldr	r1, [pc, #24]	@ (8007268 <OS_InitTaskStat+0x48>)
 800724e:	203e      	movs	r0, #62	@ 0x3e
 8007250:	f000 fe1a 	bl	8007e88 <OSTaskNameSet>
#endif
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20001bd8 	.word	0x20001bd8
 8007260:	20001dd4 	.word	0x20001dd4
 8007264:	0800742d 	.word	0x0800742d
 8007268:	0800b164 	.word	0x0800b164

0800726c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8007272:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 8007276:	481f      	ldr	r0, [pc, #124]	@ (80072f4 <OS_InitTCBList+0x88>)
 8007278:	f000 f846 	bl	8007308 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800727c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007280:	481d      	ldr	r0, [pc, #116]	@ (80072f8 <OS_InitTCBList+0x8c>)
 8007282:	f000 f841 	bl	8007308 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
 800728a:	e019      	b.n	80072c0 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3301      	adds	r3, #1
 8007290:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2258      	movs	r2, #88	@ 0x58
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	4a16      	ldr	r2, [pc, #88]	@ (80072f4 <OS_InitTCBList+0x88>)
 800729c:	4413      	add	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2258      	movs	r2, #88	@ 0x58
 80072a4:	fb02 f303 	mul.w	r3, r2, r3
 80072a8:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <OS_InitTCBList+0x88>)
 80072aa:	4413      	add	r3, r2
 80072ac:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4a11      	ldr	r2, [pc, #68]	@ (80072fc <OS_InitTCBList+0x90>)
 80072b8:	651a      	str	r2, [r3, #80]	@ 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	3301      	adds	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b14      	cmp	r3, #20
 80072c4:	d9e2      	bls.n	800728c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2258      	movs	r2, #88	@ 0x58
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	4a09      	ldr	r2, [pc, #36]	@ (80072f4 <OS_InitTCBList+0x88>)
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2200      	movs	r2, #0
 80072d8:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4a07      	ldr	r2, [pc, #28]	@ (80072fc <OS_InitTCBList+0x90>)
 80072de:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <OS_InitTCBList+0x94>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 80072e6:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <OS_InitTCBList+0x98>)
 80072e8:	4a02      	ldr	r2, [pc, #8]	@ (80072f4 <OS_InitTCBList+0x88>)
 80072ea:	601a      	str	r2, [r3, #0]
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20002100 	.word	0x20002100
 80072f8:	20002000 	.word	0x20002000
 80072fc:	0800b150 	.word	0x0800b150
 8007300:	20001ffc 	.word	0x20001ffc
 8007304:	20001ff4 	.word	0x20001ff4

08007308 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007314:	e007      	b.n	8007326 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
        size--;
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	3b01      	subs	r3, #1
 8007324:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f4      	bne.n	8007316 <OS_MemClr+0xe>
    }
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800733e:	2300      	movs	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8007342:	f7f8 ff03 	bl	800014c <CPU_IntDis>
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8007346:	4b15      	ldr	r3, [pc, #84]	@ (800739c <OS_Sched+0x64>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11f      	bne.n	800738e <OS_Sched+0x56>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 800734e:	4b14      	ldr	r3, [pc, #80]	@ (80073a0 <OS_Sched+0x68>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d11b      	bne.n	800738e <OS_Sched+0x56>
            OS_SchedNew();
 8007356:	f000 f82f 	bl	80073b8 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800735a:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <OS_Sched+0x6c>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	4b11      	ldr	r3, [pc, #68]	@ (80073a8 <OS_Sched+0x70>)
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	4a11      	ldr	r2, [pc, #68]	@ (80073ac <OS_Sched+0x74>)
 8007368:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800736a:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <OS_Sched+0x6c>)
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <OS_Sched+0x78>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d00b      	beq.n	800738e <OS_Sched+0x56>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <OS_Sched+0x74>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800737c:	3201      	adds	r2, #1
 800737e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <OS_Sched+0x7c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	4a0b      	ldr	r2, [pc, #44]	@ (80073b4 <OS_Sched+0x7c>)
 8007388:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 800738a:	f7f8 ff60 	bl	800024e <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 800738e:	f7f8 fedf 	bl	8000150 <CPU_IntEn>
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20001dd8 	.word	0x20001dd8
 80073a0:	20001dd9 	.word	0x20001dd9
 80073a4:	20001ddb 	.word	0x20001ddb
 80073a8:	20002000 	.word	0x20002000
 80073ac:	20001ff8 	.word	0x20001ff8
 80073b0:	20001dda 	.word	0x20001dda
 80073b4:	20001a7c 	.word	0x20001a7c

080073b8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <OS_SchedNew+0x38>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <OS_SchedNew+0x3c>)
 80073c6:	5c9b      	ldrb	r3, [r3, r2]
 80073c8:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	4909      	ldr	r1, [pc, #36]	@ (80073f8 <OS_SchedNew+0x40>)
 80073d4:	5ccb      	ldrb	r3, [r1, r3]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <OS_SchedNew+0x3c>)
 80073da:	5c5b      	ldrb	r3, [r3, r1]
 80073dc:	4413      	add	r3, r2
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	4b06      	ldr	r3, [pc, #24]	@ (80073fc <OS_SchedNew+0x44>)
 80073e2:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20001ddc 	.word	0x20001ddc
 80073f4:	0800b29c 	.word	0x0800b29c
 80073f8:	20001de0 	.word	0x20001de0
 80073fc:	20001ddb 	.word	0x20001ddb

08007400 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 800740c:	f7f8 fe9e 	bl	800014c <CPU_IntDis>
        OSIdleCtr++;
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <OS_TaskIdle+0x28>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <OS_TaskIdle+0x28>)
 8007418:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800741a:	f7f8 fe99 	bl	8000150 <CPU_IntEn>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800741e:	f7ff f9a1 	bl	8006764 <OSTaskIdleHook>
    for (;;) {
 8007422:	bf00      	nop
 8007424:	e7f2      	b.n	800740c <OS_TaskIdle+0xc>
 8007426:	bf00      	nop
 8007428:	20001dec 	.word	0x20001dec

0800742c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8007438:	e003      	b.n	8007442 <OS_TaskStat+0x16>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 800743a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800743e:	f000 ff01 	bl	8008244 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8007442:	4b2d      	ldr	r3, [pc, #180]	@ (80074f8 <OS_TaskStat+0xcc>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f7      	beq.n	800743a <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 800744a:	4b2c      	ldr	r3, [pc, #176]	@ (80074fc <OS_TaskStat+0xd0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2c      	ldr	r2, [pc, #176]	@ (8007500 <OS_TaskStat+0xd4>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	4a29      	ldr	r2, [pc, #164]	@ (80074fc <OS_TaskStat+0xd0>)
 8007458:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 800745a:	4b28      	ldr	r3, [pc, #160]	@ (80074fc <OS_TaskStat+0xd0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <OS_TaskStat+0x42>
        OSCPUUsage = 0u;
 8007462:	4b28      	ldr	r3, [pc, #160]	@ (8007504 <OS_TaskStat+0xd8>)
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8007468:	20ff      	movs	r0, #255	@ 0xff
 800746a:	f000 fe3d 	bl	80080e8 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 800746e:	f7f8 fe6d 	bl	800014c <CPU_IntDis>
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8007472:	4b22      	ldr	r3, [pc, #136]	@ (80074fc <OS_TaskStat+0xd0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2264      	movs	r2, #100	@ 0x64
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	4a22      	ldr	r2, [pc, #136]	@ (8007508 <OS_TaskStat+0xdc>)
 800747e:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8007480:	f7f8 fe66 	bl	8000150 <CPU_IntEn>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8007484:	2001      	movs	r0, #1
 8007486:	f000 fedd 	bl	8008244 <OSTimeDly>

        OS_ENTER_CRITICAL();
 800748a:	f7f8 fe5f 	bl	800014c <CPU_IntDis>
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 800748e:	4b1e      	ldr	r3, [pc, #120]	@ (8007508 <OS_TaskStat+0xdc>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8007494:	f7f8 fe5c 	bl	8000150 <CPU_IntEn>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8007498:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800749c:	f000 fed2 	bl	8008244 <OSTimeDly>

        OS_ENTER_CRITICAL();
 80074a0:	f7f8 fe54 	bl	800014c <CPU_IntDis>
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 80074a4:	4b18      	ldr	r3, [pc, #96]	@ (8007508 <OS_TaskStat+0xdc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a18      	ldr	r2, [pc, #96]	@ (800750c <OS_TaskStat+0xe0>)
 80074aa:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80074ac:	f7f8 fe50 	bl	8000150 <CPU_IntEn>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 80074b0:	4b16      	ldr	r3, [pc, #88]	@ (800750c <OS_TaskStat+0xe0>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <OS_TaskStat+0xd0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 80074c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db03      	blt.n	80074d6 <OS_TaskStat+0xaa>
            OSCPUUsage   = (INT8U)usage;
 80074ce:	7afa      	ldrb	r2, [r7, #11]
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <OS_TaskStat+0xd8>)
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e00a      	b.n	80074ec <OS_TaskStat+0xc0>
        } else {
            OSCPUUsage   = 0u;
 80074d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007504 <OS_TaskStat+0xd8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 80074dc:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <OS_TaskStat+0xe0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a07      	ldr	r2, [pc, #28]	@ (8007500 <OS_TaskStat+0xd4>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	4a04      	ldr	r2, [pc, #16]	@ (80074fc <OS_TaskStat+0xd0>)
 80074ea:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 80074ec:	f7ff f94b 	bl	8006786 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 80074f0:	f000 f80e 	bl	8007510 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80074f4:	e7c6      	b.n	8007484 <OS_TaskStat+0x58>
 80074f6:	bf00      	nop
 80074f8:	20001bd4 	.word	0x20001bd4
 80074fc:	20001bcc 	.word	0x20001bcc
 8007500:	51eb851f 	.word	0x51eb851f
 8007504:	20001bc8 	.word	0x20001bc8
 8007508:	20001dec 	.word	0x20001dec
 800750c:	20001bd0 	.word	0x20001bd0

08007510 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
 800751a:	e023      	b.n	8007564 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 800751c:	463a      	mov	r2, r7
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fd78 	bl	8008018 <OSTaskStkChk>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d115      	bne.n	800755e <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	4a0f      	ldr	r2, [pc, #60]	@ (8007574 <OS_TaskStatStkChk+0x64>)
 8007536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800753a:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00d      	beq.n	800755e <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d00a      	beq.n	800755e <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	649a      	str	r2, [r3, #72]	@ 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	3301      	adds	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	2b3f      	cmp	r3, #63	@ 0x3f
 8007568:	d9d8      	bls.n	800751c <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20002000 	.word	0x20002000

08007578 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	461a      	mov	r2, r3
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
 8007588:	4613      	mov	r3, r2
 800758a:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8007590:	f7f8 fddc 	bl	800014c <CPU_IntDis>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8007594:	4b66      	ldr	r3, [pc, #408]	@ (8007730 <OS_TCBInit+0x1b8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80c0 	beq.w	8007722 <OS_TCBInit+0x1aa>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	4a62      	ldr	r2, [pc, #392]	@ (8007730 <OS_TCBInit+0x1b8>)
 80075a8:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80075aa:	f7f8 fdd1 	bl	8000150 <CPU_IntEn>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	7bfa      	ldrb	r2, [r7, #15]
 80075b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2200      	movs	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	@ 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d6:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075dc:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80075e8:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	89ba      	ldrh	r2, [r7, #12]
 80075ee:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	b2da      	uxtb	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007618:	461a      	mov	r2, r3
 800761a:	2301      	movs	r3, #1
 800761c:	4093      	lsls	r3, r2
 800761e:	b2da      	uxtb	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800762c:	461a      	mov	r2, r3
 800762e:	2301      	movs	r3, #1
 8007630:	4093      	lsls	r3, r2
 8007632:	b2da      	uxtb	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2200      	movs	r2, #0
 800763e:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2200      	movs	r2, #0
 8007644:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2200      	movs	r2, #0
 8007650:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	63da      	str	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2200      	movs	r2, #0
 8007662:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2200      	movs	r2, #0
 8007668:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4a30      	ldr	r2, [pc, #192]	@ (8007734 <OS_TCBInit+0x1bc>)
 8007674:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8007676:	2300      	movs	r3, #0
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e009      	b.n	8007690 <OS_TCBInit+0x118>
            ptcb->OSTCBRegTbl[i] = 0u;
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	3314      	adds	r3, #20
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	2200      	movs	r2, #0
 8007688:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800768a:	7ffb      	ldrb	r3, [r7, #31]
 800768c:	3301      	adds	r3, #1
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	7ffb      	ldrb	r3, [r7, #31]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f2      	beq.n	800767c <OS_TCBInit+0x104>
        }
#endif

        OSTCBInitHook(ptcb);
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	f7ff f90c 	bl	80068b4 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 800769c:	f7f8 fd56 	bl	800014c <CPU_IntDis>
        OSTCBPrioTbl[prio] = ptcb;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4925      	ldr	r1, [pc, #148]	@ (8007738 <OS_TCBInit+0x1c0>)
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80076aa:	f7f8 fd51 	bl	8000150 <CPU_IntEn>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80076ae:	6978      	ldr	r0, [r7, #20]
 80076b0:	f7ff f842 	bl	8006738 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80076b4:	f7f8 fd4a 	bl	800014c <CPU_IntDis>
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 80076b8:	4b20      	ldr	r3, [pc, #128]	@ (800773c <OS_TCBInit+0x1c4>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80076c6:	4b1d      	ldr	r3, [pc, #116]	@ (800773c <OS_TCBInit+0x1c4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <OS_TCBInit+0x15e>
            OSTCBList->OSTCBPrev = ptcb;
 80076ce:	4b1b      	ldr	r3, [pc, #108]	@ (800773c <OS_TCBInit+0x1c4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80076d6:	4a19      	ldr	r2, [pc, #100]	@ (800773c <OS_TCBInit+0x1c4>)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80076e2:	4b17      	ldr	r3, [pc, #92]	@ (8007740 <OS_TCBInit+0x1c8>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	4b15      	ldr	r3, [pc, #84]	@ (8007740 <OS_TCBInit+0x1c8>)
 80076ec:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b13      	ldr	r3, [pc, #76]	@ (8007744 <OS_TCBInit+0x1cc>)
 80076f8:	5c9a      	ldrb	r2, [r3, r2]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007706:	4313      	orrs	r3, r2
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b0e      	ldr	r3, [pc, #56]	@ (8007744 <OS_TCBInit+0x1cc>)
 800770c:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800770e:	4b0e      	ldr	r3, [pc, #56]	@ (8007748 <OS_TCBInit+0x1d0>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	b2da      	uxtb	r2, r3
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <OS_TCBInit+0x1d0>)
 8007718:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 800771a:	f7f8 fd19 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_NONE);
 800771e:	2300      	movs	r3, #0
 8007720:	e002      	b.n	8007728 <OS_TCBInit+0x1b0>
    }
    OS_EXIT_CRITICAL();
 8007722:	f7f8 fd15 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8007726:	2342      	movs	r3, #66	@ 0x42
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20001ff4 	.word	0x20001ff4
 8007734:	0800b150 	.word	0x0800b150
 8007738:	20002000 	.word	0x20002000
 800773c:	20001ffc 	.word	0x20001ffc
 8007740:	20001ddc 	.word	0x20001ddc
 8007744:	20001de0 	.word	0x20001de0
 8007748:	20001de9 	.word	0x20001de9

0800774c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8007752:	2150      	movs	r1, #80	@ 0x50
 8007754:	481b      	ldr	r0, [pc, #108]	@ (80077c4 <OS_FlagInit+0x78>)
 8007756:	f7ff fdd7 	bl	8007308 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800775a:	2300      	movs	r3, #0
 800775c:	81fb      	strh	r3, [r7, #14]
 800775e:	e018      	b.n	8007792 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	3301      	adds	r3, #1
 8007764:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8007766:	89fb      	ldrh	r3, [r7, #14]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	4a16      	ldr	r2, [pc, #88]	@ (80077c4 <OS_FlagInit+0x78>)
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	4a13      	ldr	r2, [pc, #76]	@ (80077c4 <OS_FlagInit+0x78>)
 8007776:	4413      	add	r3, r2
 8007778:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a0f      	ldr	r2, [pc, #60]	@ (80077c8 <OS_FlagInit+0x7c>)
 800778a:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	3301      	adds	r3, #1
 8007790:	81fb      	strh	r3, [r7, #14]
 8007792:	89fb      	ldrh	r3, [r7, #14]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d9e3      	bls.n	8007760 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8007798:	89fb      	ldrh	r3, [r7, #14]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	4a09      	ldr	r2, [pc, #36]	@ (80077c4 <OS_FlagInit+0x78>)
 800779e:	4413      	add	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4a05      	ldr	r2, [pc, #20]	@ (80077c8 <OS_FlagInit+0x7c>)
 80077b2:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80077b4:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <OS_FlagInit+0x80>)
 80077b6:	4a03      	ldr	r2, [pc, #12]	@ (80077c4 <OS_FlagInit+0x78>)
 80077b8:	601a      	str	r2, [r3, #0]
#endif
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20001b74 	.word	0x20001b74
 80077c8:	0800b174 	.word	0x0800b174
 80077cc:	20001bc4 	.word	0x20001bc4

080077d0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10c      	bne.n	8007804 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	e008      	b.n	8007816 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8007832:	2178      	movs	r1, #120	@ 0x78
 8007834:	481a      	ldr	r0, [pc, #104]	@ (80078a0 <OS_MemInit+0x74>)
 8007836:	f7ff fd67 	bl	8007308 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800783a:	2300      	movs	r3, #0
 800783c:	80fb      	strh	r3, [r7, #6]
 800783e:	e017      	b.n	8007870 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	4a15      	ldr	r2, [pc, #84]	@ (80078a0 <OS_MemInit+0x74>)
 800784c:	4413      	add	r3, r2
 800784e:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4a10      	ldr	r2, [pc, #64]	@ (80078a0 <OS_MemInit+0x74>)
 800785e:	441a      	add	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	4a0f      	ldr	r2, [pc, #60]	@ (80078a4 <OS_MemInit+0x78>)
 8007868:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	3301      	adds	r3, #1
 800786e:	80fb      	strh	r3, [r7, #6]
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d9e4      	bls.n	8007840 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	4613      	mov	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	4413      	add	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4a07      	ldr	r2, [pc, #28]	@ (80078a0 <OS_MemInit+0x74>)
 8007882:	4413      	add	r3, r2
 8007884:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	4a05      	ldr	r2, [pc, #20]	@ (80078a4 <OS_MemInit+0x78>)
 8007890:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8007892:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <OS_MemInit+0x7c>)
 8007894:	4a02      	ldr	r2, [pc, #8]	@ (80078a0 <OS_MemInit+0x74>)
 8007896:	601a      	str	r2, [r3, #0]
#endif
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20002898 	.word	0x20002898
 80078a4:	0800b178 	.word	0x0800b178
 80078a8:	20002894 	.word	0x20002894

080078ac <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80078b2:	2160      	movs	r1, #96	@ 0x60
 80078b4:	4819      	ldr	r0, [pc, #100]	@ (800791c <OS_QInit+0x70>)
 80078b6:	f7ff fd27 	bl	8007308 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80078ba:	2300      	movs	r3, #0
 80078bc:	81fb      	strh	r3, [r7, #14]
 80078be:	e018      	b.n	80078f2 <OS_QInit+0x46>
        ix_next = ix + 1u;
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	3301      	adds	r3, #1
 80078c4:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 80078c6:	89fa      	ldrh	r2, [r7, #14]
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4a12      	ldr	r2, [pc, #72]	@ (800791c <OS_QInit+0x70>)
 80078d2:	4413      	add	r3, r2
 80078d4:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 80078d6:	88fa      	ldrh	r2, [r7, #6]
 80078d8:	4613      	mov	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4413      	add	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4a0e      	ldr	r2, [pc, #56]	@ (800791c <OS_QInit+0x70>)
 80078e2:	4413      	add	r3, r2
 80078e4:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	3301      	adds	r3, #1
 80078f0:	81fb      	strh	r3, [r7, #14]
 80078f2:	89fb      	ldrh	r3, [r7, #14]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d9e3      	bls.n	80078c0 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 80078f8:	89fa      	ldrh	r2, [r7, #14]
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	4a06      	ldr	r2, [pc, #24]	@ (800791c <OS_QInit+0x70>)
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 800790e:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <OS_QInit+0x74>)
 8007910:	4a02      	ldr	r2, [pc, #8]	@ (800791c <OS_QInit+0x70>)
 8007912:	601a      	str	r2, [r3, #0]
#endif
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20002914 	.word	0x20002914
 8007920:	20002910 	.word	0x20002910

08007924 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8007932:	4b16      	ldr	r3, [pc, #88]	@ (800798c <OSSemCreate+0x68>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800793a:	2300      	movs	r3, #0
 800793c:	e022      	b.n	8007984 <OSSemCreate+0x60>
    }
    OS_ENTER_CRITICAL();
 800793e:	f7f8 fc05 	bl	800014c <CPU_IntDis>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <OSSemCreate+0x6c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8007948:	4b11      	ldr	r3, [pc, #68]	@ (8007990 <OSSemCreate+0x6c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <OSSemCreate+0x36>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8007950:	4b0f      	ldr	r3, [pc, #60]	@ (8007990 <OSSemCreate+0x6c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	4a0e      	ldr	r2, [pc, #56]	@ (8007990 <OSSemCreate+0x6c>)
 8007958:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800795a:	f7f8 fbf9 	bl	8000150 <CPU_IntEn>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <OSSemCreate+0x5e>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2203      	movs	r2, #3
 8007968:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a06      	ldr	r2, [pc, #24]	@ (8007994 <OSSemCreate+0x70>)
 800797a:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 800797c:	68b8      	ldr	r0, [r7, #8]
 800797e:	f7ff fb56 	bl	800702e <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8007982:	68bb      	ldr	r3, [r7, #8]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20001dd8 	.word	0x20001dd8
 8007990:	20001a80 	.word	0x20001a80
 8007994:	0800b17c 	.word	0x0800b17c

08007998 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2204      	movs	r2, #4
 80079b2:	701a      	strb	r2, [r3, #0]
        return;
 80079b4:	e075      	b.n	8007aa2 <OSSemPend+0x10a>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d003      	beq.n	80079c6 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079c4:	e06d      	b.n	8007aa2 <OSSemPend+0x10a>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80079c6:	4b38      	ldr	r3, [pc, #224]	@ (8007aa8 <OSSemPend+0x110>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079d4:	e065      	b.n	8007aa2 <OSSemPend+0x10a>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80079d6:	4b35      	ldr	r3, [pc, #212]	@ (8007aac <OSSemPend+0x114>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220d      	movs	r2, #13
 80079e2:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80079e4:	e05d      	b.n	8007aa2 <OSSemPend+0x10a>
    }
    OS_ENTER_CRITICAL();
 80079e6:	f7f8 fbb1 	bl	800014c <CPU_IntDis>
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	891b      	ldrh	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <OSSemPend+0x72>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	891b      	ldrh	r3, [r3, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80079fe:	f7f8 fba7 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8007a08:	e04b      	b.n	8007aa2 <OSSemPend+0x10a>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8007a0a:	4b29      	ldr	r3, [pc, #164]	@ (8007ab0 <OSSemPend+0x118>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007a12:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <OSSemPend+0x118>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8007a20:	4b23      	ldr	r3, [pc, #140]	@ (8007ab0 <OSSemPend+0x118>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8007a2a:	4b21      	ldr	r3, [pc, #132]	@ (8007ab0 <OSSemPend+0x118>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fa30 	bl	8006e98 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8007a38:	f7f8 fb8a 	bl	8000150 <CPU_IntEn>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8007a3c:	f7ff fc7c 	bl	8007338 <OS_Sched>
    OS_ENTER_CRITICAL();
 8007a40:	f7f8 fb84 	bl	800014c <CPU_IntDis>
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8007a44:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab0 <OSSemPend+0x118>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <OSSemPend+0xbe>
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d004      	beq.n	8007a5e <OSSemPend+0xc6>
 8007a54:	e007      	b.n	8007a66 <OSSemPend+0xce>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
             break;
 8007a5c:	e00d      	b.n	8007a7a <OSSemPend+0xe2>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220e      	movs	r2, #14
 8007a62:	701a      	strb	r2, [r3, #0]
             break;
 8007a64:	e009      	b.n	8007a7a <OSSemPend+0xe2>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8007a66:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <OSSemPend+0x118>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fa69 	bl	8006f44 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	220a      	movs	r2, #10
 8007a76:	701a      	strb	r2, [r3, #0]
             break;
 8007a78:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <OSSemPend+0x118>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8007a84:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <OSSemPend+0x118>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8007a8e:	4b08      	ldr	r3, [pc, #32]	@ (8007ab0 <OSSemPend+0x118>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8007a96:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <OSSemPend+0x118>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8007a9e:	f7f8 fb57 	bl	8000150 <CPU_IntEn>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20001dd8 	.word	0x20001dd8
 8007aac:	20001dd9 	.word	0x20001dd9
 8007ab0:	20001ff0 	.word	0x20001ff0

08007ab4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8007ac6:	2304      	movs	r3, #4
 8007ac8:	e02a      	b.n	8007b20 <OSSemPost+0x6c>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d001      	beq.n	8007ad6 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e024      	b.n	8007b20 <OSSemPost+0x6c>
    }
    OS_ENTER_CRITICAL();
 8007ad6:	f7f8 fb39 	bl	800014c <CPU_IntDis>
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7a9b      	ldrb	r3, [r3, #10]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <OSSemPost+0x46>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff f963 	bl	8006db4 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8007aee:	f7f8 fb2f 	bl	8000150 <CPU_IntEn>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8007af2:	f7ff fc21 	bl	8007338 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8007af6:	2300      	movs	r3, #0
 8007af8:	e012      	b.n	8007b20 <OSSemPost+0x6c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	891b      	ldrh	r3, [r3, #8]
 8007afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <OSSemPost+0x66>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	891b      	ldrh	r3, [r3, #8]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8007b12:	f7f8 fb1d 	bl	8000150 <CPU_IntEn>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8007b16:	2300      	movs	r3, #0
 8007b18:	e002      	b.n	8007b20 <OSSemPost+0x6c>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8007b1a:	f7f8 fb19 	bl	8000150 <CPU_IntEn>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8007b1e:	2333      	movs	r3, #51	@ 0x33
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08c      	sub	sp, #48	@ 0x30
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b3e:	d901      	bls.n	8007b44 <OSTaskCreate+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8007b40:	232a      	movs	r3, #42	@ 0x2a
 8007b42:	e043      	b.n	8007bcc <OSTaskCreate+0xa4>
    }
#endif
    OS_ENTER_CRITICAL();
 8007b44:	f7f8 fb02 	bl	800014c <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8007b48:	4b22      	ldr	r3, [pc, #136]	@ (8007bd4 <OSTaskCreate+0xac>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <OSTaskCreate+0x30>
        OS_EXIT_CRITICAL();
 8007b50:	f7f8 fafe 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8007b54:	233c      	movs	r3, #60	@ 0x3c
 8007b56:	e039      	b.n	8007bcc <OSTaskCreate+0xa4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bd8 <OSTaskCreate+0xb0>)
 8007b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d130      	bne.n	8007bc6 <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd8 <OSTaskCreate+0xb0>)
 8007b68:	2101      	movs	r1, #1
 8007b6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8007b6e:	f7f8 faef 	bl	8000150 <CPU_IntEn>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 8007b72:	2300      	movs	r3, #0
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7fe fe0b 	bl	8006794 <OSTaskStkInit>
 8007b7e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8007b80:	78f8      	ldrb	r0, [r7, #3]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2200      	movs	r2, #0
 8007b92:	69b9      	ldr	r1, [r7, #24]
 8007b94:	f7ff fcf0 	bl	8007578 <OS_TCBInit>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <OSTaskCreate+0x88>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bdc <OSTaskCreate+0xb4>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10b      	bne.n	8007bc2 <OSTaskCreate+0x9a>
                OS_Sched();
 8007baa:	f7ff fbc5 	bl	8007338 <OS_Sched>
 8007bae:	e008      	b.n	8007bc2 <OSTaskCreate+0x9a>
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
 8007bb0:	f7f8 facc 	bl	800014c <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <OSTaskCreate+0xb0>)
 8007bb8:	2100      	movs	r1, #0
 8007bba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8007bbe:	f7f8 fac7 	bl	8000150 <CPU_IntEn>
        }
        return (err);
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	e002      	b.n	8007bcc <OSTaskCreate+0xa4>
    }
    OS_EXIT_CRITICAL();
 8007bc6:	f7f8 fac3 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8007bca:	2328      	movs	r3, #40	@ 0x28
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20001dd8 	.word	0x20001dd8
 8007bd8:	20002000 	.word	0x20002000
 8007bdc:	20001de8 	.word	0x20001de8

08007be0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	@ 0x30
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bf6:	d901      	bls.n	8007bfc <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8007bf8:	232a      	movs	r3, #42	@ 0x2a
 8007bfa:	e04a      	b.n	8007c92 <OSTaskCreateExt+0xb2>
    }
#endif
    OS_ENTER_CRITICAL();
 8007bfc:	f7f8 faa6 	bl	800014c <CPU_IntDis>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8007c00:	4b26      	ldr	r3, [pc, #152]	@ (8007c9c <OSTaskCreateExt+0xbc>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <OSTaskCreateExt+0x30>
        OS_EXIT_CRITICAL();
 8007c08:	f7f8 faa2 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_CREATE_ISR);
 8007c0c:	233c      	movs	r3, #60	@ 0x3c
 8007c0e:	e040      	b.n	8007c92 <OSTaskCreateExt+0xb2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	4a23      	ldr	r2, [pc, #140]	@ (8007ca0 <OSTaskCreateExt+0xc0>)
 8007c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d137      	bne.n	8007c8c <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	4a20      	ldr	r2, [pc, #128]	@ (8007ca0 <OSTaskCreateExt+0xc0>)
 8007c20:	2101      	movs	r1, #1
 8007c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8007c26:	f7f8 fa93 	bl	8000150 <CPU_IntEn>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8007c2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c32:	f000 fae5 	bl	8008200 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8007c36:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7fe fda9 	bl	8006794 <OSTaskStkInit>
 8007c42:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8007c44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c46:	78f8      	ldrb	r0, [r7, #3]
 8007c48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c4a:	9302      	str	r3, [sp, #8]
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	f7ff fc8d 	bl	8007578 <OS_TCBInit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <OSTaskCreateExt+0x96>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8007c68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca4 <OSTaskCreateExt+0xc4>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10b      	bne.n	8007c88 <OSTaskCreateExt+0xa8>
                OS_Sched();
 8007c70:	f7ff fb62 	bl	8007338 <OS_Sched>
 8007c74:	e008      	b.n	8007c88 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 8007c76:	f7f8 fa69 	bl	800014c <CPU_IntDis>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	4a08      	ldr	r2, [pc, #32]	@ (8007ca0 <OSTaskCreateExt+0xc0>)
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8007c84:	f7f8 fa64 	bl	8000150 <CPU_IntEn>
        }
        return (err);
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	e002      	b.n	8007c92 <OSTaskCreateExt+0xb2>
    }
    OS_EXIT_CRITICAL();
 8007c8c:	f7f8 fa60 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_PRIO_EXIST);
 8007c90:	2328      	movs	r3, #40	@ 0x28
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20001dd8 	.word	0x20001dd8
 8007ca0:	20002000 	.word	0x20002000
 8007ca4:	20001de8 	.word	0x20001de8

08007ca8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8007cb6:	4b69      	ldr	r3, [pc, #420]	@ (8007e5c <OSTaskDel+0x1b4>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8007cbe:	2340      	movs	r3, #64	@ 0x40
 8007cc0:	e0c8      	b.n	8007e54 <OSTaskDel+0x1ac>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cc6:	d101      	bne.n	8007ccc <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8007cc8:	233e      	movs	r3, #62	@ 0x3e
 8007cca:	e0c3      	b.n	8007e54 <OSTaskDel+0x1ac>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cd0:	d904      	bls.n	8007cdc <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2bff      	cmp	r3, #255	@ 0xff
 8007cd6:	d001      	beq.n	8007cdc <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8007cd8:	232a      	movs	r3, #42	@ 0x2a
 8007cda:	e0bb      	b.n	8007e54 <OSTaskDel+0x1ac>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8007cdc:	f7f8 fa36 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	2bff      	cmp	r3, #255	@ 0xff
 8007ce4:	d104      	bne.n	8007cf0 <OSTaskDel+0x48>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8007ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8007e60 <OSTaskDel+0x1b8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cee:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8007e64 <OSTaskDel+0x1bc>)
 8007cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf8:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <OSTaskDel+0x60>
        OS_EXIT_CRITICAL();
 8007d00:	f7f8 fa26 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8007d04:	2343      	movs	r3, #67	@ 0x43
 8007d06:	e0a5      	b.n	8007e54 <OSTaskDel+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d103      	bne.n	8007d16 <OSTaskDel+0x6e>
        OS_EXIT_CRITICAL();
 8007d0e:	f7f8 fa1f 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_DEL);
 8007d12:	233d      	movs	r3, #61	@ 0x3d
 8007d14:	e09e      	b.n	8007e54 <OSTaskDel+0x1ac>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b52      	ldr	r3, [pc, #328]	@ (8007e68 <OSTaskDel+0x1c0>)
 8007d20:	5c9a      	ldrb	r2, [r3, r2]
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	6939      	ldr	r1, [r7, #16]
 8007d2e:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007d32:	4013      	ands	r3, r2
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <OSTaskDel+0x1c0>)
 8007d38:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b49      	ldr	r3, [pc, #292]	@ (8007e68 <OSTaskDel+0x1c0>)
 8007d44:	5c9b      	ldrb	r3, [r3, r2]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <OSTaskDel+0xb8>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007d50:	43db      	mvns	r3, r3
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	4b45      	ldr	r3, [pc, #276]	@ (8007e6c <OSTaskDel+0x1c4>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	4b43      	ldr	r3, [pc, #268]	@ (8007e6c <OSTaskDel+0x1c4>)
 8007d5e:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <OSTaskDel+0xcc>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6938      	ldr	r0, [r7, #16]
 8007d70:	f7ff f8e8 	bl	8006f44 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <OSTaskDel+0xe0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6938      	ldr	r0, [r7, #16]
 8007d84:	f7ff f910 	bl	8006fa8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <OSTaskDel+0xf2>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff fd1b 	bl	80077d0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8007db0:	4b2f      	ldr	r3, [pc, #188]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2bff      	cmp	r3, #255	@ 0xff
 8007db6:	d005      	beq.n	8007dc4 <OSTaskDel+0x11c>
        OSLockNesting++;
 8007db8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007dc2:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8007dc4:	f7f8 f9c4 	bl	8000150 <CPU_IntEn>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8007dc8:	f7fe ffee 	bl	8006da8 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8007dcc:	f7f8 f9be 	bl	800014c <CPU_IntDis>
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8007dd0:	4b27      	ldr	r3, [pc, #156]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <OSTaskDel+0x13c>
        OSLockNesting--;
 8007dd8:	4b25      	ldr	r3, [pc, #148]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b23      	ldr	r3, [pc, #140]	@ (8007e70 <OSTaskDel+0x1c8>)
 8007de2:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8007de4:	6938      	ldr	r0, [r7, #16]
 8007de6:	f7fe fcb2 	bl	800674e <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8007dea:	4b22      	ldr	r3, [pc, #136]	@ (8007e74 <OSTaskDel+0x1cc>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	4b20      	ldr	r3, [pc, #128]	@ (8007e74 <OSTaskDel+0x1cc>)
 8007df4:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	4a1a      	ldr	r2, [pc, #104]	@ (8007e64 <OSTaskDel+0x1bc>)
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d108      	bne.n	8007e1a <OSTaskDel+0x172>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <OSTaskDel+0x1d0>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e009      	b.n	8007e2e <OSTaskDel+0x186>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	6952      	ldr	r2, [r2, #20]
 8007e22:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	6992      	ldr	r2, [r2, #24]
 8007e2c:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8007e2e:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <OSTaskDel+0x1d4>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8007e36:	4a11      	ldr	r2, [pc, #68]	@ (8007e7c <OSTaskDel+0x1d4>)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4a10      	ldr	r2, [pc, #64]	@ (8007e80 <OSTaskDel+0x1d8>)
 8007e40:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    OS_EXIT_CRITICAL();
 8007e42:	f7f8 f985 	bl	8000150 <CPU_IntEn>
    if (OSRunning == OS_TRUE) {
 8007e46:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <OSTaskDel+0x1dc>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <OSTaskDel+0x1aa>
        OS_Sched();                                     /* Find new highest priority task              */
 8007e4e:	f7ff fa73 	bl	8007338 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20001dd8 	.word	0x20001dd8
 8007e60:	20001ff0 	.word	0x20001ff0
 8007e64:	20002000 	.word	0x20002000
 8007e68:	20001de0 	.word	0x20001de0
 8007e6c:	20001ddc 	.word	0x20001ddc
 8007e70:	20001dd9 	.word	0x20001dd9
 8007e74:	20001de9 	.word	0x20001de9
 8007e78:	20001ffc 	.word	0x20001ffc
 8007e7c:	20001ff4 	.word	0x20001ff4
 8007e80:	0800b180 	.word	0x0800b180
 8007e84:	20001de8 	.word	0x20001de8

08007e88 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e9e:	d906      	bls.n	8007eae <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2bff      	cmp	r3, #255	@ 0xff
 8007ea4:	d003      	beq.n	8007eae <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	222a      	movs	r2, #42	@ 0x2a
 8007eaa:	701a      	strb	r2, [r3, #0]
            return;
 8007eac:	e037      	b.n	8007f1e <OSTaskNameSet+0x96>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220c      	movs	r2, #12
 8007eb8:	701a      	strb	r2, [r3, #0]
        return;
 8007eba:	e030      	b.n	8007f1e <OSTaskNameSet+0x96>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8007ebc:	4b19      	ldr	r3, [pc, #100]	@ (8007f24 <OSTaskNameSet+0x9c>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2212      	movs	r2, #18
 8007ec8:	701a      	strb	r2, [r3, #0]
        return;
 8007eca:	e028      	b.n	8007f1e <OSTaskNameSet+0x96>
    }
    OS_ENTER_CRITICAL();
 8007ecc:	f7f8 f93e 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2bff      	cmp	r3, #255	@ 0xff
 8007ed4:	d104      	bne.n	8007ee0 <OSTaskNameSet+0x58>
        prio = OSTCBCur->OSTCBPrio;
 8007ed6:	4b14      	ldr	r3, [pc, #80]	@ (8007f28 <OSTaskNameSet+0xa0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007ede:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4a12      	ldr	r2, [pc, #72]	@ (8007f2c <OSTaskNameSet+0xa4>)
 8007ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee8:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <OSTaskNameSet+0x74>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8007ef0:	f7f8 f92e 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2243      	movs	r2, #67	@ 0x43
 8007ef8:	701a      	strb	r2, [r3, #0]
        return;
 8007efa:	e010      	b.n	8007f1e <OSTaskNameSet+0x96>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d105      	bne.n	8007f0e <OSTaskNameSet+0x86>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8007f02:	f7f8 f925 	bl	8000150 <CPU_IntEn>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2243      	movs	r2, #67	@ 0x43
 8007f0a:	701a      	strb	r2, [r3, #0]
        return;
 8007f0c:	e007      	b.n	8007f1e <OSTaskNameSet+0x96>
    }
    ptcb->OSTCBTaskName = pname;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	651a      	str	r2, [r3, #80]	@ 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8007f14:	f7f8 f91c 	bl	8000150 <CPU_IntEn>
    *perr               = OS_ERR_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
}
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20001dd8 	.word	0x20001dd8
 8007f28:	20001ff0 	.word	0x20001ff0
 8007f2c:	20002000 	.word	0x20002000

08007f30 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f42:	d901      	bls.n	8007f48 <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8007f44:	232a      	movs	r3, #42	@ 0x2a
 8007f46:	e05b      	b.n	8008000 <OSTaskResume+0xd0>
    }
#endif
    OS_ENTER_CRITICAL();
 8007f48:	f7f8 f900 	bl	800014c <CPU_IntDis>
    ptcb = OSTCBPrioTbl[prio];
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8008008 <OSTaskResume+0xd8>)
 8007f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f54:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <OSTaskResume+0x34>
        OS_EXIT_CRITICAL();
 8007f5c:	f7f8 f8f8 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_RESUME_PRIO);
 8007f60:	2346      	movs	r3, #70	@ 0x46
 8007f62:	e04d      	b.n	8008000 <OSTaskResume+0xd0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d103      	bne.n	8007f72 <OSTaskResume+0x42>
        OS_EXIT_CRITICAL();
 8007f6a:	f7f8 f8f1 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8007f6e:	2343      	movs	r3, #67	@ 0x43
 8007f70:	e046      	b.n	8008000 <OSTaskResume+0xd0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d03c      	beq.n	8007ffa <OSTaskResume+0xca>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f86:	f023 0308 	bic.w	r3, r3, #8
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f98:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d128      	bne.n	8007ff2 <OSTaskResume+0xc2>
            if (ptcb->OSTCBDly == 0u) {
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d121      	bne.n	8007fec <OSTaskResume+0xbc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007fae:	4b17      	ldr	r3, [pc, #92]	@ (800800c <OSTaskResume+0xdc>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b15      	ldr	r3, [pc, #84]	@ (800800c <OSTaskResume+0xdc>)
 8007fb8:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b13      	ldr	r3, [pc, #76]	@ (8008010 <OSTaskResume+0xe0>)
 8007fc4:	5c9a      	ldrb	r2, [r3, r2]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008010 <OSTaskResume+0xe0>)
 8007fd8:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8007fda:	f7f8 f8b9 	bl	8000150 <CPU_IntEn>
                if (OSRunning == OS_TRUE) {
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <OSTaskResume+0xe4>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d107      	bne.n	8007ff6 <OSTaskResume+0xc6>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8007fe6:	f7ff f9a7 	bl	8007338 <OS_Sched>
 8007fea:	e004      	b.n	8007ff6 <OSTaskResume+0xc6>
                }
            } else {
                OS_EXIT_CRITICAL();
 8007fec:	f7f8 f8b0 	bl	8000150 <CPU_IntEn>
 8007ff0:	e001      	b.n	8007ff6 <OSTaskResume+0xc6>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8007ff2:	f7f8 f8ad 	bl	8000150 <CPU_IntEn>
        }
        return (OS_ERR_NONE);
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e002      	b.n	8008000 <OSTaskResume+0xd0>
    }
    OS_EXIT_CRITICAL();
 8007ffa:	f7f8 f8a9 	bl	8000150 <CPU_IntEn>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8007ffe:	2344      	movs	r3, #68	@ 0x44
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20002000 	.word	0x20002000
 800800c:	20001ddc 	.word	0x20001ddc
 8008010:	20001de0 	.word	0x20001de0
 8008014:	20001de8 	.word	0x20001de8

08008018 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	6039      	str	r1, [r7, #0]
 8008022:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b3f      	cmp	r3, #63	@ 0x3f
 800802c:	d904      	bls.n	8008038 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	2bff      	cmp	r3, #255	@ 0xff
 8008032:	d001      	beq.n	8008038 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8008034:	232a      	movs	r3, #42	@ 0x2a
 8008036:	e04e      	b.n	80080d6 <OSTaskStkChk+0xbe>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 800803e:	2309      	movs	r3, #9
 8008040:	e049      	b.n	80080d6 <OSTaskStkChk+0xbe>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 800804e:	f7f8 f87d 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2bff      	cmp	r3, #255	@ 0xff
 8008056:	d104      	bne.n	8008062 <OSTaskStkChk+0x4a>
        prio = OSTCBCur->OSTCBPrio;
 8008058:	4b21      	ldr	r3, [pc, #132]	@ (80080e0 <OSTaskStkChk+0xc8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008060:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	4a1f      	ldr	r2, [pc, #124]	@ (80080e4 <OSTaskStkChk+0xcc>)
 8008066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806a:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <OSTaskStkChk+0x62>
        OS_EXIT_CRITICAL();
 8008072:	f7f8 f86d 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008076:	2343      	movs	r3, #67	@ 0x43
 8008078:	e02d      	b.n	80080d6 <OSTaskStkChk+0xbe>
    }
    if (ptcb == OS_TCB_RESERVED) {
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d103      	bne.n	8008088 <OSTaskStkChk+0x70>
        OS_EXIT_CRITICAL();
 8008080:	f7f8 f866 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008084:	2343      	movs	r3, #67	@ 0x43
 8008086:	e026      	b.n	80080d6 <OSTaskStkChk+0xbe>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	8a1b      	ldrh	r3, [r3, #16]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <OSTaskStkChk+0x84>
        OS_EXIT_CRITICAL();
 8008094:	f7f8 f85c 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_OPT);
 8008098:	2345      	movs	r3, #69	@ 0x45
 800809a:	e01c      	b.n	80080d6 <OSTaskStkChk+0xbe>
    }
    nfree = 0u;
 800809c:	2300      	movs	r3, #0
 800809e:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 80080ac:	f7f8 f850 	bl	8000150 <CPU_IntEn>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80080b0:	e002      	b.n	80080b8 <OSTaskStkChk+0xa0>
        nfree++;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	3301      	adds	r3, #1
 80080b6:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	61fa      	str	r2, [r7, #28]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f6      	beq.n	80080b2 <OSTaskStkChk+0x9a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20001ff0 	.word	0x20001ff0
 80080e4:	20002000 	.word	0x20002000

080080e8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80080fa:	d101      	bne.n	8008100 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 80080fc:	2347      	movs	r3, #71	@ 0x47
 80080fe:	e065      	b.n	80081cc <OSTaskSuspend+0xe4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b3e      	cmp	r3, #62	@ 0x3e
 8008104:	d904      	bls.n	8008110 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2bff      	cmp	r3, #255	@ 0xff
 800810a:	d001      	beq.n	8008110 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 800810c:	232a      	movs	r3, #42	@ 0x2a
 800810e:	e05d      	b.n	80081cc <OSTaskSuspend+0xe4>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8008110:	f7f8 f81c 	bl	800014c <CPU_IntDis>
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2bff      	cmp	r3, #255	@ 0xff
 8008118:	d107      	bne.n	800812a <OSTaskSuspend+0x42>
        prio = OSTCBCur->OSTCBPrio;
 800811a:	4b2e      	ldr	r3, [pc, #184]	@ (80081d4 <OSTaskSuspend+0xec>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008122:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]
 8008128:	e00b      	b.n	8008142 <OSTaskSuspend+0x5a>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800812a:	4b2a      	ldr	r3, [pc, #168]	@ (80081d4 <OSTaskSuspend+0xec>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008132:	79fa      	ldrb	r2, [r7, #7]
 8008134:	429a      	cmp	r2, r3
 8008136:	d102      	bne.n	800813e <OSTaskSuspend+0x56>
        self = OS_TRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
 800813c:	e001      	b.n	8008142 <OSTaskSuspend+0x5a>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	4a24      	ldr	r2, [pc, #144]	@ (80081d8 <OSTaskSuspend+0xf0>)
 8008146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800814a:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <OSTaskSuspend+0x72>
        OS_EXIT_CRITICAL();
 8008152:	f7f7 fffd 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8008156:	2348      	movs	r3, #72	@ 0x48
 8008158:	e038      	b.n	80081cc <OSTaskSuspend+0xe4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d103      	bne.n	8008168 <OSTaskSuspend+0x80>
        OS_EXIT_CRITICAL();
 8008160:	f7f7 fff6 	bl	8000150 <CPU_IntEn>
        return (OS_ERR_TASK_NOT_EXIST);
 8008164:	2343      	movs	r3, #67	@ 0x43
 8008166:	e031      	b.n	80081cc <OSTaskSuspend+0xe4>
    }
    y            = ptcb->OSTCBY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800816e:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	4a1a      	ldr	r2, [pc, #104]	@ (80081dc <OSTaskSuspend+0xf4>)
 8008174:	5cd1      	ldrb	r1, [r2, r3]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800817c:	43db      	mvns	r3, r3
 800817e:	b2da      	uxtb	r2, r3
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	400a      	ands	r2, r1
 8008184:	b2d1      	uxtb	r1, r2
 8008186:	4a15      	ldr	r2, [pc, #84]	@ (80081dc <OSTaskSuspend+0xf4>)
 8008188:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	4a13      	ldr	r2, [pc, #76]	@ (80081dc <OSTaskSuspend+0xf4>)
 800818e:	5cd3      	ldrb	r3, [r2, r3]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <OSTaskSuspend+0xc2>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800819a:	43db      	mvns	r3, r3
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <OSTaskSuspend+0xf8>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	4013      	ands	r3, r2
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <OSTaskSuspend+0xf8>)
 80081a8:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081b0:	f043 0308 	orr.w	r3, r3, #8
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    OS_EXIT_CRITICAL();
 80081bc:	f7f7 ffc8 	bl	8000150 <CPU_IntEn>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <OSTaskSuspend+0xe2>
        OS_Sched();                                             /* Find new highest priority task      */
 80081c6:	f7ff f8b7 	bl	8007338 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20001ff0 	.word	0x20001ff0
 80081d8:	20002000 	.word	0x20002000
 80081dc:	20001de0 	.word	0x20001de0
 80081e0:	20001ddc 	.word	0x20001ddc

080081e4 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 80081e8:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <OS_TaskReturn+0x18>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fabf 	bl	8006770 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 80081f2:	20ff      	movs	r0, #255	@ 0xff
 80081f4:	f7ff fd58 	bl	8007ca8 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 80081f8:	bf00      	nop
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20001ff0 	.word	0x20001ff0

08008200 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d010      	beq.n	800823a <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00b      	beq.n	800823a <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008222:	e007      	b.n	8008234 <OS_TaskStkClr+0x34>
                size--;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3b01      	subs	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	60fa      	str	r2, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f4      	bne.n	8008224 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8008250:	4b1f      	ldr	r3, [pc, #124]	@ (80082d0 <OSTimeDly+0x8c>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d135      	bne.n	80082c4 <OSTimeDly+0x80>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8008258:	4b1e      	ldr	r3, [pc, #120]	@ (80082d4 <OSTimeDly+0x90>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d133      	bne.n	80082c8 <OSTimeDly+0x84>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d031      	beq.n	80082ca <OSTimeDly+0x86>
        OS_ENTER_CRITICAL();
 8008266:	f7f7 ff71 	bl	800014c <CPU_IntDis>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 800826a:	4b1b      	ldr	r3, [pc, #108]	@ (80082d8 <OSTimeDly+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008272:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	4a19      	ldr	r2, [pc, #100]	@ (80082dc <OSTimeDly+0x98>)
 8008278:	5cd1      	ldrb	r1, [r2, r3]
 800827a:	4b17      	ldr	r3, [pc, #92]	@ (80082d8 <OSTimeDly+0x94>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008282:	43db      	mvns	r3, r3
 8008284:	b2da      	uxtb	r2, r3
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	400a      	ands	r2, r1
 800828a:	b2d1      	uxtb	r1, r2
 800828c:	4a13      	ldr	r2, [pc, #76]	@ (80082dc <OSTimeDly+0x98>)
 800828e:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	4a12      	ldr	r2, [pc, #72]	@ (80082dc <OSTimeDly+0x98>)
 8008294:	5cd3      	ldrb	r3, [r2, r3]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <OSTimeDly+0x6e>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800829a:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <OSTimeDly+0x94>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80082a2:	43db      	mvns	r3, r3
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	4b0e      	ldr	r3, [pc, #56]	@ (80082e0 <OSTimeDly+0x9c>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	4013      	ands	r3, r2
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <OSTimeDly+0x9c>)
 80082b0:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <OSTimeDly+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	631a      	str	r2, [r3, #48]	@ 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 80082ba:	f7f7 ff49 	bl	8000150 <CPU_IntEn>
        OS_Sched();                              /* Find next task to run!                             */
 80082be:	f7ff f83b 	bl	8007338 <OS_Sched>
 80082c2:	e002      	b.n	80082ca <OSTimeDly+0x86>
        return;
 80082c4:	bf00      	nop
 80082c6:	e000      	b.n	80082ca <OSTimeDly+0x86>
        return;
 80082c8:	bf00      	nop
    }
}
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20001dd8 	.word	0x20001dd8
 80082d4:	20001dd9 	.word	0x20001dd9
 80082d8:	20001ff0 	.word	0x20001ff0
 80082dc:	20001de0 	.word	0x20001de0
 80082e0:	20001ddc 	.word	0x20001ddc

080082e4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80082ee:	f7f7 ff2d 	bl	800014c <CPU_IntDis>
    ticks = OSTime;
 80082f2:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <OSTimeGet+0x24>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 80082f8:	f7f7 ff2a 	bl	8000150 <CPU_IntEn>
    return (ticks);
 80082fc:	683b      	ldr	r3, [r7, #0]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20002978 	.word	0x20002978

0800830c <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8008312:	4b06      	ldr	r3, [pc, #24]	@ (800832c <OSTmrSignal+0x20>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fbcc 	bl	8007ab4 <OSSemPost>
 800831c:	4603      	mov	r3, r0
 800831e:	71fb      	strb	r3, [r7, #7]
    return (err);
 8008320:	79fb      	ldrb	r3, [r7, #7]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20002988 	.word	0x20002988

08008330 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8008336:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800833a:	4838      	ldr	r0, [pc, #224]	@ (800841c <OSTmr_Init+0xec>)
 800833c:	f7fe ffe4 	bl	8007308 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8008340:	2138      	movs	r1, #56	@ 0x38
 8008342:	4837      	ldr	r0, [pc, #220]	@ (8008420 <OSTmr_Init+0xf0>)
 8008344:	f7fe ffe0 	bl	8007308 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8008348:	2300      	movs	r3, #0
 800834a:	82fb      	strh	r3, [r7, #22]
 800834c:	e022      	b.n	8008394 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	3301      	adds	r3, #1
 8008352:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8008354:	8afa      	ldrh	r2, [r7, #22]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	4a2f      	ldr	r2, [pc, #188]	@ (800841c <OSTmr_Init+0xec>)
 8008360:	4413      	add	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8008364:	89fa      	ldrh	r2, [r7, #14]
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	4a2b      	ldr	r2, [pc, #172]	@ (800841c <OSTmr_Init+0xec>)
 8008370:	4413      	add	r3, r2
 8008372:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2264      	movs	r2, #100	@ 0x64
 8008378:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4a26      	ldr	r2, [pc, #152]	@ (8008424 <OSTmr_Init+0xf4>)
 800838c:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	3301      	adds	r3, #1
 8008392:	82fb      	strh	r3, [r7, #22]
 8008394:	8afb      	ldrh	r3, [r7, #22]
 8008396:	2b0e      	cmp	r3, #14
 8008398:	d9d9      	bls.n	800834e <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800839a:	8afa      	ldrh	r2, [r7, #22]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4a1d      	ldr	r2, [pc, #116]	@ (800841c <OSTmr_Init+0xec>)
 80083a6:	4413      	add	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2264      	movs	r2, #100	@ 0x64
 80083ae:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2200      	movs	r2, #0
 80083bc:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <OSTmr_Init+0xf4>)
 80083c2:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80083c4:	4b18      	ldr	r3, [pc, #96]	@ (8008428 <OSTmr_Init+0xf8>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 80083ca:	4b18      	ldr	r3, [pc, #96]	@ (800842c <OSTmr_Init+0xfc>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80083d0:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <OSTmr_Init+0x100>)
 80083d2:	2210      	movs	r2, #16
 80083d4:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80083d6:	4b17      	ldr	r3, [pc, #92]	@ (8008434 <OSTmr_Init+0x104>)
 80083d8:	4a10      	ldr	r2, [pc, #64]	@ (800841c <OSTmr_Init+0xec>)
 80083da:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80083dc:	2001      	movs	r0, #1
 80083de:	f7ff faa1 	bl	8007924 <OSSemCreate>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a14      	ldr	r2, [pc, #80]	@ (8008438 <OSTmr_Init+0x108>)
 80083e6:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80083e8:	2000      	movs	r0, #0
 80083ea:	f7ff fa9b 	bl	8007924 <OSSemCreate>
 80083ee:	4603      	mov	r3, r0
 80083f0:	4a12      	ldr	r2, [pc, #72]	@ (800843c <OSTmr_Init+0x10c>)
 80083f2:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80083f4:	4b10      	ldr	r3, [pc, #64]	@ (8008438 <OSTmr_Init+0x108>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	1dfa      	adds	r2, r7, #7
 80083fa:	4911      	ldr	r1, [pc, #68]	@ (8008440 <OSTmr_Init+0x110>)
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe facf 	bl	80069a0 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 8008402:	4b0e      	ldr	r3, [pc, #56]	@ (800843c <OSTmr_Init+0x10c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	1dfa      	adds	r2, r7, #7
 8008408:	490e      	ldr	r1, [pc, #56]	@ (8008444 <OSTmr_Init+0x114>)
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fac8 	bl	80069a0 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8008410:	f000 f81a 	bl	8008448 <OSTmr_InitTask>
}
 8008414:	bf00      	nop
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	2000298c 	.word	0x2000298c
 8008420:	20002e10 	.word	0x20002e10
 8008424:	0800b184 	.word	0x0800b184
 8008428:	20002980 	.word	0x20002980
 800842c:	2000297e 	.word	0x2000297e
 8008430:	2000297c 	.word	0x2000297c
 8008434:	20002c0c 	.word	0x20002c0c
 8008438:	20002984 	.word	0x20002984
 800843c:	20002988 	.word	0x20002988
 8008440:	0800b188 	.word	0x0800b188
 8008444:	0800b19c 	.word	0x0800b19c

08008448 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 800844e:	2303      	movs	r3, #3
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	2300      	movs	r3, #0
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	2380      	movs	r3, #128	@ 0x80
 8008458:	9302      	str	r3, [sp, #8]
 800845a:	4b0a      	ldr	r3, [pc, #40]	@ (8008484 <OSTmr_InitTask+0x3c>)
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	233d      	movs	r3, #61	@ 0x3d
 8008466:	4a08      	ldr	r2, [pc, #32]	@ (8008488 <OSTmr_InitTask+0x40>)
 8008468:	2100      	movs	r1, #0
 800846a:	4808      	ldr	r0, [pc, #32]	@ (800848c <OSTmr_InitTask+0x44>)
 800846c:	f7ff fbb8 	bl	8007be0 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8008470:	1dfb      	adds	r3, r7, #7
 8008472:	461a      	mov	r2, r3
 8008474:	4906      	ldr	r1, [pc, #24]	@ (8008490 <OSTmr_InitTask+0x48>)
 8008476:	203d      	movs	r0, #61	@ 0x3d
 8008478:	f7ff fd06 	bl	8007e88 <OSTaskNameSet>
#endif
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20002c10 	.word	0x20002c10
 8008488:	20002e0c 	.word	0x20002e0c
 800848c:	0800860d 	.word	0x0800860d
 8008490:	0800b1b0 	.word	0x0800b1b0

08008494 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2203      	movs	r2, #3
 80084a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d107      	bne.n	80084be <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	4b2a      	ldr	r3, [pc, #168]	@ (800855c <OSTmr_Link+0xc8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	441a      	add	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	615a      	str	r2, [r3, #20]
 80084bc:	e012      	b.n	80084e4 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d107      	bne.n	80084d6 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69da      	ldr	r2, [r3, #28]
 80084ca:	4b24      	ldr	r3, [pc, #144]	@ (800855c <OSTmr_Link+0xc8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	441a      	add	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	615a      	str	r2, [r3, #20]
 80084d4:	e006      	b.n	80084e4 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	4b20      	ldr	r3, [pc, #128]	@ (800855c <OSTmr_Link+0xc8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	441a      	add	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008560 <OSTmr_Link+0xcc>)
 80084ea:	fba3 1302 	umull	r1, r3, r3, r2
 80084ee:	1ad1      	subs	r1, r2, r3
 80084f0:	0849      	lsrs	r1, r1, #1
 80084f2:	440b      	add	r3, r1
 80084f4:	0899      	lsrs	r1, r3, #2
 80084f6:	460b      	mov	r3, r1
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	1a5b      	subs	r3, r3, r1
 80084fc:	1ad1      	subs	r1, r2, r3
 80084fe:	460b      	mov	r3, r1
 8008500:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8008502:	8afb      	ldrh	r3, [r7, #22]
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	4a17      	ldr	r2, [pc, #92]	@ (8008564 <OSTmr_Link+0xd0>)
 8008508:	4413      	add	r3, r2
 800850a:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d109      	bne.n	8008528 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2201      	movs	r2, #1
 8008524:	809a      	strh	r2, [r3, #4]
 8008526:	e011      	b.n	800854c <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	889b      	ldrh	r3, [r3, #4]
 8008544:	3301      	adds	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	611a      	str	r2, [r3, #16]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr
 800855c:	20002980 	.word	0x20002980
 8008560:	24924925 	.word	0x24924925
 8008564:	20002e10 	.word	0x20002e10

08008568 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695a      	ldr	r2, [r3, #20]
 8008574:	4b23      	ldr	r3, [pc, #140]	@ (8008604 <OSTmr_Unlink+0x9c>)
 8008576:	fba3 1302 	umull	r1, r3, r3, r2
 800857a:	1ad1      	subs	r1, r2, r3
 800857c:	0849      	lsrs	r1, r1, #1
 800857e:	440b      	add	r3, r1
 8008580:	0899      	lsrs	r1, r3, #2
 8008582:	460b      	mov	r3, r1
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	1a5b      	subs	r3, r3, r1
 8008588:	1ad1      	subs	r1, r2, r3
 800858a:	460b      	mov	r3, r1
 800858c:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800858e:	8afb      	ldrh	r3, [r7, #22]
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <OSTmr_Unlink+0xa0>)
 8008594:	4413      	add	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d10c      	bne.n	80085bc <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d012      	beq.n	80085da <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
 80085ba:	e00e      	b.n	80085da <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	889b      	ldrh	r3, [r3, #4]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	809a      	strh	r2, [r3, #4]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr
 8008604:	24924925 	.word	0x24924925
 8008608:	20002e10 	.word	0x20002e10

0800860c <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8008614:	4b2a      	ldr	r3, [pc, #168]	@ (80086c0 <OSTmr_Task+0xb4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f107 020b 	add.w	r2, r7, #11
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff f9ba 	bl	8007998 <OSSemPend>
        OSSchedLock();
 8008624:	f7fe fa7a 	bl	8006b1c <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8008628:	4b26      	ldr	r3, [pc, #152]	@ (80086c4 <OSTmr_Task+0xb8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a25      	ldr	r2, [pc, #148]	@ (80086c4 <OSTmr_Task+0xb8>)
 8008630:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <OSTmr_Task+0xb8>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4b24      	ldr	r3, [pc, #144]	@ (80086c8 <OSTmr_Task+0xbc>)
 8008638:	fba3 1302 	umull	r1, r3, r3, r2
 800863c:	1ad1      	subs	r1, r2, r3
 800863e:	0849      	lsrs	r1, r1, #1
 8008640:	440b      	add	r3, r1
 8008642:	0899      	lsrs	r1, r3, #2
 8008644:	460b      	mov	r3, r1
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	1a5b      	subs	r3, r3, r1
 800864a:	1ad1      	subs	r1, r2, r3
 800864c:	460b      	mov	r3, r1
 800864e:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8008650:	8b7b      	ldrh	r3, [r7, #26]
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4a1d      	ldr	r2, [pc, #116]	@ (80086cc <OSTmr_Task+0xc0>)
 8008656:	4413      	add	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8008660:	e027      	b.n	80086b2 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	695a      	ldr	r2, [r3, #20]
 800866c:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <OSTmr_Task+0xb8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d11c      	bne.n	80086ae <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8008674:	69f8      	ldr	r0, [r7, #28]
 8008676:	f7ff ff77 	bl	8008568 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008680:	2b02      	cmp	r3, #2
 8008682:	d104      	bne.n	800868e <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8008684:	2101      	movs	r1, #1
 8008686:	69f8      	ldr	r0, [r7, #28]
 8008688:	f7ff ff04 	bl	8008494 <OSTmr_Link>
 800868c:	e003      	b.n	8008696 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	2202      	movs	r2, #2
 8008692:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4611      	mov	r1, r2
 80086aa:	69f8      	ldr	r0, [r7, #28]
 80086ac:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1d4      	bne.n	8008662 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 80086b8:	f7fe fa56 	bl	8006b68 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80086bc:	e7aa      	b.n	8008614 <OSTmr_Task+0x8>
 80086be:	bf00      	nop
 80086c0:	20002988 	.word	0x20002988
 80086c4:	20002980 	.word	0x20002980
 80086c8:	24924925 	.word	0x24924925
 80086cc:	20002e10 	.word	0x20002e10

080086d0 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr

0800871e <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 8008722:	bf00      	nop
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr

0800872a <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7c1b      	ldrb	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d115      	bne.n	800878c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008764:	2202      	movs	r2, #2
 8008766:	2181      	movs	r1, #129	@ 0x81
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fe82 	bl	800a472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008778:	2202      	movs	r2, #2
 800877a:	2101      	movs	r1, #1
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fe78 	bl	800a472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800878a:	e012      	b.n	80087b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800878c:	2340      	movs	r3, #64	@ 0x40
 800878e:	2202      	movs	r2, #2
 8008790:	2181      	movs	r1, #129	@ 0x81
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fe6d 	bl	800a472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800879e:	2340      	movs	r3, #64	@ 0x40
 80087a0:	2202      	movs	r2, #2
 80087a2:	2101      	movs	r1, #1
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fe64 	bl	800a472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087b2:	2308      	movs	r3, #8
 80087b4:	2203      	movs	r2, #3
 80087b6:	2182      	movs	r1, #130	@ 0x82
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fe5a 	bl	800a472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80087c8:	f001 ff7a 	bl	800a6c0 <USBD_static_malloc>
 80087cc:	4602      	mov	r2, r0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80087de:	2301      	movs	r3, #1
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	e026      	b.n	8008832 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7c1b      	ldrb	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008818:	2101      	movs	r1, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 ff1a 	bl	800a654 <USBD_LL_PrepareReceive>
 8008820:	e007      	b.n	8008832 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008828:	2340      	movs	r3, #64	@ 0x40
 800882a:	2101      	movs	r1, #1
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 ff11 	bl	800a654 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800884c:	2181      	movs	r1, #129	@ 0x81
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fe35 	bl	800a4be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800885a:	2101      	movs	r1, #1
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fe2e 	bl	800a4be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800886a:	2182      	movs	r1, #130	@ 0x82
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fe26 	bl	800a4be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00e      	beq.n	80088a0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008892:	4618      	mov	r0, r3
 8008894:	f001 ff20 	bl	800a6d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d039      	beq.n	8008948 <USBD_CDC_Setup+0x9e>
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d17f      	bne.n	80089d8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	88db      	ldrh	r3, [r3, #6]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d029      	beq.n	8008934 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da11      	bge.n	800890e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80088f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	88d2      	ldrh	r2, [r2, #6]
 80088fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088fe:	6939      	ldr	r1, [r7, #16]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	461a      	mov	r2, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fa06 	bl	8009d18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800890c:	e06b      	b.n	80089e6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	785a      	ldrb	r2, [r3, #1]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008924:	6939      	ldr	r1, [r7, #16]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	461a      	mov	r2, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fa21 	bl	8009d74 <USBD_CtlPrepareRx>
      break;
 8008932:	e058      	b.n	80089e6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	7850      	ldrb	r0, [r2, #1]
 8008940:	2200      	movs	r2, #0
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	4798      	blx	r3
      break;
 8008946:	e04e      	b.n	80089e6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	2b0b      	cmp	r3, #11
 800894e:	d02e      	beq.n	80089ae <USBD_CDC_Setup+0x104>
 8008950:	2b0b      	cmp	r3, #11
 8008952:	dc38      	bgt.n	80089c6 <USBD_CDC_Setup+0x11c>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <USBD_CDC_Setup+0xb4>
 8008958:	2b0a      	cmp	r3, #10
 800895a:	d014      	beq.n	8008986 <USBD_CDC_Setup+0xdc>
 800895c:	e033      	b.n	80089c6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008964:	2b03      	cmp	r3, #3
 8008966:	d107      	bne.n	8008978 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008968:	f107 030c 	add.w	r3, r7, #12
 800896c:	2202      	movs	r2, #2
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f9d1 	bl	8009d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008976:	e02e      	b.n	80089d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f962 	bl	8009c44 <USBD_CtlError>
            ret = USBD_FAIL;
 8008980:	2302      	movs	r3, #2
 8008982:	75fb      	strb	r3, [r7, #23]
          break;
 8008984:	e027      	b.n	80089d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800898c:	2b03      	cmp	r3, #3
 800898e:	d107      	bne.n	80089a0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008990:	f107 030f 	add.w	r3, r7, #15
 8008994:	2201      	movs	r2, #1
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 f9bd 	bl	8009d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800899e:	e01a      	b.n	80089d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f94e 	bl	8009c44 <USBD_CtlError>
            ret = USBD_FAIL;
 80089a8:	2302      	movs	r3, #2
 80089aa:	75fb      	strb	r3, [r7, #23]
          break;
 80089ac:	e013      	b.n	80089d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d00d      	beq.n	80089d4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 f942 	bl	8009c44 <USBD_CtlError>
            ret = USBD_FAIL;
 80089c0:	2302      	movs	r3, #2
 80089c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089c4:	e006      	b.n	80089d4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f93b 	bl	8009c44 <USBD_CtlError>
          ret = USBD_FAIL;
 80089ce:	2302      	movs	r3, #2
 80089d0:	75fb      	strb	r3, [r7, #23]
          break;
 80089d2:	e000      	b.n	80089d6 <USBD_CDC_Setup+0x12c>
          break;
 80089d4:	bf00      	nop
      }
      break;
 80089d6:	e006      	b.n	80089e6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 f932 	bl	8009c44 <USBD_CtlError>
      ret = USBD_FAIL;
 80089e0:	2302      	movs	r3, #2
 80089e2:	75fb      	strb	r3, [r7, #23]
      break;
 80089e4:	bf00      	nop
  }

  return ret;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a02:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a0a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d03a      	beq.n	8008a8c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	331c      	adds	r3, #28
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d029      	beq.n	8008a80 <USBD_CDC_DataIn+0x90>
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	331c      	adds	r3, #28
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78f9      	ldrb	r1, [r7, #3]
 8008a40:	68b8      	ldr	r0, [r7, #8]
 8008a42:	460b      	mov	r3, r1
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	4403      	add	r3, r0
 8008a4c:	3338      	adds	r3, #56	@ 0x38
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a54:	fb01 f303 	mul.w	r3, r1, r3
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d110      	bne.n	8008a80 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	331c      	adds	r3, #28
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a72:	78f9      	ldrb	r1, [r7, #3]
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 fdc8 	bl	800a60e <USBD_LL_Transmit>
 8008a7e:	e003      	b.n	8008a88 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e000      	b.n	8008a8e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a8c:	2302      	movs	r3, #2
  }
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fdf3 	bl	800a69a <USBD_LL_GetRxDataSize>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008ada:	4611      	mov	r1, r2
 8008adc:	4798      	blx	r3

    return USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
  }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d014      	beq.n	8008b30 <USBD_CDC_EP0_RxReady+0x44>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b0c:	2bff      	cmp	r3, #255	@ 0xff
 8008b0e:	d00f      	beq.n	8008b30 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	22ff      	movs	r2, #255	@ 0xff
 8008b2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2243      	movs	r2, #67	@ 0x43
 8008b48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	@ (8008b58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	20000170 	.word	0x20000170

08008b5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2243      	movs	r2, #67	@ 0x43
 8008b68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b6a:	4b03      	ldr	r3, [pc, #12]	@ (8008b78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	2000012c 	.word	0x2000012c

08008b7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2243      	movs	r2, #67	@ 0x43
 8008b88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b8a:	4b03      	ldr	r3, [pc, #12]	@ (8008b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	200001b4 	.word	0x200001b4

08008b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	220a      	movs	r2, #10
 8008ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	@ (8008bb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	200000e8 	.word	0x200000e8

08008bbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bfc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr

08008c1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01c      	beq.n	8008c94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d115      	bne.n	8008c90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	2181      	movs	r1, #129	@ 0x81
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fcc1 	bl	800a60e <USBD_LL_Transmit>

      return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e002      	b.n	8008c96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008c94:	2302      	movs	r3, #2
  }
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d017      	beq.n	8008ce8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cca:	2101      	movs	r1, #1
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fcc1 	bl	800a654 <USBD_LL_PrepareReceive>
 8008cd2:	e007      	b.n	8008ce4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cda:	2340      	movs	r3, #64	@ 0x40
 8008cdc:	2101      	movs	r1, #1
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fcb8 	bl	800a654 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e000      	b.n	8008cea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008ce8:	2302      	movs	r3, #2
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	e01a      	b.n	8008d40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	79fa      	ldrb	r2, [r7, #7]
 8008d36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f001 fb25 	bl	800a388 <USBD_LL_Init>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d006      	beq.n	8008d6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	e001      	b.n	8008d6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr

08008d7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fb5a 	bl	800a43c <USBD_LL_Start>

  return USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr

08008da6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008db2:	2302      	movs	r3, #2
 8008db4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00c      	beq.n	8008dda <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fed8 	bl	8009bd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e30:	461a      	mov	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d016      	beq.n	8008e74 <USBD_LL_SetupStage+0x6a>
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d81c      	bhi.n	8008e84 <USBD_LL_SetupStage+0x7a>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <USBD_LL_SetupStage+0x4a>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d008      	beq.n	8008e64 <USBD_LL_SetupStage+0x5a>
 8008e52:	e017      	b.n	8008e84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f9cb 	bl	80091f8 <USBD_StdDevReq>
      break;
 8008e62:	e01a      	b.n	8008e9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa2d 	bl	80092cc <USBD_StdItfReq>
      break;
 8008e72:	e012      	b.n	8008e9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fa6d 	bl	800935c <USBD_StdEPReq>
      break;
 8008e82:	e00a      	b.n	8008e9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008e8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 fb32 	bl	800a4fc <USBD_LL_StallEP>
      break;
 8008e98:	bf00      	nop
  }

  return USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	460b      	mov	r3, r1
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d14b      	bne.n	8008f50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ebe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d134      	bne.n	8008f34 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d919      	bls.n	8008f0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d203      	bcs.n	8008ef8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	e002      	b.n	8008efe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 ff54 	bl	8009db0 <USBD_CtlContinueRx>
 8008f08:	e038      	b.n	8008f7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d105      	bne.n	8008f2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 ff51 	bl	8009dd4 <USBD_CtlSendStatus>
 8008f32:	e023      	b.n	8008f7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d11e      	bne.n	8008f7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f001 fad7 	bl	800a4fc <USBD_LL_StallEP>
 8008f4e:	e015      	b.n	8008f7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00d      	beq.n	8008f78 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d108      	bne.n	8008f78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	7afa      	ldrb	r2, [r7, #11]
 8008f70:	4611      	mov	r1, r2
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3
 8008f76:	e001      	b.n	8008f7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e000      	b.n	8008f7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b086      	sub	sp, #24
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d17f      	bne.n	800909a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3314      	adds	r3, #20
 8008f9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d15c      	bne.n	8009064 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d915      	bls.n	8008fe2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 febe 	bl	8009d50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f001 fb3a 	bl	800a654 <USBD_LL_PrepareReceive>
 8008fe0:	e04e      	b.n	8009080 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	6912      	ldr	r2, [r2, #16]
 8008fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fee:	fb01 f202 	mul.w	r2, r1, r2
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11c      	bne.n	8009032 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009000:	429a      	cmp	r2, r3
 8009002:	d316      	bcc.n	8009032 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800900e:	429a      	cmp	r2, r3
 8009010:	d20f      	bcs.n	8009032 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fe9a 	bl	8009d50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009024:	2300      	movs	r3, #0
 8009026:	2200      	movs	r2, #0
 8009028:	2100      	movs	r1, #0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f001 fb12 	bl	800a654 <USBD_LL_PrepareReceive>
 8009030:	e026      	b.n	8009080 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009044:	2b03      	cmp	r3, #3
 8009046:	d105      	bne.n	8009054 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009054:	2180      	movs	r1, #128	@ 0x80
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f001 fa50 	bl	800a4fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 fecc 	bl	8009dfa <USBD_CtlReceiveStatus>
 8009062:	e00d      	b.n	8009080 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800906a:	2b04      	cmp	r3, #4
 800906c:	d004      	beq.n	8009078 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d103      	bne.n	8009080 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009078:	2180      	movs	r1, #128	@ 0x80
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f001 fa3e 	bl	800a4fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009086:	2b01      	cmp	r3, #1
 8009088:	d11d      	bne.n	80090c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fe81 	bl	8008d92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009098:	e015      	b.n	80090c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d108      	bne.n	80090c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	7afa      	ldrb	r2, [r7, #11]
 80090ba:	4611      	mov	r1, r2
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	4798      	blx	r3
 80090c0:	e001      	b.n	80090c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	e000      	b.n	80090c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090d8:	2340      	movs	r3, #64	@ 0x40
 80090da:	2200      	movs	r2, #0
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 f9c7 	bl	800a472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2240      	movs	r2, #64	@ 0x40
 80090f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090f4:	2340      	movs	r3, #64	@ 0x40
 80090f6:	2200      	movs	r2, #0
 80090f8:	2180      	movs	r1, #128	@ 0x80
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 f9b9 	bl	800a472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2240      	movs	r2, #64	@ 0x40
 800910a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009130:	2b00      	cmp	r3, #0
 8009132:	d009      	beq.n	8009148 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6852      	ldr	r2, [r2, #4]
 8009140:	b2d2      	uxtb	r2, r2
 8009142:	4611      	mov	r1, r2
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
  }

  return USBD_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2204      	movs	r2, #4
 8009188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d105      	bne.n	80091b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr

080091c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d10b      	bne.n	80091ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800920e:	2b40      	cmp	r3, #64	@ 0x40
 8009210:	d005      	beq.n	800921e <USBD_StdDevReq+0x26>
 8009212:	2b40      	cmp	r3, #64	@ 0x40
 8009214:	d84f      	bhi.n	80092b6 <USBD_StdDevReq+0xbe>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <USBD_StdDevReq+0x36>
 800921a:	2b20      	cmp	r3, #32
 800921c:	d14b      	bne.n	80092b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
      break;
 800922c:	e048      	b.n	80092c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	2b09      	cmp	r3, #9
 8009234:	d839      	bhi.n	80092aa <USBD_StdDevReq+0xb2>
 8009236:	a201      	add	r2, pc, #4	@ (adr r2, 800923c <USBD_StdDevReq+0x44>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	0800928d 	.word	0x0800928d
 8009240:	080092a1 	.word	0x080092a1
 8009244:	080092ab 	.word	0x080092ab
 8009248:	08009297 	.word	0x08009297
 800924c:	080092ab 	.word	0x080092ab
 8009250:	0800926f 	.word	0x0800926f
 8009254:	08009265 	.word	0x08009265
 8009258:	080092ab 	.word	0x080092ab
 800925c:	08009283 	.word	0x08009283
 8009260:	08009279 	.word	0x08009279
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f9dc 	bl	8009624 <USBD_GetDescriptor>
          break;
 800926c:	e022      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fb3f 	bl	80098f4 <USBD_SetAddress>
          break;
 8009276:	e01d      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb7e 	bl	800997c <USBD_SetConfig>
          break;
 8009280:	e018      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fc07 	bl	8009a98 <USBD_GetConfig>
          break;
 800928a:	e013      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fc37 	bl	8009b02 <USBD_GetStatus>
          break;
 8009294:	e00e      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fc65 	bl	8009b68 <USBD_SetFeature>
          break;
 800929e:	e009      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fc74 	bl	8009b90 <USBD_ClrFeature>
          break;
 80092a8:	e004      	b.n	80092b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fcc9 	bl	8009c44 <USBD_CtlError>
          break;
 80092b2:	bf00      	nop
      }
      break;
 80092b4:	e004      	b.n	80092c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fcc3 	bl	8009c44 <USBD_CtlError>
      break;
 80092be:	bf00      	nop
  }

  return ret;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop

080092cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092e2:	2b40      	cmp	r3, #64	@ 0x40
 80092e4:	d005      	beq.n	80092f2 <USBD_StdItfReq+0x26>
 80092e6:	2b40      	cmp	r3, #64	@ 0x40
 80092e8:	d82e      	bhi.n	8009348 <USBD_StdItfReq+0x7c>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <USBD_StdItfReq+0x26>
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	d12a      	bne.n	8009348 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f8:	3b01      	subs	r3, #1
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d81d      	bhi.n	800933a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	889b      	ldrh	r3, [r3, #4]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b01      	cmp	r3, #1
 8009306:	d813      	bhi.n	8009330 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	88db      	ldrh	r3, [r3, #6]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d110      	bne.n	8009344 <USBD_StdItfReq+0x78>
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10d      	bne.n	8009344 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fd53 	bl	8009dd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800932e:	e009      	b.n	8009344 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fc86 	bl	8009c44 <USBD_CtlError>
          break;
 8009338:	e004      	b.n	8009344 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc81 	bl	8009c44 <USBD_CtlError>
          break;
 8009342:	e000      	b.n	8009346 <USBD_StdItfReq+0x7a>
          break;
 8009344:	bf00      	nop
      }
      break;
 8009346:	e004      	b.n	8009352 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc7a 	bl	8009c44 <USBD_CtlError>
      break;
 8009350:	bf00      	nop
  }

  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	889b      	ldrh	r3, [r3, #4]
 800936e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009378:	2b40      	cmp	r3, #64	@ 0x40
 800937a:	d007      	beq.n	800938c <USBD_StdEPReq+0x30>
 800937c:	2b40      	cmp	r3, #64	@ 0x40
 800937e:	f200 8146 	bhi.w	800960e <USBD_StdEPReq+0x2b2>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <USBD_StdEPReq+0x40>
 8009386:	2b20      	cmp	r3, #32
 8009388:	f040 8141 	bne.w	800960e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
      break;
 800939a:	e13d      	b.n	8009618 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	d10a      	bne.n	80093be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	e12d      	b.n	800961a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d007      	beq.n	80093d6 <USBD_StdEPReq+0x7a>
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	f300 811b 	bgt.w	8009602 <USBD_StdEPReq+0x2a6>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d072      	beq.n	80094b6 <USBD_StdEPReq+0x15a>
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d03a      	beq.n	800944a <USBD_StdEPReq+0xee>
 80093d4:	e115      	b.n	8009602 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d002      	beq.n	80093e6 <USBD_StdEPReq+0x8a>
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d015      	beq.n	8009410 <USBD_StdEPReq+0xb4>
 80093e4:	e02b      	b.n	800943e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00c      	beq.n	8009406 <USBD_StdEPReq+0xaa>
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b80      	cmp	r3, #128	@ 0x80
 80093f0:	d009      	beq.n	8009406 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 f880 	bl	800a4fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093fc:	2180      	movs	r1, #128	@ 0x80
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f87c 	bl	800a4fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009404:	e020      	b.n	8009448 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fc1b 	bl	8009c44 <USBD_CtlError>
              break;
 800940e:	e01b      	b.n	8009448 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10e      	bne.n	8009436 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <USBD_StdEPReq+0xda>
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b80      	cmp	r3, #128	@ 0x80
 8009422:	d008      	beq.n	8009436 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	88db      	ldrh	r3, [r3, #6]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d104      	bne.n	8009436 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f863 	bl	800a4fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fccc 	bl	8009dd4 <USBD_CtlSendStatus>

              break;
 800943c:	e004      	b.n	8009448 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fbff 	bl	8009c44 <USBD_CtlError>
              break;
 8009446:	bf00      	nop
          }
          break;
 8009448:	e0e0      	b.n	800960c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009450:	2b02      	cmp	r3, #2
 8009452:	d002      	beq.n	800945a <USBD_StdEPReq+0xfe>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d015      	beq.n	8009484 <USBD_StdEPReq+0x128>
 8009458:	e026      	b.n	80094a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <USBD_StdEPReq+0x11e>
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b80      	cmp	r3, #128	@ 0x80
 8009464:	d009      	beq.n	800947a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 f846 	bl	800a4fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009470:	2180      	movs	r1, #128	@ 0x80
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 f842 	bl	800a4fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009478:	e01c      	b.n	80094b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fbe1 	bl	8009c44 <USBD_CtlError>
              break;
 8009482:	e017      	b.n	80094b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	885b      	ldrh	r3, [r3, #2]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d112      	bne.n	80094b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 f84d 	bl	800a53a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fc97 	bl	8009dd4 <USBD_CtlSendStatus>
              }
              break;
 80094a6:	e004      	b.n	80094b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fbca 	bl	8009c44 <USBD_CtlError>
              break;
 80094b0:	e000      	b.n	80094b4 <USBD_StdEPReq+0x158>
              break;
 80094b2:	bf00      	nop
          }
          break;
 80094b4:	e0aa      	b.n	800960c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d002      	beq.n	80094c6 <USBD_StdEPReq+0x16a>
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d032      	beq.n	800952a <USBD_StdEPReq+0x1ce>
 80094c4:	e097      	b.n	80095f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d007      	beq.n	80094dc <USBD_StdEPReq+0x180>
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b80      	cmp	r3, #128	@ 0x80
 80094d0:	d004      	beq.n	80094dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fbb5 	bl	8009c44 <USBD_CtlError>
                break;
 80094da:	e091      	b.n	8009600 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	da0b      	bge.n	80094fc <USBD_StdEPReq+0x1a0>
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	3310      	adds	r3, #16
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4413      	add	r3, r2
 80094f8:	3304      	adds	r3, #4
 80094fa:	e00b      	b.n	8009514 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	3304      	adds	r3, #4
 8009514:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2202      	movs	r2, #2
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fbf8 	bl	8009d18 <USBD_CtlSendData>
              break;
 8009528:	e06a      	b.n	8009600 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800952a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800952e:	2b00      	cmp	r3, #0
 8009530:	da11      	bge.n	8009556 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	f003 020f 	and.w	r2, r3, #15
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	3318      	adds	r3, #24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d117      	bne.n	800957c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fb78 	bl	8009c44 <USBD_CtlError>
                  break;
 8009554:	e054      	b.n	8009600 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fb65 	bl	8009c44 <USBD_CtlError>
                  break;
 800957a:	e041      	b.n	8009600 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	da0b      	bge.n	800959c <USBD_StdEPReq+0x240>
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	3310      	adds	r3, #16
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	4413      	add	r3, r2
 8009598:	3304      	adds	r3, #4
 800959a:	e00b      	b.n	80095b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	3304      	adds	r3, #4
 80095b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <USBD_StdEPReq+0x266>
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	d103      	bne.n	80095ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e00e      	b.n	80095e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 ffd2 	bl	800a578 <USBD_LL_IsStallEP>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2201      	movs	r2, #1
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	e002      	b.n	80095e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2202      	movs	r2, #2
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fb92 	bl	8009d18 <USBD_CtlSendData>
              break;
 80095f4:	e004      	b.n	8009600 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fb23 	bl	8009c44 <USBD_CtlError>
              break;
 80095fe:	bf00      	nop
          }
          break;
 8009600:	e004      	b.n	800960c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fb1d 	bl	8009c44 <USBD_CtlError>
          break;
 800960a:	bf00      	nop
      }
      break;
 800960c:	e004      	b.n	8009618 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fb17 	bl	8009c44 <USBD_CtlError>
      break;
 8009616:	bf00      	nop
  }

  return ret;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	2b06      	cmp	r3, #6
 8009646:	f200 8128 	bhi.w	800989a <USBD_GetDescriptor+0x276>
 800964a:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <USBD_GetDescriptor+0x2c>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	0800966d 	.word	0x0800966d
 8009654:	08009685 	.word	0x08009685
 8009658:	080096c5 	.word	0x080096c5
 800965c:	0800989b 	.word	0x0800989b
 8009660:	0800989b 	.word	0x0800989b
 8009664:	0800983b 	.word	0x0800983b
 8009668:	08009867 	.word	0x08009867
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	7c12      	ldrb	r2, [r2, #16]
 8009678:	f107 0108 	add.w	r1, r7, #8
 800967c:	4610      	mov	r0, r2
 800967e:	4798      	blx	r3
 8009680:	60f8      	str	r0, [r7, #12]
      break;
 8009682:	e112      	b.n	80098aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7c1b      	ldrb	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10d      	bne.n	80096a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009694:	f107 0208 	add.w	r2, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	2202      	movs	r2, #2
 80096a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096a6:	e100      	b.n	80098aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b0:	f107 0208 	add.w	r2, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3301      	adds	r3, #1
 80096be:	2202      	movs	r2, #2
 80096c0:	701a      	strb	r2, [r3, #0]
      break;
 80096c2:	e0f2      	b.n	80098aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	f200 80ac 	bhi.w	8009828 <USBD_GetDescriptor+0x204>
 80096d0:	a201      	add	r2, pc, #4	@ (adr r2, 80096d8 <USBD_GetDescriptor+0xb4>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096f1 	.word	0x080096f1
 80096dc:	08009725 	.word	0x08009725
 80096e0:	08009759 	.word	0x08009759
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	080097c1 	.word	0x080097c1
 80096ec:	080097f5 	.word	0x080097f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e091      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa94 	bl	8009c44 <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e089      	b.n	8009838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e077      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa7a 	bl	8009c44 <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e06f      	b.n	8009838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e05d      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa60 	bl	8009c44 <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e055      	b.n	8009838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e043      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa46 	bl	8009c44 <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e03b      	b.n	8009838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e029      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa2c 	bl	8009c44 <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e021      	b.n	8009838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7c12      	ldrb	r2, [r2, #16]
 800980c:	f107 0108 	add.w	r1, r7, #8
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009816:	e00f      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa12 	bl	8009c44 <USBD_CtlError>
            err++;
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	3301      	adds	r3, #1
 8009824:	72fb      	strb	r3, [r7, #11]
          break;
 8009826:	e007      	b.n	8009838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa0a 	bl	8009c44 <USBD_CtlError>
          err++;
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	3301      	adds	r3, #1
 8009834:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009836:	e038      	b.n	80098aa <USBD_GetDescriptor+0x286>
 8009838:	e037      	b.n	80098aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7c1b      	ldrb	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984a:	f107 0208 	add.w	r2, r7, #8
 800984e:	4610      	mov	r0, r2
 8009850:	4798      	blx	r3
 8009852:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009854:	e029      	b.n	80098aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9f3 	bl	8009c44 <USBD_CtlError>
        err++;
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	3301      	adds	r3, #1
 8009862:	72fb      	strb	r3, [r7, #11]
      break;
 8009864:	e021      	b.n	80098aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7c1b      	ldrb	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10d      	bne.n	800988a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009876:	f107 0208 	add.w	r2, r7, #8
 800987a:	4610      	mov	r0, r2
 800987c:	4798      	blx	r3
 800987e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3301      	adds	r3, #1
 8009884:	2207      	movs	r2, #7
 8009886:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009888:	e00f      	b.n	80098aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9d9 	bl	8009c44 <USBD_CtlError>
        err++;
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	3301      	adds	r3, #1
 8009896:	72fb      	strb	r3, [r7, #11]
      break;
 8009898:	e007      	b.n	80098aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f9d1 	bl	8009c44 <USBD_CtlError>
      err++;
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	3301      	adds	r3, #1
 80098a6:	72fb      	strb	r3, [r7, #11]
      break;
 80098a8:	bf00      	nop
  }

  if (err != 0U)
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d11c      	bne.n	80098ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80098b0:	893b      	ldrh	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d011      	beq.n	80098da <USBD_GetDescriptor+0x2b6>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	88db      	ldrh	r3, [r3, #6]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00d      	beq.n	80098da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	88da      	ldrh	r2, [r3, #6]
 80098c2:	893b      	ldrh	r3, [r7, #8]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	bf28      	it	cs
 80098c8:	4613      	movcs	r3, r2
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098ce:	893b      	ldrh	r3, [r7, #8]
 80098d0:	461a      	mov	r2, r3
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fa1f 	bl	8009d18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	88db      	ldrh	r3, [r3, #6]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d104      	bne.n	80098ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa76 	bl	8009dd4 <USBD_CtlSendStatus>
 80098e8:	e000      	b.n	80098ec <USBD_GetDescriptor+0x2c8>
    return;
 80098ea:	bf00      	nop
    }
  }
}
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop

080098f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d130      	bne.n	8009968 <USBD_SetAddress+0x74>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	88db      	ldrh	r3, [r3, #6]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d12c      	bne.n	8009968 <USBD_SetAddress+0x74>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	2b7f      	cmp	r3, #127	@ 0x7f
 8009914:	d828      	bhi.n	8009968 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	885b      	ldrh	r3, [r3, #2]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009920:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	2b03      	cmp	r3, #3
 800992a:	d104      	bne.n	8009936 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f988 	bl	8009c44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009934:	e01d      	b.n	8009972 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	7bfa      	ldrb	r2, [r7, #15]
 800993a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fe44 	bl	800a5d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fa43 	bl	8009dd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995c:	e009      	b.n	8009972 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	e004      	b.n	8009972 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f96a 	bl	8009c44 <USBD_CtlError>
  }
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	885b      	ldrh	r3, [r3, #2]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	4b41      	ldr	r3, [pc, #260]	@ (8009a94 <USBD_SetConfig+0x118>)
 800998e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009990:	4b40      	ldr	r3, [pc, #256]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d904      	bls.n	80099a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f952 	bl	8009c44 <USBD_CtlError>
 80099a0:	e075      	b.n	8009a8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d002      	beq.n	80099b2 <USBD_SetConfig+0x36>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d023      	beq.n	80099f8 <USBD_SetConfig+0x7c>
 80099b0:	e062      	b.n	8009a78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80099b2:	4b38      	ldr	r3, [pc, #224]	@ (8009a94 <USBD_SetConfig+0x118>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01a      	beq.n	80099f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80099ba:	4b36      	ldr	r3, [pc, #216]	@ (8009a94 <USBD_SetConfig+0x118>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2203      	movs	r2, #3
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099cc:	4b31      	ldr	r3, [pc, #196]	@ (8009a94 <USBD_SetConfig+0x118>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff f9e7 	bl	8008da6 <USBD_SetClassConfig>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d104      	bne.n	80099e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f92f 	bl	8009c44 <USBD_CtlError>
            return;
 80099e6:	e052      	b.n	8009a8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9f3 	bl	8009dd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099ee:	e04e      	b.n	8009a8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f9ef 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 80099f6:	e04a      	b.n	8009a8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099f8:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <USBD_SetConfig+0x118>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d112      	bne.n	8009a26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009a08:	4b22      	ldr	r3, [pc, #136]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a12:	4b20      	ldr	r3, [pc, #128]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff f9e3 	bl	8008de4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f9d8 	bl	8009dd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a24:	e033      	b.n	8009a8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a26:	4b1b      	ldr	r3, [pc, #108]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d01d      	beq.n	8009a70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff f9d1 	bl	8008de4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a42:	4b14      	ldr	r3, [pc, #80]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a4c:	4b11      	ldr	r3, [pc, #68]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff f9a7 	bl	8008da6 <USBD_SetClassConfig>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d104      	bne.n	8009a68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8ef 	bl	8009c44 <USBD_CtlError>
            return;
 8009a66:	e012      	b.n	8009a8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f9b3 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 8009a6e:	e00e      	b.n	8009a8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9af 	bl	8009dd4 <USBD_CtlSendStatus>
        break;
 8009a76:	e00a      	b.n	8009a8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f8e2 	bl	8009c44 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a80:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <USBD_SetConfig+0x118>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff f9ac 	bl	8008de4 <USBD_ClrClassConfig>
        break;
 8009a8c:	bf00      	nop
    }
  }
}
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20002e48 	.word	0x20002e48

08009a98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d004      	beq.n	8009ab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f8c9 	bl	8009c44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ab2:	e022      	b.n	8009afa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	dc02      	bgt.n	8009ac4 <USBD_GetConfig+0x2c>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dc03      	bgt.n	8009aca <USBD_GetConfig+0x32>
 8009ac2:	e015      	b.n	8009af0 <USBD_GetConfig+0x58>
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d00b      	beq.n	8009ae0 <USBD_GetConfig+0x48>
 8009ac8:	e012      	b.n	8009af0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f91d 	bl	8009d18 <USBD_CtlSendData>
        break;
 8009ade:	e00c      	b.n	8009afa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f915 	bl	8009d18 <USBD_CtlSendData>
        break;
 8009aee:	e004      	b.n	8009afa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f8a6 	bl	8009c44 <USBD_CtlError>
        break;
 8009af8:	bf00      	nop
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b12:	3b01      	subs	r3, #1
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d81e      	bhi.n	8009b56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	88db      	ldrh	r3, [r3, #6]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d004      	beq.n	8009b2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f88e 	bl	8009c44 <USBD_CtlError>
        break;
 8009b28:	e01a      	b.n	8009b60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f043 0202 	orr.w	r2, r3, #2
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f8e2 	bl	8009d18 <USBD_CtlSendData>
      break;
 8009b54:	e004      	b.n	8009b60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f873 	bl	8009c44 <USBD_CtlError>
      break;
 8009b5e:	bf00      	nop
  }
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d106      	bne.n	8009b88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f926 	bl	8009dd4 <USBD_CtlSendStatus>
  }
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d80b      	bhi.n	8009bbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d10c      	bne.n	8009bc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f90c 	bl	8009dd4 <USBD_CtlSendStatus>
      }
      break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f83f 	bl	8009c44 <USBD_CtlError>
      break;
 8009bc6:	e000      	b.n	8009bca <USBD_ClrFeature+0x3a>
      break;
 8009bc8:	bf00      	nop
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785a      	ldrb	r2, [r3, #1]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	3302      	adds	r3, #2
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	3303      	adds	r3, #3
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4413      	add	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3305      	adds	r3, #5
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	3306      	adds	r3, #6
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	3307      	adds	r3, #7
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	021b      	lsls	r3, r3, #8
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	80da      	strh	r2, [r3, #6]

}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c4e:	2180      	movs	r1, #128	@ 0x80
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc53 	bl	800a4fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c56:	2100      	movs	r1, #0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc4f 	bl	800a4fc <USBD_LL_StallEP>
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d032      	beq.n	8009ce2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f834 	bl	8009cea <USBD_GetLen>
 8009c82:	4603      	mov	r3, r0
 8009c84:	3301      	adds	r3, #1
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	75fa      	strb	r2, [r7, #23]
 8009c96:	461a      	mov	r2, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	75fa      	strb	r2, [r7, #23]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	2203      	movs	r2, #3
 8009cb0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009cb2:	e012      	b.n	8009cda <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	60fa      	str	r2, [r7, #12]
 8009cba:	7dfa      	ldrb	r2, [r7, #23]
 8009cbc:	1c51      	adds	r1, r2, #1
 8009cbe:	75f9      	strb	r1, [r7, #23]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	75fa      	strb	r2, [r7, #23]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e8      	bne.n	8009cb4 <USBD_GetString+0x4e>
    }
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009cf6:	e005      	b.n	8009d04 <USBD_GetLen+0x1a>
  {
    len++;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3301      	adds	r3, #1
 8009d02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1f5      	bne.n	8009cf8 <USBD_GetLen+0xe>
  }

  return len;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d34:	88fa      	ldrh	r2, [r7, #6]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fc64 	bl	800a60e <USBD_LL_Transmit>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	2100      	movs	r1, #0
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 fc52 	bl	800a60e <USBD_LL_Transmit>

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d92:	88fa      	ldrh	r2, [r7, #6]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fc57 	bl	800a654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dbe:	88fb      	ldrh	r3, [r7, #6]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fc45 	bl	800a654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2204      	movs	r2, #4
 8009de0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fc0f 	bl	800a60e <USBD_LL_Transmit>

  return USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2205      	movs	r2, #5
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fc1f 	bl	800a654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e24:	2200      	movs	r2, #0
 8009e26:	4912      	ldr	r1, [pc, #72]	@ (8009e70 <MX_USB_DEVICE_Init+0x50>)
 8009e28:	4812      	ldr	r0, [pc, #72]	@ (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e2a:	f7fe ff62 	bl	8008cf2 <USBD_Init>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e34:	f7f7 f8e0 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e38:	490f      	ldr	r1, [pc, #60]	@ (8009e78 <MX_USB_DEVICE_Init+0x58>)
 8009e3a:	480e      	ldr	r0, [pc, #56]	@ (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e3c:	f7fe ff84 	bl	8008d48 <USBD_RegisterClass>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e46:	f7f7 f8d7 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e4a:	490c      	ldr	r1, [pc, #48]	@ (8009e7c <MX_USB_DEVICE_Init+0x5c>)
 8009e4c:	4809      	ldr	r0, [pc, #36]	@ (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e4e:	f7fe feb5 	bl	8008bbc <USBD_CDC_RegisterInterface>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e58:	f7f7 f8ce 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e5c:	4805      	ldr	r0, [pc, #20]	@ (8009e74 <MX_USB_DEVICE_Init+0x54>)
 8009e5e:	f7fe ff8c 	bl	8008d7a <USBD_Start>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e68:	f7f7 f8c6 	bl	8000ff8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e6c:	bf00      	nop
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000208 	.word	0x20000208
 8009e74:	20002e4c 	.word	0x20002e4c
 8009e78:	200000f4 	.word	0x200000f4
 8009e7c:	200001f8 	.word	0x200001f8

08009e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e84:	2200      	movs	r2, #0
 8009e86:	4905      	ldr	r1, [pc, #20]	@ (8009e9c <CDC_Init_FS+0x1c>)
 8009e88:	4805      	ldr	r0, [pc, #20]	@ (8009ea0 <CDC_Init_FS+0x20>)
 8009e8a:	f7fe fead 	bl	8008be8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e8e:	4905      	ldr	r1, [pc, #20]	@ (8009ea4 <CDC_Init_FS+0x24>)
 8009e90:	4803      	ldr	r0, [pc, #12]	@ (8009ea0 <CDC_Init_FS+0x20>)
 8009e92:	f7fe fec2 	bl	8008c1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	200034f8 	.word	0x200034f8
 8009ea0:	20002e4c 	.word	0x20002e4c
 8009ea4:	20003110 	.word	0x20003110

08009ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bc80      	pop	{r7}
 8009eb4:	4770      	bx	lr
	...

08009eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	6039      	str	r1, [r7, #0]
 8009ec2:	71fb      	strb	r3, [r7, #7]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b23      	cmp	r3, #35	@ 0x23
 8009ecc:	d84a      	bhi.n	8009f64 <CDC_Control_FS+0xac>
 8009ece:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed4 <CDC_Control_FS+0x1c>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009f65 	.word	0x08009f65
 8009ed8:	08009f65 	.word	0x08009f65
 8009edc:	08009f65 	.word	0x08009f65
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	08009f65 	.word	0x08009f65
 8009ee8:	08009f65 	.word	0x08009f65
 8009eec:	08009f65 	.word	0x08009f65
 8009ef0:	08009f65 	.word	0x08009f65
 8009ef4:	08009f65 	.word	0x08009f65
 8009ef8:	08009f65 	.word	0x08009f65
 8009efc:	08009f65 	.word	0x08009f65
 8009f00:	08009f65 	.word	0x08009f65
 8009f04:	08009f65 	.word	0x08009f65
 8009f08:	08009f65 	.word	0x08009f65
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f65 	.word	0x08009f65
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f65 	.word	0x08009f65
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f65 	.word	0x08009f65
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	08009f65 	.word	0x08009f65
 8009f40:	08009f65 	.word	0x08009f65
 8009f44:	08009f65 	.word	0x08009f65
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f65 	.word	0x08009f65
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009f65 	.word	0x08009f65
 8009f5c:	08009f65 	.word	0x08009f65
 8009f60:	08009f65 	.word	0x08009f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f64:	bf00      	nop
  }

  return (USBD_OK);
 8009f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop

08009f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4805      	ldr	r0, [pc, #20]	@ (8009f98 <CDC_Receive_FS+0x24>)
 8009f82:	f7fe fe4a 	bl	8008c1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f86:	4804      	ldr	r0, [pc, #16]	@ (8009f98 <CDC_Receive_FS+0x24>)
 8009f88:	f7fe fe89 	bl	8008c9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20002e4c 	.word	0x20002e4c

08009f9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009fac:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <CDC_Transmit_FS+0x48>)
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e00b      	b.n	8009fda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fc2:	887b      	ldrh	r3, [r7, #2]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	4806      	ldr	r0, [pc, #24]	@ (8009fe4 <CDC_Transmit_FS+0x48>)
 8009fca:	f7fe fe0d 	bl	8008be8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fce:	4805      	ldr	r0, [pc, #20]	@ (8009fe4 <CDC_Transmit_FS+0x48>)
 8009fd0:	f7fe fe36 	bl	8008c40 <USBD_CDC_TransmitPacket>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20002e4c 	.word	0x20002e4c

08009fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6039      	str	r1, [r7, #0]
 8009ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2212      	movs	r2, #18
 8009ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ffa:	4b03      	ldr	r3, [pc, #12]	@ (800a008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	bc80      	pop	{r7}
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20000224 	.word	0x20000224

0800a00c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2204      	movs	r2, #4
 800a01c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a01e:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	bc80      	pop	{r7}
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	20000238 	.word	0x20000238

0800a030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d105      	bne.n	800a04e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4907      	ldr	r1, [pc, #28]	@ (800a064 <USBD_FS_ProductStrDescriptor+0x34>)
 800a046:	4808      	ldr	r0, [pc, #32]	@ (800a068 <USBD_FS_ProductStrDescriptor+0x38>)
 800a048:	f7ff fe0d 	bl	8009c66 <USBD_GetString>
 800a04c:	e004      	b.n	800a058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	4904      	ldr	r1, [pc, #16]	@ (800a064 <USBD_FS_ProductStrDescriptor+0x34>)
 800a052:	4805      	ldr	r0, [pc, #20]	@ (800a068 <USBD_FS_ProductStrDescriptor+0x38>)
 800a054:	f7ff fe07 	bl	8009c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a058:	4b02      	ldr	r3, [pc, #8]	@ (800a064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200038e0 	.word	0x200038e0
 800a068:	0800b1c0 	.word	0x0800b1c0

0800a06c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	6039      	str	r1, [r7, #0]
 800a076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	4904      	ldr	r1, [pc, #16]	@ (800a08c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a07c:	4804      	ldr	r0, [pc, #16]	@ (800a090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a07e:	f7ff fdf2 	bl	8009c66 <USBD_GetString>
  return USBD_StrDesc;
 800a082:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200038e0 	.word	0x200038e0
 800a090:	0800b1d8 	.word	0x0800b1d8

0800a094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	221a      	movs	r2, #26
 800a0a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0a6:	f000 f843 	bl	800a130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0aa:	4b02      	ldr	r3, [pc, #8]	@ (800a0b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000023c 	.word	0x2000023c

0800a0b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	6039      	str	r1, [r7, #0]
 800a0c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d105      	bne.n	800a0d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	4907      	ldr	r1, [pc, #28]	@ (800a0ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ce:	4808      	ldr	r0, [pc, #32]	@ (800a0f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0d0:	f7ff fdc9 	bl	8009c66 <USBD_GetString>
 800a0d4:	e004      	b.n	800a0e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	4904      	ldr	r1, [pc, #16]	@ (800a0ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0da:	4805      	ldr	r0, [pc, #20]	@ (800a0f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0dc:	f7ff fdc3 	bl	8009c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e0:	4b02      	ldr	r3, [pc, #8]	@ (800a0ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200038e0 	.word	0x200038e0
 800a0f0:	0800b1ec 	.word	0x0800b1ec

0800a0f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	6039      	str	r1, [r7, #0]
 800a0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d105      	bne.n	800a112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4907      	ldr	r1, [pc, #28]	@ (800a128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a10a:	4808      	ldr	r0, [pc, #32]	@ (800a12c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a10c:	f7ff fdab 	bl	8009c66 <USBD_GetString>
 800a110:	e004      	b.n	800a11c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	4904      	ldr	r1, [pc, #16]	@ (800a128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a116:	4805      	ldr	r0, [pc, #20]	@ (800a12c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a118:	f7ff fda5 	bl	8009c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a11c:	4b02      	ldr	r3, [pc, #8]	@ (800a128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200038e0 	.word	0x200038e0
 800a12c:	0800b1f8 	.word	0x0800b1f8

0800a130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a136:	4b0f      	ldr	r3, [pc, #60]	@ (800a174 <Get_SerialNum+0x44>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a13c:	4b0e      	ldr	r3, [pc, #56]	@ (800a178 <Get_SerialNum+0x48>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a142:	4b0e      	ldr	r3, [pc, #56]	@ (800a17c <Get_SerialNum+0x4c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d009      	beq.n	800a16a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a156:	2208      	movs	r2, #8
 800a158:	4909      	ldr	r1, [pc, #36]	@ (800a180 <Get_SerialNum+0x50>)
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 f814 	bl	800a188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a160:	2204      	movs	r2, #4
 800a162:	4908      	ldr	r1, [pc, #32]	@ (800a184 <Get_SerialNum+0x54>)
 800a164:	68b8      	ldr	r0, [r7, #8]
 800a166:	f000 f80f 	bl	800a188 <IntToUnicode>
  }
}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	1ffff7e8 	.word	0x1ffff7e8
 800a178:	1ffff7ec 	.word	0x1ffff7ec
 800a17c:	1ffff7f0 	.word	0x1ffff7f0
 800a180:	2000023e 	.word	0x2000023e
 800a184:	2000024e 	.word	0x2000024e

0800a188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]
 800a19e:	e027      	b.n	800a1f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	0f1b      	lsrs	r3, r3, #28
 800a1a4:	2b09      	cmp	r3, #9
 800a1a6:	d80b      	bhi.n	800a1c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	0f1b      	lsrs	r3, r3, #28
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	440b      	add	r3, r1
 800a1b8:	3230      	adds	r2, #48	@ 0x30
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	701a      	strb	r2, [r3, #0]
 800a1be:	e00a      	b.n	800a1d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	0f1b      	lsrs	r3, r3, #28
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	005b      	lsls	r3, r3, #1
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	440b      	add	r3, r1
 800a1d0:	3237      	adds	r2, #55	@ 0x37
 800a1d2:	b2d2      	uxtb	r2, r2
 800a1d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	75fb      	strb	r3, [r7, #23]
 800a1f0:	7dfa      	ldrb	r2, [r7, #23]
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d3d3      	bcc.n	800a1a0 <IntToUnicode+0x18>
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	bf00      	nop
 800a1fc:	371c      	adds	r7, #28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0d      	ldr	r2, [pc, #52]	@ (800a248 <HAL_PCD_MspInit+0x44>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d113      	bne.n	800a23e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a216:	4b0d      	ldr	r3, [pc, #52]	@ (800a24c <HAL_PCD_MspInit+0x48>)
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	4a0c      	ldr	r2, [pc, #48]	@ (800a24c <HAL_PCD_MspInit+0x48>)
 800a21c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a220:	61d3      	str	r3, [r2, #28]
 800a222:	4b0a      	ldr	r3, [pc, #40]	@ (800a24c <HAL_PCD_MspInit+0x48>)
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	2014      	movs	r0, #20
 800a234:	f7f7 f895 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a238:	2014      	movs	r0, #20
 800a23a:	f7f7 f8ae 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	40005c00 	.word	0x40005c00
 800a24c:	40021000 	.word	0x40021000

0800a250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	f7fe fdcf 	bl	8008e0a <USBD_LL_SetupStage>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	440b      	add	r3, r1
 800a294:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	4619      	mov	r1, r3
 800a29e:	f7fe fe01 	bl	8008ea4 <USBD_LL_DataOutStage>
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	440b      	add	r3, r1
 800a2ca:	333c      	adds	r3, #60	@ 0x3c
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f7fe fe58 	bl	8008f86 <USBD_LL_DataInStage>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe ff68 	bl	80091c2 <USBD_LL_SOF>
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a302:	2301      	movs	r3, #1
 800a304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d001      	beq.n	800a312 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a30e:	f7f6 fe73 	bl	8000ff8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a318:	7bfa      	ldrb	r2, [r7, #15]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe ff18 	bl	8009152 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fed1 	bl	80090d0 <USBD_LL_Reset>
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe ff12 	bl	8009170 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a354:	4b04      	ldr	r3, [pc, #16]	@ (800a368 <HAL_PCD_SuspendCallback+0x30>)
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	4a03      	ldr	r2, [pc, #12]	@ (800a368 <HAL_PCD_SuspendCallback+0x30>)
 800a35a:	f043 0306 	orr.w	r3, r3, #6
 800a35e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed00 	.word	0xe000ed00

0800a36c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe ff0c 	bl	8009198 <USBD_LL_Resume>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a390:	4a28      	ldr	r2, [pc, #160]	@ (800a434 <USBD_LL_Init+0xac>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a26      	ldr	r2, [pc, #152]	@ (800a434 <USBD_LL_Init+0xac>)
 800a39c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3a0:	4b24      	ldr	r3, [pc, #144]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3a2:	4a25      	ldr	r2, [pc, #148]	@ (800a438 <USBD_LL_Init+0xb0>)
 800a3a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3a6:	4b23      	ldr	r3, [pc, #140]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3a8:	2208      	movs	r2, #8
 800a3aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3ac:	4b21      	ldr	r3, [pc, #132]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3b2:	4b20      	ldr	r3, [pc, #128]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3be:	4b1d      	ldr	r3, [pc, #116]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3c4:	481b      	ldr	r0, [pc, #108]	@ (800a434 <USBD_LL_Init+0xac>)
 800a3c6:	f7f7 f9aa 	bl	800171e <HAL_PCD_Init>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a3d0:	f7f6 fe12 	bl	8000ff8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3da:	2318      	movs	r3, #24
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	f7f8 fec8 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3ea:	2358      	movs	r3, #88	@ 0x58
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2180      	movs	r1, #128	@ 0x80
 800a3f0:	f7f8 fec0 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3fa:	23c0      	movs	r3, #192	@ 0xc0
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2181      	movs	r1, #129	@ 0x81
 800a400:	f7f8 feb8 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a40a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a40e:	2200      	movs	r2, #0
 800a410:	2101      	movs	r1, #1
 800a412:	f7f8 feaf 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a41c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a420:	2200      	movs	r2, #0
 800a422:	2182      	movs	r1, #130	@ 0x82
 800a424:	f7f8 fea6 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20003ae0 	.word	0x20003ae0
 800a438:	40005c00 	.word	0x40005c00

0800a43c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a452:	4618      	mov	r0, r3
 800a454:	f7f7 fa62 	bl	800191c <HAL_PCD_Start>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f94e 	bl	800a700 <USBD_Get_USB_Status>
 800a464:	4603      	mov	r3, r0
 800a466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a468:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	4608      	mov	r0, r1
 800a47c:	4611      	mov	r1, r2
 800a47e:	461a      	mov	r2, r3
 800a480:	4603      	mov	r3, r0
 800a482:	70fb      	strb	r3, [r7, #3]
 800a484:	460b      	mov	r3, r1
 800a486:	70bb      	strb	r3, [r7, #2]
 800a488:	4613      	mov	r3, r2
 800a48a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a49a:	78bb      	ldrb	r3, [r7, #2]
 800a49c:	883a      	ldrh	r2, [r7, #0]
 800a49e:	78f9      	ldrb	r1, [r7, #3]
 800a4a0:	f7f7 fbb7 	bl	8001c12 <HAL_PCD_EP_Open>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f928 	bl	800a700 <USBD_Get_USB_Status>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f7 fbf5 	bl	8001ccc <HAL_PCD_EP_Close>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f909 	bl	800a700 <USBD_Get_USB_Status>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a516:	78fa      	ldrb	r2, [r7, #3]
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f7 fc9d 	bl	8001e5a <HAL_PCD_EP_SetStall>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f8ea 	bl	800a700 <USBD_Get_USB_Status>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a530:	7bbb      	ldrb	r3, [r7, #14]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f7 fcde 	bl	8001f1a <HAL_PCD_EP_ClrStall>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f8cb 	bl	800a700 <USBD_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a58a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a590:	2b00      	cmp	r3, #0
 800a592:	da0c      	bge.n	800a5ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a59a:	68f9      	ldr	r1, [r7, #12]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	440b      	add	r3, r1
 800a5a8:	3302      	adds	r3, #2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	e00b      	b.n	800a5c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5b4:	68f9      	ldr	r1, [r7, #12]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	440b      	add	r3, r1
 800a5c0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a5c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bc80      	pop	{r7}
 800a5ce:	4770      	bx	lr

0800a5d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f7 faea 	bl	8001bc8 <HAL_PCD_SetAddress>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f880 	bl	800a700 <USBD_Get_USB_Status>
 800a600:	4603      	mov	r3, r0
 800a602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a604:	7bbb      	ldrb	r3, [r7, #14]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b086      	sub	sp, #24
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	461a      	mov	r2, r3
 800a61a:	460b      	mov	r3, r1
 800a61c:	72fb      	strb	r3, [r7, #11]
 800a61e:	4613      	mov	r3, r2
 800a620:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a630:	893b      	ldrh	r3, [r7, #8]
 800a632:	7af9      	ldrb	r1, [r7, #11]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	f7f7 fbd9 	bl	8001dec <HAL_PCD_EP_Transmit>
 800a63a:	4603      	mov	r3, r0
 800a63c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 f85d 	bl	800a700 <USBD_Get_USB_Status>
 800a646:	4603      	mov	r3, r0
 800a648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a64a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	607a      	str	r2, [r7, #4]
 800a65e:	461a      	mov	r2, r3
 800a660:	460b      	mov	r3, r1
 800a662:	72fb      	strb	r3, [r7, #11]
 800a664:	4613      	mov	r3, r2
 800a666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a676:	893b      	ldrh	r3, [r7, #8]
 800a678:	7af9      	ldrb	r1, [r7, #11]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	f7f7 fb6e 	bl	8001d5c <HAL_PCD_EP_Receive>
 800a680:	4603      	mov	r3, r0
 800a682:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f83a 	bl	800a700 <USBD_Get_USB_Status>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a690:	7dbb      	ldrb	r3, [r7, #22]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f7 fb84 	bl	8001dbe <HAL_PCD_EP_GetRxCount>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6c8:	4b02      	ldr	r3, [pc, #8]	@ (800a6d4 <USBD_static_malloc+0x14>)
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr
 800a6d4:	20003dd0 	.word	0x20003dd0

0800a6d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]

}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bc80      	pop	{r7}
 800a6e8:	4770      	bx	lr

0800a6ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bc80      	pop	{r7}
 800a6fe:	4770      	bx	lr

0800a700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	2b03      	cmp	r3, #3
 800a712:	d817      	bhi.n	800a744 <USBD_Get_USB_Status+0x44>
 800a714:	a201      	add	r2, pc, #4	@ (adr r2, 800a71c <USBD_Get_USB_Status+0x1c>)
 800a716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71a:	bf00      	nop
 800a71c:	0800a72d 	.word	0x0800a72d
 800a720:	0800a733 	.word	0x0800a733
 800a724:	0800a739 	.word	0x0800a739
 800a728:	0800a73f 	.word	0x0800a73f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	73fb      	strb	r3, [r7, #15]
    break;
 800a730:	e00b      	b.n	800a74a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a732:	2302      	movs	r3, #2
 800a734:	73fb      	strb	r3, [r7, #15]
    break;
 800a736:	e008      	b.n	800a74a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a738:	2301      	movs	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
    break;
 800a73c:	e005      	b.n	800a74a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a73e:	2302      	movs	r3, #2
 800a740:	73fb      	strb	r3, [r7, #15]
    break;
 800a742:	e002      	b.n	800a74a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a744:	2302      	movs	r3, #2
 800a746:	73fb      	strb	r3, [r7, #15]
    break;
 800a748:	bf00      	nop
  }
  return usb_status;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	bc80      	pop	{r7}
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop

0800a758 <_vsiprintf_r>:
 800a758:	b500      	push	{lr}
 800a75a:	b09b      	sub	sp, #108	@ 0x6c
 800a75c:	9100      	str	r1, [sp, #0]
 800a75e:	9104      	str	r1, [sp, #16]
 800a760:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	9102      	str	r1, [sp, #8]
 800a768:	4905      	ldr	r1, [pc, #20]	@ (800a780 <_vsiprintf_r+0x28>)
 800a76a:	9103      	str	r1, [sp, #12]
 800a76c:	4669      	mov	r1, sp
 800a76e:	f000 f999 	bl	800aaa4 <_svfiprintf_r>
 800a772:	2200      	movs	r2, #0
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	b01b      	add	sp, #108	@ 0x6c
 800a77a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a77e:	bf00      	nop
 800a780:	ffff0208 	.word	0xffff0208

0800a784 <vsiprintf>:
 800a784:	4613      	mov	r3, r2
 800a786:	460a      	mov	r2, r1
 800a788:	4601      	mov	r1, r0
 800a78a:	4802      	ldr	r0, [pc, #8]	@ (800a794 <vsiprintf+0x10>)
 800a78c:	6800      	ldr	r0, [r0, #0]
 800a78e:	f7ff bfe3 	b.w	800a758 <_vsiprintf_r>
 800a792:	bf00      	nop
 800a794:	20000258 	.word	0x20000258

0800a798 <memset>:
 800a798:	4603      	mov	r3, r0
 800a79a:	4402      	add	r2, r0
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d100      	bne.n	800a7a2 <memset+0xa>
 800a7a0:	4770      	bx	lr
 800a7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a6:	e7f9      	b.n	800a79c <memset+0x4>

0800a7a8 <__errno>:
 800a7a8:	4b01      	ldr	r3, [pc, #4]	@ (800a7b0 <__errno+0x8>)
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20000258 	.word	0x20000258

0800a7b4 <__libc_init_array>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	4d0c      	ldr	r5, [pc, #48]	@ (800a7ec <__libc_init_array+0x38>)
 800a7ba:	4c0d      	ldr	r4, [pc, #52]	@ (800a7f0 <__libc_init_array+0x3c>)
 800a7bc:	1b64      	subs	r4, r4, r5
 800a7be:	10a4      	asrs	r4, r4, #2
 800a7c0:	42a6      	cmp	r6, r4
 800a7c2:	d109      	bne.n	800a7d8 <__libc_init_array+0x24>
 800a7c4:	f000 fc78 	bl	800b0b8 <_init>
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	4d0a      	ldr	r5, [pc, #40]	@ (800a7f4 <__libc_init_array+0x40>)
 800a7cc:	4c0a      	ldr	r4, [pc, #40]	@ (800a7f8 <__libc_init_array+0x44>)
 800a7ce:	1b64      	subs	r4, r4, r5
 800a7d0:	10a4      	asrs	r4, r4, #2
 800a7d2:	42a6      	cmp	r6, r4
 800a7d4:	d105      	bne.n	800a7e2 <__libc_init_array+0x2e>
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7dc:	4798      	blx	r3
 800a7de:	3601      	adds	r6, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__libc_init_array+0xc>
 800a7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e6:	4798      	blx	r3
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	e7f2      	b.n	800a7d2 <__libc_init_array+0x1e>
 800a7ec:	0800b3d8 	.word	0x0800b3d8
 800a7f0:	0800b3d8 	.word	0x0800b3d8
 800a7f4:	0800b3d8 	.word	0x0800b3d8
 800a7f8:	0800b3dc 	.word	0x0800b3dc

0800a7fc <__retarget_lock_acquire_recursive>:
 800a7fc:	4770      	bx	lr

0800a7fe <__retarget_lock_release_recursive>:
 800a7fe:	4770      	bx	lr

0800a800 <_free_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4605      	mov	r5, r0
 800a804:	2900      	cmp	r1, #0
 800a806:	d040      	beq.n	800a88a <_free_r+0x8a>
 800a808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80c:	1f0c      	subs	r4, r1, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfb8      	it	lt
 800a812:	18e4      	addlt	r4, r4, r3
 800a814:	f000 f8de 	bl	800a9d4 <__malloc_lock>
 800a818:	4a1c      	ldr	r2, [pc, #112]	@ (800a88c <_free_r+0x8c>)
 800a81a:	6813      	ldr	r3, [r2, #0]
 800a81c:	b933      	cbnz	r3, 800a82c <_free_r+0x2c>
 800a81e:	6063      	str	r3, [r4, #4]
 800a820:	6014      	str	r4, [r2, #0]
 800a822:	4628      	mov	r0, r5
 800a824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a828:	f000 b8da 	b.w	800a9e0 <__malloc_unlock>
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	d908      	bls.n	800a842 <_free_r+0x42>
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	1821      	adds	r1, r4, r0
 800a834:	428b      	cmp	r3, r1
 800a836:	bf01      	itttt	eq
 800a838:	6819      	ldreq	r1, [r3, #0]
 800a83a:	685b      	ldreq	r3, [r3, #4]
 800a83c:	1809      	addeq	r1, r1, r0
 800a83e:	6021      	streq	r1, [r4, #0]
 800a840:	e7ed      	b.n	800a81e <_free_r+0x1e>
 800a842:	461a      	mov	r2, r3
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	b10b      	cbz	r3, 800a84c <_free_r+0x4c>
 800a848:	42a3      	cmp	r3, r4
 800a84a:	d9fa      	bls.n	800a842 <_free_r+0x42>
 800a84c:	6811      	ldr	r1, [r2, #0]
 800a84e:	1850      	adds	r0, r2, r1
 800a850:	42a0      	cmp	r0, r4
 800a852:	d10b      	bne.n	800a86c <_free_r+0x6c>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	4401      	add	r1, r0
 800a858:	1850      	adds	r0, r2, r1
 800a85a:	4283      	cmp	r3, r0
 800a85c:	6011      	str	r1, [r2, #0]
 800a85e:	d1e0      	bne.n	800a822 <_free_r+0x22>
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	4408      	add	r0, r1
 800a866:	6010      	str	r0, [r2, #0]
 800a868:	6053      	str	r3, [r2, #4]
 800a86a:	e7da      	b.n	800a822 <_free_r+0x22>
 800a86c:	d902      	bls.n	800a874 <_free_r+0x74>
 800a86e:	230c      	movs	r3, #12
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	e7d6      	b.n	800a822 <_free_r+0x22>
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	1821      	adds	r1, r4, r0
 800a878:	428b      	cmp	r3, r1
 800a87a:	bf01      	itttt	eq
 800a87c:	6819      	ldreq	r1, [r3, #0]
 800a87e:	685b      	ldreq	r3, [r3, #4]
 800a880:	1809      	addeq	r1, r1, r0
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	6063      	str	r3, [r4, #4]
 800a886:	6054      	str	r4, [r2, #4]
 800a888:	e7cb      	b.n	800a822 <_free_r+0x22>
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20004134 	.word	0x20004134

0800a890 <sbrk_aligned>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4e0f      	ldr	r6, [pc, #60]	@ (800a8d0 <sbrk_aligned+0x40>)
 800a894:	460c      	mov	r4, r1
 800a896:	6831      	ldr	r1, [r6, #0]
 800a898:	4605      	mov	r5, r0
 800a89a:	b911      	cbnz	r1, 800a8a2 <sbrk_aligned+0x12>
 800a89c:	f000 fbaa 	bl	800aff4 <_sbrk_r>
 800a8a0:	6030      	str	r0, [r6, #0]
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 fba5 	bl	800aff4 <_sbrk_r>
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	d103      	bne.n	800a8b6 <sbrk_aligned+0x26>
 800a8ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
 800a8b6:	1cc4      	adds	r4, r0, #3
 800a8b8:	f024 0403 	bic.w	r4, r4, #3
 800a8bc:	42a0      	cmp	r0, r4
 800a8be:	d0f8      	beq.n	800a8b2 <sbrk_aligned+0x22>
 800a8c0:	1a21      	subs	r1, r4, r0
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 fb96 	bl	800aff4 <_sbrk_r>
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d1f2      	bne.n	800a8b2 <sbrk_aligned+0x22>
 800a8cc:	e7ef      	b.n	800a8ae <sbrk_aligned+0x1e>
 800a8ce:	bf00      	nop
 800a8d0:	20004130 	.word	0x20004130

0800a8d4 <_malloc_r>:
 800a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	1ccd      	adds	r5, r1, #3
 800a8da:	f025 0503 	bic.w	r5, r5, #3
 800a8de:	3508      	adds	r5, #8
 800a8e0:	2d0c      	cmp	r5, #12
 800a8e2:	bf38      	it	cc
 800a8e4:	250c      	movcc	r5, #12
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	db01      	blt.n	800a8f0 <_malloc_r+0x1c>
 800a8ec:	42a9      	cmp	r1, r5
 800a8ee:	d904      	bls.n	800a8fa <_malloc_r+0x26>
 800a8f0:	230c      	movs	r3, #12
 800a8f2:	6033      	str	r3, [r6, #0]
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9d0 <_malloc_r+0xfc>
 800a8fe:	f000 f869 	bl	800a9d4 <__malloc_lock>
 800a902:	f8d8 3000 	ldr.w	r3, [r8]
 800a906:	461c      	mov	r4, r3
 800a908:	bb44      	cbnz	r4, 800a95c <_malloc_r+0x88>
 800a90a:	4629      	mov	r1, r5
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ffbf 	bl	800a890 <sbrk_aligned>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	4604      	mov	r4, r0
 800a916:	d158      	bne.n	800a9ca <_malloc_r+0xf6>
 800a918:	f8d8 4000 	ldr.w	r4, [r8]
 800a91c:	4627      	mov	r7, r4
 800a91e:	2f00      	cmp	r7, #0
 800a920:	d143      	bne.n	800a9aa <_malloc_r+0xd6>
 800a922:	2c00      	cmp	r4, #0
 800a924:	d04b      	beq.n	800a9be <_malloc_r+0xea>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	4639      	mov	r1, r7
 800a92a:	4630      	mov	r0, r6
 800a92c:	eb04 0903 	add.w	r9, r4, r3
 800a930:	f000 fb60 	bl	800aff4 <_sbrk_r>
 800a934:	4581      	cmp	r9, r0
 800a936:	d142      	bne.n	800a9be <_malloc_r+0xea>
 800a938:	6821      	ldr	r1, [r4, #0]
 800a93a:	4630      	mov	r0, r6
 800a93c:	1a6d      	subs	r5, r5, r1
 800a93e:	4629      	mov	r1, r5
 800a940:	f7ff ffa6 	bl	800a890 <sbrk_aligned>
 800a944:	3001      	adds	r0, #1
 800a946:	d03a      	beq.n	800a9be <_malloc_r+0xea>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	442b      	add	r3, r5
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	f8d8 3000 	ldr.w	r3, [r8]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	bb62      	cbnz	r2, 800a9b0 <_malloc_r+0xdc>
 800a956:	f8c8 7000 	str.w	r7, [r8]
 800a95a:	e00f      	b.n	800a97c <_malloc_r+0xa8>
 800a95c:	6822      	ldr	r2, [r4, #0]
 800a95e:	1b52      	subs	r2, r2, r5
 800a960:	d420      	bmi.n	800a9a4 <_malloc_r+0xd0>
 800a962:	2a0b      	cmp	r2, #11
 800a964:	d917      	bls.n	800a996 <_malloc_r+0xc2>
 800a966:	1961      	adds	r1, r4, r5
 800a968:	42a3      	cmp	r3, r4
 800a96a:	6025      	str	r5, [r4, #0]
 800a96c:	bf18      	it	ne
 800a96e:	6059      	strne	r1, [r3, #4]
 800a970:	6863      	ldr	r3, [r4, #4]
 800a972:	bf08      	it	eq
 800a974:	f8c8 1000 	streq.w	r1, [r8]
 800a978:	5162      	str	r2, [r4, r5]
 800a97a:	604b      	str	r3, [r1, #4]
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 f82f 	bl	800a9e0 <__malloc_unlock>
 800a982:	f104 000b 	add.w	r0, r4, #11
 800a986:	1d23      	adds	r3, r4, #4
 800a988:	f020 0007 	bic.w	r0, r0, #7
 800a98c:	1ac2      	subs	r2, r0, r3
 800a98e:	bf1c      	itt	ne
 800a990:	1a1b      	subne	r3, r3, r0
 800a992:	50a3      	strne	r3, [r4, r2]
 800a994:	e7af      	b.n	800a8f6 <_malloc_r+0x22>
 800a996:	6862      	ldr	r2, [r4, #4]
 800a998:	42a3      	cmp	r3, r4
 800a99a:	bf0c      	ite	eq
 800a99c:	f8c8 2000 	streq.w	r2, [r8]
 800a9a0:	605a      	strne	r2, [r3, #4]
 800a9a2:	e7eb      	b.n	800a97c <_malloc_r+0xa8>
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	6864      	ldr	r4, [r4, #4]
 800a9a8:	e7ae      	b.n	800a908 <_malloc_r+0x34>
 800a9aa:	463c      	mov	r4, r7
 800a9ac:	687f      	ldr	r7, [r7, #4]
 800a9ae:	e7b6      	b.n	800a91e <_malloc_r+0x4a>
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d1fb      	bne.n	800a9b0 <_malloc_r+0xdc>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6053      	str	r3, [r2, #4]
 800a9bc:	e7de      	b.n	800a97c <_malloc_r+0xa8>
 800a9be:	230c      	movs	r3, #12
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	f000 f80c 	bl	800a9e0 <__malloc_unlock>
 800a9c8:	e794      	b.n	800a8f4 <_malloc_r+0x20>
 800a9ca:	6005      	str	r5, [r0, #0]
 800a9cc:	e7d6      	b.n	800a97c <_malloc_r+0xa8>
 800a9ce:	bf00      	nop
 800a9d0:	20004134 	.word	0x20004134

0800a9d4 <__malloc_lock>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__malloc_lock+0x8>)
 800a9d6:	f7ff bf11 	b.w	800a7fc <__retarget_lock_acquire_recursive>
 800a9da:	bf00      	nop
 800a9dc:	2000412c 	.word	0x2000412c

0800a9e0 <__malloc_unlock>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__malloc_unlock+0x8>)
 800a9e2:	f7ff bf0c 	b.w	800a7fe <__retarget_lock_release_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	2000412c 	.word	0x2000412c

0800a9ec <__ssputs_r>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	461f      	mov	r7, r3
 800a9f2:	688e      	ldr	r6, [r1, #8]
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	42be      	cmp	r6, r7
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	4690      	mov	r8, r2
 800a9fc:	680b      	ldr	r3, [r1, #0]
 800a9fe:	d82d      	bhi.n	800aa5c <__ssputs_r+0x70>
 800aa00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa08:	d026      	beq.n	800aa58 <__ssputs_r+0x6c>
 800aa0a:	6965      	ldr	r5, [r4, #20]
 800aa0c:	6909      	ldr	r1, [r1, #16]
 800aa0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa12:	eba3 0901 	sub.w	r9, r3, r1
 800aa16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa1a:	1c7b      	adds	r3, r7, #1
 800aa1c:	444b      	add	r3, r9
 800aa1e:	106d      	asrs	r5, r5, #1
 800aa20:	429d      	cmp	r5, r3
 800aa22:	bf38      	it	cc
 800aa24:	461d      	movcc	r5, r3
 800aa26:	0553      	lsls	r3, r2, #21
 800aa28:	d527      	bpl.n	800aa7a <__ssputs_r+0x8e>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7ff ff52 	bl	800a8d4 <_malloc_r>
 800aa30:	4606      	mov	r6, r0
 800aa32:	b360      	cbz	r0, 800aa8e <__ssputs_r+0xa2>
 800aa34:	464a      	mov	r2, r9
 800aa36:	6921      	ldr	r1, [r4, #16]
 800aa38:	f000 fafa 	bl	800b030 <memcpy>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	6126      	str	r6, [r4, #16]
 800aa4a:	444e      	add	r6, r9
 800aa4c:	6026      	str	r6, [r4, #0]
 800aa4e:	463e      	mov	r6, r7
 800aa50:	6165      	str	r5, [r4, #20]
 800aa52:	eba5 0509 	sub.w	r5, r5, r9
 800aa56:	60a5      	str	r5, [r4, #8]
 800aa58:	42be      	cmp	r6, r7
 800aa5a:	d900      	bls.n	800aa5e <__ssputs_r+0x72>
 800aa5c:	463e      	mov	r6, r7
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4641      	mov	r1, r8
 800aa62:	6820      	ldr	r0, [r4, #0]
 800aa64:	f000 faac 	bl	800afc0 <memmove>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	4433      	add	r3, r6
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	f000 fae6 	bl	800b04c <_realloc_r>
 800aa80:	4606      	mov	r6, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d1e0      	bne.n	800aa48 <__ssputs_r+0x5c>
 800aa86:	4650      	mov	r0, sl
 800aa88:	6921      	ldr	r1, [r4, #16]
 800aa8a:	f7ff feb9 	bl	800a800 <_free_r>
 800aa8e:	230c      	movs	r3, #12
 800aa90:	f8ca 3000 	str.w	r3, [sl]
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	e7e9      	b.n	800aa76 <__ssputs_r+0x8a>
	...

0800aaa4 <_svfiprintf_r>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	4698      	mov	r8, r3
 800aaaa:	898b      	ldrh	r3, [r1, #12]
 800aaac:	4607      	mov	r7, r0
 800aaae:	061b      	lsls	r3, r3, #24
 800aab0:	460d      	mov	r5, r1
 800aab2:	4614      	mov	r4, r2
 800aab4:	b09d      	sub	sp, #116	@ 0x74
 800aab6:	d510      	bpl.n	800aada <_svfiprintf_r+0x36>
 800aab8:	690b      	ldr	r3, [r1, #16]
 800aaba:	b973      	cbnz	r3, 800aada <_svfiprintf_r+0x36>
 800aabc:	2140      	movs	r1, #64	@ 0x40
 800aabe:	f7ff ff09 	bl	800a8d4 <_malloc_r>
 800aac2:	6028      	str	r0, [r5, #0]
 800aac4:	6128      	str	r0, [r5, #16]
 800aac6:	b930      	cbnz	r0, 800aad6 <_svfiprintf_r+0x32>
 800aac8:	230c      	movs	r3, #12
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	b01d      	add	sp, #116	@ 0x74
 800aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad6:	2340      	movs	r3, #64	@ 0x40
 800aad8:	616b      	str	r3, [r5, #20]
 800aada:	2300      	movs	r3, #0
 800aadc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aade:	2320      	movs	r3, #32
 800aae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aae4:	2330      	movs	r3, #48	@ 0x30
 800aae6:	f04f 0901 	mov.w	r9, #1
 800aaea:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ac88 <_svfiprintf_r+0x1e4>
 800aaf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	469a      	mov	sl, r3
 800aafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aafe:	b10a      	cbz	r2, 800ab04 <_svfiprintf_r+0x60>
 800ab00:	2a25      	cmp	r2, #37	@ 0x25
 800ab02:	d1f9      	bne.n	800aaf8 <_svfiprintf_r+0x54>
 800ab04:	ebba 0b04 	subs.w	fp, sl, r4
 800ab08:	d00b      	beq.n	800ab22 <_svfiprintf_r+0x7e>
 800ab0a:	465b      	mov	r3, fp
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ff6b 	bl	800a9ec <__ssputs_r>
 800ab16:	3001      	adds	r0, #1
 800ab18:	f000 80a7 	beq.w	800ac6a <_svfiprintf_r+0x1c6>
 800ab1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab1e:	445a      	add	r2, fp
 800ab20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab22:	f89a 3000 	ldrb.w	r3, [sl]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 809f 	beq.w	800ac6a <_svfiprintf_r+0x1c6>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab36:	f10a 0a01 	add.w	sl, sl, #1
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	9307      	str	r3, [sp, #28]
 800ab3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab44:	4654      	mov	r4, sl
 800ab46:	2205      	movs	r2, #5
 800ab48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4c:	484e      	ldr	r0, [pc, #312]	@ (800ac88 <_svfiprintf_r+0x1e4>)
 800ab4e:	f000 fa61 	bl	800b014 <memchr>
 800ab52:	9a04      	ldr	r2, [sp, #16]
 800ab54:	b9d8      	cbnz	r0, 800ab8e <_svfiprintf_r+0xea>
 800ab56:	06d0      	lsls	r0, r2, #27
 800ab58:	bf44      	itt	mi
 800ab5a:	2320      	movmi	r3, #32
 800ab5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab60:	0711      	lsls	r1, r2, #28
 800ab62:	bf44      	itt	mi
 800ab64:	232b      	movmi	r3, #43	@ 0x2b
 800ab66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab70:	d015      	beq.n	800ab9e <_svfiprintf_r+0xfa>
 800ab72:	4654      	mov	r4, sl
 800ab74:	2000      	movs	r0, #0
 800ab76:	f04f 0c0a 	mov.w	ip, #10
 800ab7a:	9a07      	ldr	r2, [sp, #28]
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab82:	3b30      	subs	r3, #48	@ 0x30
 800ab84:	2b09      	cmp	r3, #9
 800ab86:	d94b      	bls.n	800ac20 <_svfiprintf_r+0x17c>
 800ab88:	b1b0      	cbz	r0, 800abb8 <_svfiprintf_r+0x114>
 800ab8a:	9207      	str	r2, [sp, #28]
 800ab8c:	e014      	b.n	800abb8 <_svfiprintf_r+0x114>
 800ab8e:	eba0 0308 	sub.w	r3, r0, r8
 800ab92:	fa09 f303 	lsl.w	r3, r9, r3
 800ab96:	4313      	orrs	r3, r2
 800ab98:	46a2      	mov	sl, r4
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	e7d2      	b.n	800ab44 <_svfiprintf_r+0xa0>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	1d19      	adds	r1, r3, #4
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	9103      	str	r1, [sp, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfbb      	ittet	lt
 800abaa:	425b      	neglt	r3, r3
 800abac:	f042 0202 	orrlt.w	r2, r2, #2
 800abb0:	9307      	strge	r3, [sp, #28]
 800abb2:	9307      	strlt	r3, [sp, #28]
 800abb4:	bfb8      	it	lt
 800abb6:	9204      	strlt	r2, [sp, #16]
 800abb8:	7823      	ldrb	r3, [r4, #0]
 800abba:	2b2e      	cmp	r3, #46	@ 0x2e
 800abbc:	d10a      	bne.n	800abd4 <_svfiprintf_r+0x130>
 800abbe:	7863      	ldrb	r3, [r4, #1]
 800abc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abc2:	d132      	bne.n	800ac2a <_svfiprintf_r+0x186>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	3402      	adds	r4, #2
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	9203      	str	r2, [sp, #12]
 800abce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ac8c <_svfiprintf_r+0x1e8>
 800abd8:	2203      	movs	r2, #3
 800abda:	4650      	mov	r0, sl
 800abdc:	7821      	ldrb	r1, [r4, #0]
 800abde:	f000 fa19 	bl	800b014 <memchr>
 800abe2:	b138      	cbz	r0, 800abf4 <_svfiprintf_r+0x150>
 800abe4:	2240      	movs	r2, #64	@ 0x40
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	eba0 000a 	sub.w	r0, r0, sl
 800abec:	4082      	lsls	r2, r0
 800abee:	4313      	orrs	r3, r2
 800abf0:	3401      	adds	r4, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf8:	2206      	movs	r2, #6
 800abfa:	4825      	ldr	r0, [pc, #148]	@ (800ac90 <_svfiprintf_r+0x1ec>)
 800abfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac00:	f000 fa08 	bl	800b014 <memchr>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d036      	beq.n	800ac76 <_svfiprintf_r+0x1d2>
 800ac08:	4b22      	ldr	r3, [pc, #136]	@ (800ac94 <_svfiprintf_r+0x1f0>)
 800ac0a:	bb1b      	cbnz	r3, 800ac54 <_svfiprintf_r+0x1b0>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	3307      	adds	r3, #7
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1a:	4433      	add	r3, r6
 800ac1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1e:	e76a      	b.n	800aaf6 <_svfiprintf_r+0x52>
 800ac20:	460c      	mov	r4, r1
 800ac22:	2001      	movs	r0, #1
 800ac24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac28:	e7a8      	b.n	800ab7c <_svfiprintf_r+0xd8>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f04f 0c0a 	mov.w	ip, #10
 800ac30:	4619      	mov	r1, r3
 800ac32:	3401      	adds	r4, #1
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3c:	3a30      	subs	r2, #48	@ 0x30
 800ac3e:	2a09      	cmp	r2, #9
 800ac40:	d903      	bls.n	800ac4a <_svfiprintf_r+0x1a6>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0c6      	beq.n	800abd4 <_svfiprintf_r+0x130>
 800ac46:	9105      	str	r1, [sp, #20]
 800ac48:	e7c4      	b.n	800abd4 <_svfiprintf_r+0x130>
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac52:	e7f0      	b.n	800ac36 <_svfiprintf_r+0x192>
 800ac54:	ab03      	add	r3, sp, #12
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <_svfiprintf_r+0x1f4>)
 800ac5e:	a904      	add	r1, sp, #16
 800ac60:	f3af 8000 	nop.w
 800ac64:	1c42      	adds	r2, r0, #1
 800ac66:	4606      	mov	r6, r0
 800ac68:	d1d6      	bne.n	800ac18 <_svfiprintf_r+0x174>
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	065b      	lsls	r3, r3, #25
 800ac6e:	f53f af2d 	bmi.w	800aacc <_svfiprintf_r+0x28>
 800ac72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac74:	e72c      	b.n	800aad0 <_svfiprintf_r+0x2c>
 800ac76:	ab03      	add	r3, sp, #12
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <_svfiprintf_r+0x1f4>)
 800ac80:	a904      	add	r1, sp, #16
 800ac82:	f000 f87d 	bl	800ad80 <_printf_i>
 800ac86:	e7ed      	b.n	800ac64 <_svfiprintf_r+0x1c0>
 800ac88:	0800b39c 	.word	0x0800b39c
 800ac8c:	0800b3a2 	.word	0x0800b3a2
 800ac90:	0800b3a6 	.word	0x0800b3a6
 800ac94:	00000000 	.word	0x00000000
 800ac98:	0800a9ed 	.word	0x0800a9ed

0800ac9c <_printf_common>:
 800ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	4616      	mov	r6, r2
 800aca2:	4698      	mov	r8, r3
 800aca4:	688a      	ldr	r2, [r1, #8]
 800aca6:	690b      	ldr	r3, [r1, #16]
 800aca8:	4607      	mov	r7, r0
 800acaa:	4293      	cmp	r3, r2
 800acac:	bfb8      	it	lt
 800acae:	4613      	movlt	r3, r2
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acb6:	460c      	mov	r4, r1
 800acb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acbc:	b10a      	cbz	r2, 800acc2 <_printf_common+0x26>
 800acbe:	3301      	adds	r3, #1
 800acc0:	6033      	str	r3, [r6, #0]
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	0699      	lsls	r1, r3, #26
 800acc6:	bf42      	ittt	mi
 800acc8:	6833      	ldrmi	r3, [r6, #0]
 800acca:	3302      	addmi	r3, #2
 800accc:	6033      	strmi	r3, [r6, #0]
 800acce:	6825      	ldr	r5, [r4, #0]
 800acd0:	f015 0506 	ands.w	r5, r5, #6
 800acd4:	d106      	bne.n	800ace4 <_printf_common+0x48>
 800acd6:	f104 0a19 	add.w	sl, r4, #25
 800acda:	68e3      	ldr	r3, [r4, #12]
 800acdc:	6832      	ldr	r2, [r6, #0]
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	42ab      	cmp	r3, r5
 800ace2:	dc2b      	bgt.n	800ad3c <_printf_common+0xa0>
 800ace4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	3b00      	subs	r3, #0
 800acec:	bf18      	it	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	0692      	lsls	r2, r2, #26
 800acf2:	d430      	bmi.n	800ad56 <_printf_common+0xba>
 800acf4:	4641      	mov	r1, r8
 800acf6:	4638      	mov	r0, r7
 800acf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acfc:	47c8      	blx	r9
 800acfe:	3001      	adds	r0, #1
 800ad00:	d023      	beq.n	800ad4a <_printf_common+0xae>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	6922      	ldr	r2, [r4, #16]
 800ad06:	f003 0306 	and.w	r3, r3, #6
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	bf14      	ite	ne
 800ad0e:	2500      	movne	r5, #0
 800ad10:	6833      	ldreq	r3, [r6, #0]
 800ad12:	f04f 0600 	mov.w	r6, #0
 800ad16:	bf08      	it	eq
 800ad18:	68e5      	ldreq	r5, [r4, #12]
 800ad1a:	f104 041a 	add.w	r4, r4, #26
 800ad1e:	bf08      	it	eq
 800ad20:	1aed      	subeq	r5, r5, r3
 800ad22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad26:	bf08      	it	eq
 800ad28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	bfc4      	itt	gt
 800ad30:	1a9b      	subgt	r3, r3, r2
 800ad32:	18ed      	addgt	r5, r5, r3
 800ad34:	42b5      	cmp	r5, r6
 800ad36:	d11a      	bne.n	800ad6e <_printf_common+0xd2>
 800ad38:	2000      	movs	r0, #0
 800ad3a:	e008      	b.n	800ad4e <_printf_common+0xb2>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	4652      	mov	r2, sl
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d103      	bne.n	800ad52 <_printf_common+0xb6>
 800ad4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad52:	3501      	adds	r5, #1
 800ad54:	e7c1      	b.n	800acda <_printf_common+0x3e>
 800ad56:	2030      	movs	r0, #48	@ 0x30
 800ad58:	18e1      	adds	r1, r4, r3
 800ad5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad64:	4422      	add	r2, r4
 800ad66:	3302      	adds	r3, #2
 800ad68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad6c:	e7c2      	b.n	800acf4 <_printf_common+0x58>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4622      	mov	r2, r4
 800ad72:	4641      	mov	r1, r8
 800ad74:	4638      	mov	r0, r7
 800ad76:	47c8      	blx	r9
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d0e6      	beq.n	800ad4a <_printf_common+0xae>
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7d9      	b.n	800ad34 <_printf_common+0x98>

0800ad80 <_printf_i>:
 800ad80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	7e0f      	ldrb	r7, [r1, #24]
 800ad86:	4691      	mov	r9, r2
 800ad88:	2f78      	cmp	r7, #120	@ 0x78
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	469a      	mov	sl, r3
 800ad90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad96:	d807      	bhi.n	800ada8 <_printf_i+0x28>
 800ad98:	2f62      	cmp	r7, #98	@ 0x62
 800ad9a:	d80a      	bhi.n	800adb2 <_printf_i+0x32>
 800ad9c:	2f00      	cmp	r7, #0
 800ad9e:	f000 80d3 	beq.w	800af48 <_printf_i+0x1c8>
 800ada2:	2f58      	cmp	r7, #88	@ 0x58
 800ada4:	f000 80ba 	beq.w	800af1c <_printf_i+0x19c>
 800ada8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adb0:	e03a      	b.n	800ae28 <_printf_i+0xa8>
 800adb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adb6:	2b15      	cmp	r3, #21
 800adb8:	d8f6      	bhi.n	800ada8 <_printf_i+0x28>
 800adba:	a101      	add	r1, pc, #4	@ (adr r1, 800adc0 <_printf_i+0x40>)
 800adbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae2d 	.word	0x0800ae2d
 800adc8:	0800ada9 	.word	0x0800ada9
 800adcc:	0800ada9 	.word	0x0800ada9
 800add0:	0800ada9 	.word	0x0800ada9
 800add4:	0800ada9 	.word	0x0800ada9
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ada9 	.word	0x0800ada9
 800ade0:	0800ada9 	.word	0x0800ada9
 800ade4:	0800ada9 	.word	0x0800ada9
 800ade8:	0800ada9 	.word	0x0800ada9
 800adec:	0800af2f 	.word	0x0800af2f
 800adf0:	0800ae57 	.word	0x0800ae57
 800adf4:	0800aee9 	.word	0x0800aee9
 800adf8:	0800ada9 	.word	0x0800ada9
 800adfc:	0800ada9 	.word	0x0800ada9
 800ae00:	0800af51 	.word	0x0800af51
 800ae04:	0800ada9 	.word	0x0800ada9
 800ae08:	0800ae57 	.word	0x0800ae57
 800ae0c:	0800ada9 	.word	0x0800ada9
 800ae10:	0800ada9 	.word	0x0800ada9
 800ae14:	0800aef1 	.word	0x0800aef1
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	1d1a      	adds	r2, r3, #4
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6032      	str	r2, [r6, #0]
 800ae20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e09e      	b.n	800af6a <_printf_i+0x1ea>
 800ae2c:	6833      	ldr	r3, [r6, #0]
 800ae2e:	6820      	ldr	r0, [r4, #0]
 800ae30:	1d19      	adds	r1, r3, #4
 800ae32:	6031      	str	r1, [r6, #0]
 800ae34:	0606      	lsls	r6, r0, #24
 800ae36:	d501      	bpl.n	800ae3c <_printf_i+0xbc>
 800ae38:	681d      	ldr	r5, [r3, #0]
 800ae3a:	e003      	b.n	800ae44 <_printf_i+0xc4>
 800ae3c:	0645      	lsls	r5, r0, #25
 800ae3e:	d5fb      	bpl.n	800ae38 <_printf_i+0xb8>
 800ae40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	da03      	bge.n	800ae50 <_printf_i+0xd0>
 800ae48:	232d      	movs	r3, #45	@ 0x2d
 800ae4a:	426d      	negs	r5, r5
 800ae4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae50:	230a      	movs	r3, #10
 800ae52:	4859      	ldr	r0, [pc, #356]	@ (800afb8 <_printf_i+0x238>)
 800ae54:	e011      	b.n	800ae7a <_printf_i+0xfa>
 800ae56:	6821      	ldr	r1, [r4, #0]
 800ae58:	6833      	ldr	r3, [r6, #0]
 800ae5a:	0608      	lsls	r0, r1, #24
 800ae5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae60:	d402      	bmi.n	800ae68 <_printf_i+0xe8>
 800ae62:	0649      	lsls	r1, r1, #25
 800ae64:	bf48      	it	mi
 800ae66:	b2ad      	uxthmi	r5, r5
 800ae68:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae6a:	6033      	str	r3, [r6, #0]
 800ae6c:	bf14      	ite	ne
 800ae6e:	230a      	movne	r3, #10
 800ae70:	2308      	moveq	r3, #8
 800ae72:	4851      	ldr	r0, [pc, #324]	@ (800afb8 <_printf_i+0x238>)
 800ae74:	2100      	movs	r1, #0
 800ae76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae7a:	6866      	ldr	r6, [r4, #4]
 800ae7c:	2e00      	cmp	r6, #0
 800ae7e:	bfa8      	it	ge
 800ae80:	6821      	ldrge	r1, [r4, #0]
 800ae82:	60a6      	str	r6, [r4, #8]
 800ae84:	bfa4      	itt	ge
 800ae86:	f021 0104 	bicge.w	r1, r1, #4
 800ae8a:	6021      	strge	r1, [r4, #0]
 800ae8c:	b90d      	cbnz	r5, 800ae92 <_printf_i+0x112>
 800ae8e:	2e00      	cmp	r6, #0
 800ae90:	d04b      	beq.n	800af2a <_printf_i+0x1aa>
 800ae92:	4616      	mov	r6, r2
 800ae94:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae98:	fb03 5711 	mls	r7, r3, r1, r5
 800ae9c:	5dc7      	ldrb	r7, [r0, r7]
 800ae9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aea2:	462f      	mov	r7, r5
 800aea4:	42bb      	cmp	r3, r7
 800aea6:	460d      	mov	r5, r1
 800aea8:	d9f4      	bls.n	800ae94 <_printf_i+0x114>
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d10b      	bne.n	800aec6 <_printf_i+0x146>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	07df      	lsls	r7, r3, #31
 800aeb2:	d508      	bpl.n	800aec6 <_printf_i+0x146>
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	6861      	ldr	r1, [r4, #4]
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	bfde      	ittt	le
 800aebc:	2330      	movle	r3, #48	@ 0x30
 800aebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aec6:	1b92      	subs	r2, r2, r6
 800aec8:	6122      	str	r2, [r4, #16]
 800aeca:	464b      	mov	r3, r9
 800aecc:	4621      	mov	r1, r4
 800aece:	4640      	mov	r0, r8
 800aed0:	f8cd a000 	str.w	sl, [sp]
 800aed4:	aa03      	add	r2, sp, #12
 800aed6:	f7ff fee1 	bl	800ac9c <_printf_common>
 800aeda:	3001      	adds	r0, #1
 800aedc:	d14a      	bne.n	800af74 <_printf_i+0x1f4>
 800aede:	f04f 30ff 	mov.w	r0, #4294967295
 800aee2:	b004      	add	sp, #16
 800aee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	f043 0320 	orr.w	r3, r3, #32
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	2778      	movs	r7, #120	@ 0x78
 800aef2:	4832      	ldr	r0, [pc, #200]	@ (800afbc <_printf_i+0x23c>)
 800aef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	6831      	ldr	r1, [r6, #0]
 800aefc:	061f      	lsls	r7, r3, #24
 800aefe:	f851 5b04 	ldr.w	r5, [r1], #4
 800af02:	d402      	bmi.n	800af0a <_printf_i+0x18a>
 800af04:	065f      	lsls	r7, r3, #25
 800af06:	bf48      	it	mi
 800af08:	b2ad      	uxthmi	r5, r5
 800af0a:	6031      	str	r1, [r6, #0]
 800af0c:	07d9      	lsls	r1, r3, #31
 800af0e:	bf44      	itt	mi
 800af10:	f043 0320 	orrmi.w	r3, r3, #32
 800af14:	6023      	strmi	r3, [r4, #0]
 800af16:	b11d      	cbz	r5, 800af20 <_printf_i+0x1a0>
 800af18:	2310      	movs	r3, #16
 800af1a:	e7ab      	b.n	800ae74 <_printf_i+0xf4>
 800af1c:	4826      	ldr	r0, [pc, #152]	@ (800afb8 <_printf_i+0x238>)
 800af1e:	e7e9      	b.n	800aef4 <_printf_i+0x174>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	f023 0320 	bic.w	r3, r3, #32
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	e7f6      	b.n	800af18 <_printf_i+0x198>
 800af2a:	4616      	mov	r6, r2
 800af2c:	e7bd      	b.n	800aeaa <_printf_i+0x12a>
 800af2e:	6833      	ldr	r3, [r6, #0]
 800af30:	6825      	ldr	r5, [r4, #0]
 800af32:	1d18      	adds	r0, r3, #4
 800af34:	6961      	ldr	r1, [r4, #20]
 800af36:	6030      	str	r0, [r6, #0]
 800af38:	062e      	lsls	r6, r5, #24
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	d501      	bpl.n	800af42 <_printf_i+0x1c2>
 800af3e:	6019      	str	r1, [r3, #0]
 800af40:	e002      	b.n	800af48 <_printf_i+0x1c8>
 800af42:	0668      	lsls	r0, r5, #25
 800af44:	d5fb      	bpl.n	800af3e <_printf_i+0x1be>
 800af46:	8019      	strh	r1, [r3, #0]
 800af48:	2300      	movs	r3, #0
 800af4a:	4616      	mov	r6, r2
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	e7bc      	b.n	800aeca <_printf_i+0x14a>
 800af50:	6833      	ldr	r3, [r6, #0]
 800af52:	2100      	movs	r1, #0
 800af54:	1d1a      	adds	r2, r3, #4
 800af56:	6032      	str	r2, [r6, #0]
 800af58:	681e      	ldr	r6, [r3, #0]
 800af5a:	6862      	ldr	r2, [r4, #4]
 800af5c:	4630      	mov	r0, r6
 800af5e:	f000 f859 	bl	800b014 <memchr>
 800af62:	b108      	cbz	r0, 800af68 <_printf_i+0x1e8>
 800af64:	1b80      	subs	r0, r0, r6
 800af66:	6060      	str	r0, [r4, #4]
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	6123      	str	r3, [r4, #16]
 800af6c:	2300      	movs	r3, #0
 800af6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af72:	e7aa      	b.n	800aeca <_printf_i+0x14a>
 800af74:	4632      	mov	r2, r6
 800af76:	4649      	mov	r1, r9
 800af78:	4640      	mov	r0, r8
 800af7a:	6923      	ldr	r3, [r4, #16]
 800af7c:	47d0      	blx	sl
 800af7e:	3001      	adds	r0, #1
 800af80:	d0ad      	beq.n	800aede <_printf_i+0x15e>
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	079b      	lsls	r3, r3, #30
 800af86:	d413      	bmi.n	800afb0 <_printf_i+0x230>
 800af88:	68e0      	ldr	r0, [r4, #12]
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	4298      	cmp	r0, r3
 800af8e:	bfb8      	it	lt
 800af90:	4618      	movlt	r0, r3
 800af92:	e7a6      	b.n	800aee2 <_printf_i+0x162>
 800af94:	2301      	movs	r3, #1
 800af96:	4632      	mov	r2, r6
 800af98:	4649      	mov	r1, r9
 800af9a:	4640      	mov	r0, r8
 800af9c:	47d0      	blx	sl
 800af9e:	3001      	adds	r0, #1
 800afa0:	d09d      	beq.n	800aede <_printf_i+0x15e>
 800afa2:	3501      	adds	r5, #1
 800afa4:	68e3      	ldr	r3, [r4, #12]
 800afa6:	9903      	ldr	r1, [sp, #12]
 800afa8:	1a5b      	subs	r3, r3, r1
 800afaa:	42ab      	cmp	r3, r5
 800afac:	dcf2      	bgt.n	800af94 <_printf_i+0x214>
 800afae:	e7eb      	b.n	800af88 <_printf_i+0x208>
 800afb0:	2500      	movs	r5, #0
 800afb2:	f104 0619 	add.w	r6, r4, #25
 800afb6:	e7f5      	b.n	800afa4 <_printf_i+0x224>
 800afb8:	0800b3ad 	.word	0x0800b3ad
 800afbc:	0800b3be 	.word	0x0800b3be

0800afc0 <memmove>:
 800afc0:	4288      	cmp	r0, r1
 800afc2:	b510      	push	{r4, lr}
 800afc4:	eb01 0402 	add.w	r4, r1, r2
 800afc8:	d902      	bls.n	800afd0 <memmove+0x10>
 800afca:	4284      	cmp	r4, r0
 800afcc:	4623      	mov	r3, r4
 800afce:	d807      	bhi.n	800afe0 <memmove+0x20>
 800afd0:	1e43      	subs	r3, r0, #1
 800afd2:	42a1      	cmp	r1, r4
 800afd4:	d008      	beq.n	800afe8 <memmove+0x28>
 800afd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afde:	e7f8      	b.n	800afd2 <memmove+0x12>
 800afe0:	4601      	mov	r1, r0
 800afe2:	4402      	add	r2, r0
 800afe4:	428a      	cmp	r2, r1
 800afe6:	d100      	bne.n	800afea <memmove+0x2a>
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aff2:	e7f7      	b.n	800afe4 <memmove+0x24>

0800aff4 <_sbrk_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	2300      	movs	r3, #0
 800aff8:	4d05      	ldr	r5, [pc, #20]	@ (800b010 <_sbrk_r+0x1c>)
 800affa:	4604      	mov	r4, r0
 800affc:	4608      	mov	r0, r1
 800affe:	602b      	str	r3, [r5, #0]
 800b000:	f7f6 f85e 	bl	80010c0 <_sbrk>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d102      	bne.n	800b00e <_sbrk_r+0x1a>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b103      	cbz	r3, 800b00e <_sbrk_r+0x1a>
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	20004128 	.word	0x20004128

0800b014 <memchr>:
 800b014:	4603      	mov	r3, r0
 800b016:	b510      	push	{r4, lr}
 800b018:	b2c9      	uxtb	r1, r1
 800b01a:	4402      	add	r2, r0
 800b01c:	4293      	cmp	r3, r2
 800b01e:	4618      	mov	r0, r3
 800b020:	d101      	bne.n	800b026 <memchr+0x12>
 800b022:	2000      	movs	r0, #0
 800b024:	e003      	b.n	800b02e <memchr+0x1a>
 800b026:	7804      	ldrb	r4, [r0, #0]
 800b028:	3301      	adds	r3, #1
 800b02a:	428c      	cmp	r4, r1
 800b02c:	d1f6      	bne.n	800b01c <memchr+0x8>
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <memcpy>:
 800b030:	440a      	add	r2, r1
 800b032:	4291      	cmp	r1, r2
 800b034:	f100 33ff 	add.w	r3, r0, #4294967295
 800b038:	d100      	bne.n	800b03c <memcpy+0xc>
 800b03a:	4770      	bx	lr
 800b03c:	b510      	push	{r4, lr}
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	4291      	cmp	r1, r2
 800b044:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b048:	d1f9      	bne.n	800b03e <memcpy+0xe>
 800b04a:	bd10      	pop	{r4, pc}

0800b04c <_realloc_r>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	4680      	mov	r8, r0
 800b052:	4615      	mov	r5, r2
 800b054:	460c      	mov	r4, r1
 800b056:	b921      	cbnz	r1, 800b062 <_realloc_r+0x16>
 800b058:	4611      	mov	r1, r2
 800b05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05e:	f7ff bc39 	b.w	800a8d4 <_malloc_r>
 800b062:	b92a      	cbnz	r2, 800b070 <_realloc_r+0x24>
 800b064:	f7ff fbcc 	bl	800a800 <_free_r>
 800b068:	2400      	movs	r4, #0
 800b06a:	4620      	mov	r0, r4
 800b06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b070:	f000 f81a 	bl	800b0a8 <_malloc_usable_size_r>
 800b074:	4285      	cmp	r5, r0
 800b076:	4606      	mov	r6, r0
 800b078:	d802      	bhi.n	800b080 <_realloc_r+0x34>
 800b07a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b07e:	d8f4      	bhi.n	800b06a <_realloc_r+0x1e>
 800b080:	4629      	mov	r1, r5
 800b082:	4640      	mov	r0, r8
 800b084:	f7ff fc26 	bl	800a8d4 <_malloc_r>
 800b088:	4607      	mov	r7, r0
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0ec      	beq.n	800b068 <_realloc_r+0x1c>
 800b08e:	42b5      	cmp	r5, r6
 800b090:	462a      	mov	r2, r5
 800b092:	4621      	mov	r1, r4
 800b094:	bf28      	it	cs
 800b096:	4632      	movcs	r2, r6
 800b098:	f7ff ffca 	bl	800b030 <memcpy>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7ff fbae 	bl	800a800 <_free_r>
 800b0a4:	463c      	mov	r4, r7
 800b0a6:	e7e0      	b.n	800b06a <_realloc_r+0x1e>

0800b0a8 <_malloc_usable_size_r>:
 800b0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ac:	1f18      	subs	r0, r3, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfbc      	itt	lt
 800b0b2:	580b      	ldrlt	r3, [r1, r0]
 800b0b4:	18c0      	addlt	r0, r0, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr
